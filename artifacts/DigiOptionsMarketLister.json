{
	"schemaVersion": "2.0.0",
	"contractName": "DigiOptionsMarketLister",
	"compilerOutput": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "contract DigiOptionsMarkets",
						"name": "addr",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "bytes32",
						"name": "marketKey",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "uint48",
						"name": "expirationDatetimeFilter",
						"type": "uint48"
					},
					{
						"indexed": false,
						"internalType": "uint40",
						"name": "expirationDatetime",
						"type": "uint40"
					},
					{
						"indexed": true,
						"internalType": "uint8",
						"name": "marketInterval",
						"type": "uint8"
					},
					{
						"indexed": true,
						"internalType": "uint8",
						"name": "marketCategory",
						"type": "uint8"
					},
					{
						"indexed": false,
						"internalType": "uint40",
						"name": "openTime",
						"type": "uint40"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "underlyingString",
						"type": "string"
					}
				],
				"name": "MarketCreateLister",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "uint40",
						"name": "expirationDatetime",
						"type": "uint40"
					}
				],
				"name": "calcMarketInterval",
				"outputs": [
					{
						"internalType": "uint8",
						"name": "interval",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "string",
								"name": "underlyingString",
								"type": "string"
							},
							{
								"internalType": "uint40",
								"name": "expirationDatetime",
								"type": "uint40"
							},
							{
								"internalType": "uint24",
								"name": "objectionPeriod",
								"type": "uint24"
							},
							{
								"internalType": "uint8",
								"name": "config",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "marketCategory",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "baseUnitExp",
								"type": "uint8"
							},
							{
								"internalType": "int8",
								"name": "ndigit",
								"type": "int8"
							},
							{
								"internalType": "address",
								"name": "signerAddr",
								"type": "address"
							},
							{
								"internalType": "uint8",
								"name": "marketInterval",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "transactionFee0",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "transactionFee1",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "transactionFeeSigner",
								"type": "uint8"
							},
							{
								"internalType": "address",
								"name": "feeTaker0",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "feeTaker1",
								"type": "address"
							},
							{
								"internalType": "int128[]",
								"name": "strikes",
								"type": "int128[]"
							}
						],
						"internalType": "struct DigiOptionsLib.MarketBaseData",
						"name": "marketBaseData",
						"type": "tuple"
					},
					{
						"internalType": "bool",
						"name": "testMarket",
						"type": "bool"
					},
					{
						"components": [
							{
								"internalType": "uint8",
								"name": "v",
								"type": "uint8"
							},
							{
								"internalType": "bytes32",
								"name": "r",
								"type": "bytes32"
							},
							{
								"internalType": "bytes32",
								"name": "s",
								"type": "bytes32"
							}
						],
						"internalType": "struct FactsignerVerify.Signature",
						"name": "signature",
						"type": "tuple"
					}
				],
				"name": "createMarket",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "marketHash",
						"type": "bytes32"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getContractInfo",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "contractInfoValues",
						"type": "uint256[]"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "addr",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "marketHash",
						"type": "bytes32"
					}
				],
				"name": "getMarketDataByMarketHash",
				"outputs": [
					{
						"components": [
							{
								"components": [
									{
										"internalType": "string",
										"name": "underlyingString",
										"type": "string"
									},
									{
										"internalType": "uint40",
										"name": "expirationDatetime",
										"type": "uint40"
									},
									{
										"internalType": "uint24",
										"name": "objectionPeriod",
										"type": "uint24"
									},
									{
										"internalType": "uint8",
										"name": "config",
										"type": "uint8"
									},
									{
										"internalType": "uint8",
										"name": "marketCategory",
										"type": "uint8"
									},
									{
										"internalType": "uint8",
										"name": "baseUnitExp",
										"type": "uint8"
									},
									{
										"internalType": "int8",
										"name": "ndigit",
										"type": "int8"
									},
									{
										"internalType": "address",
										"name": "signerAddr",
										"type": "address"
									},
									{
										"internalType": "uint8",
										"name": "marketInterval",
										"type": "uint8"
									},
									{
										"internalType": "uint8",
										"name": "transactionFee0",
										"type": "uint8"
									},
									{
										"internalType": "uint8",
										"name": "transactionFee1",
										"type": "uint8"
									},
									{
										"internalType": "uint8",
										"name": "transactionFeeSigner",
										"type": "uint8"
									},
									{
										"internalType": "address",
										"name": "feeTaker0",
										"type": "address"
									},
									{
										"internalType": "address",
										"name": "feeTaker1",
										"type": "address"
									},
									{
										"internalType": "int128[]",
										"name": "strikes",
										"type": "int128[]"
									}
								],
								"internalType": "struct DigiOptionsLib.MarketBaseData",
								"name": "marketBaseData",
								"type": "tuple"
							},
							{
								"components": [
									{
										"internalType": "uint128",
										"name": "fee",
										"type": "uint128"
									},
									{
										"internalType": "uint16",
										"name": "winningOptionID",
										"type": "uint16"
									},
									{
										"internalType": "bool",
										"name": "settled",
										"type": "bool"
									}
								],
								"internalType": "struct DigiOptionsLib.MarketState",
								"name": "marketState",
								"type": "tuple"
							},
							{
								"internalType": "bytes32",
								"name": "marketHash",
								"type": "bytes32"
							},
							{
								"internalType": "enum DigiOptionsLib.UserState",
								"name": "userState",
								"type": "uint8"
							},
							{
								"internalType": "bool",
								"name": "testMarket",
								"type": "bool"
							}
						],
						"internalType": "struct DigiOptionsLib.MarketData",
						"name": "marketData",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "addr",
						"type": "address"
					},
					{
						"internalType": "bytes32[]",
						"name": "marketKeys",
						"type": "bytes32[]"
					}
				],
				"name": "getMarketDataListByMarketKeys",
				"outputs": [
					{
						"components": [
							{
								"components": [
									{
										"internalType": "string",
										"name": "underlyingString",
										"type": "string"
									},
									{
										"internalType": "uint40",
										"name": "expirationDatetime",
										"type": "uint40"
									},
									{
										"internalType": "uint24",
										"name": "objectionPeriod",
										"type": "uint24"
									},
									{
										"internalType": "uint8",
										"name": "config",
										"type": "uint8"
									},
									{
										"internalType": "uint8",
										"name": "marketCategory",
										"type": "uint8"
									},
									{
										"internalType": "uint8",
										"name": "baseUnitExp",
										"type": "uint8"
									},
									{
										"internalType": "int8",
										"name": "ndigit",
										"type": "int8"
									},
									{
										"internalType": "address",
										"name": "signerAddr",
										"type": "address"
									},
									{
										"internalType": "uint8",
										"name": "marketInterval",
										"type": "uint8"
									},
									{
										"internalType": "uint8",
										"name": "transactionFee0",
										"type": "uint8"
									},
									{
										"internalType": "uint8",
										"name": "transactionFee1",
										"type": "uint8"
									},
									{
										"internalType": "uint8",
										"name": "transactionFeeSigner",
										"type": "uint8"
									},
									{
										"internalType": "address",
										"name": "feeTaker0",
										"type": "address"
									},
									{
										"internalType": "address",
										"name": "feeTaker1",
										"type": "address"
									},
									{
										"internalType": "int128[]",
										"name": "strikes",
										"type": "int128[]"
									}
								],
								"internalType": "struct DigiOptionsLib.MarketBaseData",
								"name": "marketBaseData",
								"type": "tuple"
							},
							{
								"components": [
									{
										"internalType": "uint128",
										"name": "fee",
										"type": "uint128"
									},
									{
										"internalType": "uint16",
										"name": "winningOptionID",
										"type": "uint16"
									},
									{
										"internalType": "bool",
										"name": "settled",
										"type": "bool"
									}
								],
								"internalType": "struct DigiOptionsLib.MarketState",
								"name": "marketState",
								"type": "tuple"
							},
							{
								"internalType": "bytes32",
								"name": "marketHash",
								"type": "bytes32"
							},
							{
								"internalType": "enum DigiOptionsLib.UserState",
								"name": "userState",
								"type": "uint8"
							},
							{
								"internalType": "bool",
								"name": "testMarket",
								"type": "bool"
							}
						],
						"internalType": "struct DigiOptionsLib.MarketData[]",
						"name": "marketDataList",
						"type": "tuple[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getMarketListerInfo",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "listerValues",
						"type": "uint256[]"
					},
					{
						"components": [
							{
								"internalType": "address",
								"name": "signerAddr",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "value",
								"type": "uint256"
							}
						],
						"internalType": "struct DigiOptionsMarketLister.SignerData[]",
						"name": "signerDataList",
						"type": "tuple[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "marketHash",
						"type": "bytes32"
					},
					{
						"internalType": "bool",
						"name": "testMarket",
						"type": "bool"
					}
				],
				"name": "registerMarket",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "string",
								"name": "underlyingString",
								"type": "string"
							},
							{
								"internalType": "uint40",
								"name": "expirationDatetime",
								"type": "uint40"
							},
							{
								"internalType": "uint24",
								"name": "objectionPeriod",
								"type": "uint24"
							},
							{
								"internalType": "uint8",
								"name": "config",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "marketCategory",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "baseUnitExp",
								"type": "uint8"
							},
							{
								"internalType": "int8",
								"name": "ndigit",
								"type": "int8"
							},
							{
								"internalType": "address",
								"name": "signerAddr",
								"type": "address"
							},
							{
								"internalType": "uint8",
								"name": "marketInterval",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "transactionFee0",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "transactionFee1",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "transactionFeeSigner",
								"type": "uint8"
							},
							{
								"internalType": "address",
								"name": "feeTaker0",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "feeTaker1",
								"type": "address"
							},
							{
								"internalType": "int128[]",
								"name": "strikes",
								"type": "int128[]"
							}
						],
						"internalType": "struct DigiOptionsLib.MarketBaseData",
						"name": "marketBaseData",
						"type": "tuple"
					}
				],
				"name": "registerMarketTest",
				"outputs": [
					{
						"internalType": "bool",
						"name": "registerPossible",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "signerAddr",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "setSigner",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "marketHash",
						"type": "bytes32"
					},
					{
						"internalType": "bool",
						"name": "testMarket",
						"type": "bool"
					}
				],
				"name": "setTestMarket",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"evm": {
			"bytecode": {
				"object": "",
				"sourceMap": "1738:13207:2:-:0;;;3210:1;3172:39;;4008:148;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4060:5;:18;;4068:10;-1:-1:-1;;;;;;4060:18:2;;;;;;;4102:12;-1:-1:-1;4088:26:2;4124:18;:25;;;;;-1:-1:-1;;;;;4124:25:2;;;;;;;;;;1738:13207;;14:337:11;;164:2;152:9;143:7;139:23;135:32;132:2;;;185:6;177;170:22;132:2;216:16;;-1:-1:-1;;;;;261:31:11;;251:42;;241:2;;312:6;304;297:22;241:2;340:5;122:229;-1:-1:-1;;;122:229:11:o;:::-;1738:13207:2;;;;;;"
			},
			"deployedBytecode": {
				"object": "0x608060405234801561001057600080fd5b50600436106100be5760003560e01c8063711c2b94116100765780638677e7b91161005b5780638677e7b91461017f578063b3889bb314610192578063c70be146146101b2576100be565b8063711c2b94146101575780637cc1f8671461016a576100be565b80632556d8d0116100a75780632556d8d01461010257806352d026881461012257806365e47b8c14610142576100be565b8063095200ce146100c35780630f8f8244146100ec575b600080fd5b6100d66100d1366004611e63565b6101d2565b6040516100e391906123be565b60405180910390f35b6100f4610281565b6040516100e3929190612208565b610115610110366004611ce6565b610488565b6040516100e39190612289565b610135610130366004611afc565b610592565b6040516100e39190612177565b610155610150366004611b7e565b61064c565b005b610155610165366004611c51565b6107ef565b61017261087e565b6040516100e391906121f5565b61015561018d366004611c51565b6109ea565b6101a56101a0366004611c80565b610b1a565b6040516100e3919061227e565b6101c56101c0366004611b7e565b610c34565b6040516100e39190612399565b6002546040517f095200ce00000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff169063095200ce906102299085906004016123ac565b60206040518083038186803b15801561024157600080fd5b505afa158015610255573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102799190611e7f565b90505b919050565b60408051600780825261010082019092526060918291906020820160e08036833701905050915062350000826000815181106102b957fe5b60209081029190910101526001805473ffffffffffffffffffffffffffffffffffffffff16908390815181106102eb57fe5b602090810291909101015260648260028151811061030557fe5b6020908102919091010152600a8260038151811061031f57fe5b6020908102919091010152600a8260048151811061033957fe5b6020908102919091010152600582818151811061035257fe5b60209081029190910101526102588260068151811061036d57fe5b60209081029190910101526006548067ffffffffffffffff8111801561039257600080fd5b506040519080825280602002602001820160405280156103cc57816020015b6103b96114cf565b8152602001906001900390816103b15790505b5060045490925073ffffffffffffffffffffffffffffffffffffffff1660005b828110156104815760408051808201825273ffffffffffffffffffffffffffffffffffffffff84168082526000908152600560209081529290205491810191909152845185908390811061043c57fe5b60209081029190910181019190915273ffffffffffffffffffffffffffffffffffffffff928316600090815260059091526040902060019081015490921691016103ec565b5050509091565b600061049384610b1a565b6104d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c99061231f565b60405180910390fd5b6002546040517f2556d8d000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690632556d8d09061052c90879087908790600401612356565b602060405180830381600087803b15801561054657600080fd5b505af115801561055a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057e9190611c39565b905061058b848285610d26565b9392505050565b60608167ffffffffffffffff811180156105ab57600080fd5b506040519080825280602002602001820160405280156105e557816020015b6105d26114e6565b8152602001906001900390816105ca5790505b50905060005b8281101561064457610625856007600087878681811061060757fe5b90506020020135815260200190815260200160002060000154610c34565b82828151811061063157fe5b60209081029190910101526001016105eb565b509392505050565b60015473ffffffffffffffffffffffffffffffffffffffff16331461069d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c9906122c2565b73ffffffffffffffffffffffffffffffffffffffff821660009081526005602052604090206001015474010000000000000000000000000000000000000000900460ff16156107135773ffffffffffffffffffffffffffffffffffffffff821660009081526005602052604090208190556107eb565b600480546040805160608101825284815273ffffffffffffffffffffffffffffffffffffffff92831660208083019182526001838501818152898716600081815260059094529590922093518455915192820180549151151574010000000000000000000000000000000000000000027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff949096167fffffffffffffffffffffffff00000000000000000000000000000000000000009283161793909316949094179091558354909216179091556006805490910190555b5050565b60015473ffffffffffffffffffffffffffffffffffffffff163314610840576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c9906122c2565b60009182526008602052604090912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b60606000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637cc1f8676040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156108ec57600080fd5b505af1158015610900573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526109469190810190611ba9565b905060028160008151811061095757fe5b6020908102919091010152623500008160018151811061097357fe5b602090810291909101015260025473ffffffffffffffffffffffffffffffffffffffff16816003815181106109a457fe5b6020908102919091010152600054816004815181106109bf57fe5b6020908102919091010152600354816008815181106109da57fe5b6020908102919091010152905090565b6002546040517fee1f69eb00000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff169063ee1f69eb90610a41908690600401612289565b60006040518083038186803b158015610a5957600080fd5b505afa158015610a6d573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610ab39190810190611cb3565b9050806020015164ffffffffff1660001415610acb57fe5b610ad481610b1a565b610b0a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c99061231f565b610b15818484610d26565b505050565b60015460009073ffffffffffffffffffffffffffffffffffffffff16331415610b455750600161027c565b60e082015173ffffffffffffffffffffffffffffffffffffffff16600090815260056020526040902054610b7b5750600061027c565b6064610bb283610160015160ff16610bac85610140015160ff1686610120015160ff16610fee90919063ffffffff16565b90610fee565b11158015610bc95750600a82610120015160ff1610155b8015610bde5750600a82610140015160ff1610155b8015610bf35750600582610160015160ff1610155b8015610c1f575060015461018083015173ffffffffffffffffffffffffffffffffffffffff9081169116145b15610c2c5750600161027c565b506000919050565b610c3c6114e6565b6002546040517fc70be14600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063c70be14690610c949086908690600401612151565b60006040518083038186803b158015610cac57600080fd5b505afa158015610cc0573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610d069190810190611dac565b6000928352600860205260409092205460ff161515608083015250919050565b6000610d3184611062565b6000818152600760205260409020805491925090610f775760015460009073ffffffffffffffffffffffffffffffffffffffff163314610d75574261025801610d78565b60005b6040805160608101825287815261012089015160ff908116602080840191825264ffffffffff86811685870190815260008b81526007909352959091209351845590516001938401805495517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0090961691909316177fffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000ff16931661010002929092179091555490915073ffffffffffffffffffffffffffffffffffffffff16331415610e7657600085815260086020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168515151790555b6000866080015160080260ff1687610100015160ff166001901b901b9050806003541660001415610eaa5760038054821790555b606087015160009060041615610ec65750610100870151610ed6565b610ed388602001516112c4565b90505b876080015160ff1688610100015160ff168260ff166008610ef98560ff166113b4565b65ffffffffffff168c6020015164ffffffffff1681610f1457fe5b0465ffffffffffff16901b0165ffffffffffff167f3d4b4c0dc42d96da48d02a2693392bfa4fdbfb0bec570e48f5186f9f75fe8ecb888c60200151888e60000151604051610f659493929190612292565b60405180910390a45050505050610b15565b600181015461012086015160ff9182169116118015610fa557506001810154610100900464ffffffffff1642105b15610fe7578381556101208501516001820180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff9092169190911790555b5050505050565b60008282018381101561058b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000606082600001516040516020018082805190602001908083835b602083106110bb57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201916020918201910161107e565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040528051906020012083602001518460400151856060015186608001518760a001518860c001518961010001518a60e00151604051602001808a81526020018964ffffffffff1660d81b81526005018862ffffff1660e81b81526003018760ff1660f81b81526001018660ff1660f81b81526001018560ff1660f81b81526001018460000b60f81b81526001018360ff1660f81b81526001018273ffffffffffffffffffffffffffffffffffffffff1660601b815260140199505050505050505050506040516020818303038152906040529050600160048111156111ce57fe5b83606001511660ff16600014156112b65780836101c001516040516020018083805190602001908083835b6020831061123657805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016111f9565b51815160209384036101000a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01801990921691161790528551919093019285810192500280838360005b83811015611299578181015183820152602001611281565b505050509050019250505060405160208183030381529060405290505b805160209091012092915050565b600080806112d964ffffffffff8516426113e1565b90506303c26700811061134d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f746f6f2066617220696e20746865206675747572650000000000000000000000604482015290519081900360640190fd5b623b53808111156113625760015b91506113ad565b620a8c0081111561137457600361135b565b6201fa4081111561138657600461135b565b611c2081111561139757600561135b565b6103848111156113a857600661135b565b600791505b5092915050565b6000806040518060600160405280602a8152602001612503602a9139600184016006020151915050919050565b600061058b83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250600081848411156114c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561148c578181015183820152602001611474565b50505050905090810190601f1680156114b95780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b604080518082019091526000808252602082015290565b6040518060a001604052806114f9611521565b815260200161150661159f565b81526000602082018190526040820181905260609091015290565b604080516101e08101825260608082526000602083018190529282018390528082018390526080820183905260a0820183905260c0820183905260e08201839052610100820183905261012082018390526101408201839052610160820183905261018082018390526101a08201929092526101c081019190915290565b604080516060810182526000808252602082018190529181019190915290565b803561027c8161247e565b805161027c8161247e565b600082601f8301126115e5578081fd5b813560206115fa6115f5836123f0565b6123cc565b8281528181019085830183850287018401881015611616578586fd5b855b8581101561163d57813561162b816124b1565b84529284019290840190600101611618565b5090979650505050505050565b600082601f83011261165a578081fd5b8151602061166a6115f5836123f0565b8281528181019085830183850287018401881015611686578586fd5b855b8581101561163d57815161169b816124b1565b84529284019290840190600101611688565b805161027c816124a3565b80516003811061027c57600080fd5b803561027c816124c0565b805161027c816124c0565b600082601f8301126116ed578081fd5b81356116fb6115f58261240e565b81815284602083860101111561170f578283fd5b816020850160208301379081016020019190915292915050565b600082601f830112611739578081fd5b81516117476115f58261240e565b81815284602083860101111561175b578283fd5b61176c82602083016020870161244e565b949350505050565b60006101e0808385031215611787578182fd5b611790816123cc565b915050813567ffffffffffffffff808211156117ab57600080fd5b6117b7858386016116dd565b83526117c560208501611ad0565b60208401526117d660408501611aba565b60408401526117e760608501611ae6565b60608401526117f860808501611ae6565b608084015261180960a08501611ae6565b60a084015261181a60c085016116c7565b60c084015261182b60e085016115bf565b60e08401526101009150611840828501611ae6565b828401526101209150611854828501611ae6565b828401526101409150611868828501611ae6565b82840152610160915061187c828501611ae6565b8284015261018091506118908285016115bf565b828401526101a091506118a48285016115bf565b828401526101c0915081840135818111156118be57600080fd5b6118ca868287016115d5565b8385015250505092915050565b60006101e08083850312156118ea578182fd5b6118f3816123cc565b915050815167ffffffffffffffff8082111561190e57600080fd5b61191a85838601611729565b835261192860208501611adb565b602084015261193960408501611ac5565b604084015261194a60608501611af1565b606084015261195b60808501611af1565b608084015261196c60a08501611af1565b60a084015261197d60c085016116d2565b60c084015261198e60e085016115ca565b60e084015261010091506119a3828501611af1565b8284015261012091506119b7828501611af1565b8284015261014091506119cb828501611af1565b8284015261016091506119df828501611af1565b8284015261018091506119f38285016115ca565b828401526101a09150611a078285016115ca565b828401526101c091508184015181811115611a2157600080fd5b6118ca8682870161164a565b600060608284031215611a3e578081fd5b6040516060810181811067ffffffffffffffff82111715611a5b57fe5b806040525080915082516fffffffffffffffffffffffffffffffff81168114611a8357600080fd5b8152602083015161ffff81168114611a9a57600080fd5b60208201526040830151611aad816124a3565b6040919091015292915050565b803561027c816124cf565b805161027c816124cf565b803561027c816124e0565b805161027c816124e0565b803561027c816124f3565b805161027c816124f3565b600080600060408486031215611b10578283fd5b8335611b1b8161247e565b9250602084013567ffffffffffffffff80821115611b37578384fd5b818601915086601f830112611b4a578384fd5b813581811115611b58578485fd5b8760208083028501011115611b6b578485fd5b6020830194508093505050509250925092565b60008060408385031215611b90578182fd5b8235611b9b8161247e565b946020939093013593505050565b60006020808385031215611bbb578182fd5b825167ffffffffffffffff811115611bd1578283fd5b8301601f81018513611be1578283fd5b8051611bef6115f5826123f0565b8181528381019083850185840285018601891015611c0b578687fd5b8694505b83851015611c2d578051835260019490940193918501918501611c0f565b50979650505050505050565b600060208284031215611c4a578081fd5b5051919050565b60008060408385031215611c63578182fd5b823591506020830135611c75816124a3565b809150509250929050565b600060208284031215611c91578081fd5b813567ffffffffffffffff811115611ca7578182fd5b61176c84828501611774565b600060208284031215611cc4578081fd5b815167ffffffffffffffff811115611cda578182fd5b61176c848285016118d7565b600080600083850360a0811215611cfb578182fd5b843567ffffffffffffffff80821115611d12578384fd5b611d1e88838901611774565b955060208701359150611d30826124a3565b81945060607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc084011215611d62578384fd5b60405192506060830191508282108183111715611d7b57fe5b506040908152850135611d8d816124f3565b8152606085013560208201526080909401356040850152509093909250565b600060208284031215611dbd578081fd5b815167ffffffffffffffff80821115611dd4578283fd5b9083019060e08286031215611de7578283fd5b60405160a081018181108382111715611dfc57fe5b604052825182811115611e0d578485fd5b611e19878286016118d7565b825250611e298660208501611a2d565b602082015260808301516040820152611e4460a084016116b8565b6060820152611e5560c084016116ad565b608082015295945050505050565b600060208284031215611e74578081fd5b813561058b816124e0565b600060208284031215611e90578081fd5b815161058b816124f3565b73ffffffffffffffffffffffffffffffffffffffff169052565b6000815180845260208085019450808401835b83811015611ee7578151600f0b87529582019590820190600101611ec8565b509495945050505050565b6000815180845260208085019450808401835b83811015611ee757815187529582019590820190600101611f05565b15159052565b60000b9052565b60008151808452611f4681602086016020860161244e565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60006101e08251818552611f8e82860182611f2e565b9150506020830151611fa3602086018261213f565b506040830151611fb66040860182612136565b506060830151611fc9606086018261214a565b506080830151611fdc608086018261214a565b5060a0830151611fef60a086018261214a565b5060c083015161200260c0860182611f27565b5060e083015161201560e0860182611e9b565b50610100808401516120298287018261214a565b50506101208084015161203e8287018261214a565b5050610140808401516120538287018261214a565b5050610160808401516120688287018261214a565b50506101808084015161207d82870182611e9b565b50506101a08084015161209282870182611e9b565b50506101c080840151858303828701526120ac8382611eb5565b9695505050505050565b6000815160e084526120cb60e0850182611f78565b905060208301516fffffffffffffffffffffffffffffffff815116602086015261ffff6020820151166040860152604081015115156060860152506040830151608085015260608301516003811061211f57fe5b60a0850152608083015161064460c0860182611f21565b62ffffff169052565b64ffffffffff169052565b60ff169052565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b6000602080830181845280855180835260408601915060408482028701019250838701855b828110156121e8577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08886030184526121d68583516120b6565b9450928501929085019060010161219c565b5092979650505050505050565b60006020825261058b6020830184611ef2565b6000604080835261221b81840186611ef2565b838103602085810191909152855180835286820192820190855b81811015612270578451805173ffffffffffffffffffffffffffffffffffffffff168452840151848401529383019391850191600101612235565b509098975050505050505050565b901515815260200190565b90815260200190565b600085825264ffffffffff8086166020840152808516604084015250608060608301526120ac6080830184611f2e565b60208082526022908201527f4f6e6c79206f776e65722063616e2063616c6c20746869732066756e6374696f60408201527f6e2e000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526015908201527f7265676973746572206e6f7420706f737369626c650000000000000000000000604082015260600190565b600060a0825261236960a0830186611f78565b9050831515602083015260ff83511660408301526020830151606083015260408301516080830152949350505050565b60006020825261058b60208301846120b6565b64ffffffffff91909116815260200190565b60ff91909116815260200190565b60405181810167ffffffffffffffff811182821017156123e857fe5b604052919050565b600067ffffffffffffffff82111561240457fe5b5060209081020190565b600067ffffffffffffffff82111561242257fe5b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60005b83811015612469578181015183820152602001612451565b83811115612478576000848401525b50505050565b73ffffffffffffffffffffffffffffffffffffffff811681146124a057600080fd5b50565b80151581146124a057600080fd5b80600f0b81146124a057600080fd5b8060000b81146124a057600080fd5b62ffffff811681146124a057600080fd5b64ffffffffff811681146124a057600080fd5b60ff811681146124a057600080fdfe000000000000000000fa7d000000003b53800000000a8c0000000001fa40000000001c20000000000000a26469706673582212207feb23e0883d9522dd865fe95f12d4076e5ae855caed8aafc5a32a2401299fa164736f6c63430007060033",
				"sourceMap": "1738:13207:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8294:251;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5647:1515;;;:::i;:::-;;;;;;;;:::i;9992:692::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;7615:673::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;14316:627::-;;;;;;:::i;:::-;;:::i;:::-;;13701:174;;;;;;:::i;:::-;;:::i;4309:1332::-;;;:::i;:::-;;;;;;;:::i;10690:530::-;;;;;;:::i;:::-;;:::i;8717:1055::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;7168:441::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;8294:251::-;8481:18;;:57;;;;;8444:14;;8481:18;;;:37;;:57;;8519:18;;8481:57;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;8474:64;;8294:251;;;;:::o;5647:1515::-;5826:50;;;5845:29;5826:50;;;;;;;;;5730:29;;;;5826:50;;;;;;;;;;;-1:-1:-1;;5811:65:2;-1:-1:-1;2273:66:2;5811:65;5908:51;5887:74;;;;;;;;;;;;;;;;;:84;6058:5;;;;;;5981:12;;:58;;;;;;;;;;;;;;;;;:84;2714:3;6075:12;6096:55;6075:78;;;;;;;;;;;;;;;;;:103;2777:2;6188:12;6209:50;6188:73;;;;;;;;;;;;;;;;;:94;2839:2;6292:12;6313:50;6292:73;;;;;;;;;;;;;;;;;:94;2906:1;6396:12;2906:1;6396:79;;;;;;;;;;;;;;;;;:105;2965:3;6511:12;6532:48;6511:71;;;;;;;;;;;;;;;;;:99;6642:19;;;6688:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;-1:-1:-1;6748:15:2;;6671:45;;-1:-1:-1;6748:15:2;;6727:18;6794:314;6813:10;6807:3;:16;6794:314;;;6869:125;;;;;;;;;;;;;;-1:-1:-1;6945:28:2;;;:16;6869:125;6945:28;;;;;;:34;6869:125;;;;;;;6847:19;;:14;;6862:3;;6847:19;;;;;;;;;;;;;;;;:147;;;;7060:28;;;;;;;;:16;:28;;;;;;:37;;;;;;;;;6826:5;6794:314;;;7118:37;;;5647:1515;;:::o;9992:692::-;10291:18;10334:34;10353:14;10334:18;:34::i;:::-;10325:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;10417:18;;:116;;;;;:18;;;;;:31;;:116;;10462:14;;10490:10;;10514:9;;10417:116;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;10404:129;;10543:107;10578:14;10606:10;10630;10543:20;:107::i;:::-;9992:692;;;;;:::o;7615:673::-;7921:49;8035:10;8003:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;7986:67;;8063:11;8085:166;8099:23;;;8085:166;;;8168:72;8194:4;8200:11;:28;8212:10;;8223:3;8212:15;;;;;;;;;;;;;8200:28;;;;;;;;;;;:39;;;8168:25;:72::i;:::-;8146:14;8161:3;8146:19;;;;;;;;;;;;;;;;;:94;8125:5;;8085:166;;;8260:21;7615:673;;;;;:::o;14316:627::-;3573:5;;;;3559:10;:19;3551:66;;;;;;;;;;;;:::i;:::-;14444:28:::1;::::0;::::1;;::::0;;;:16:::1;:28;::::0;;;;:35:::1;;::::0;;;::::1;;;14440:160;;;14527:28;::::0;::::1;;::::0;;;:16:::1;:28;::::0;;;;:42;;;14583:7:::1;;14440:160;14677:15;::::0;;14733:110:::1;::::0;;::::1;::::0;::::1;::::0;;;;;14677:15:::1;::::0;;::::1;14733:110;::::0;;::::1;::::0;;;14677:15;14733:110;;;;;;14702:28;;::::1;14659:15;14702:28:::0;;;:16:::1;:28:::0;;;;;;;:141;;;;;;;;::::1;::::0;;;;::::1;;::::0;::::1;::::0;;;;::::1;::::0;;;::::1;;::::0;;;::::1;::::0;;;::::1;::::0;;;14853:28;;;;::::1;;::::0;;;14913:19:::1;::::0;;:23;;::::1;14891:45:::0;;3627:1:::1;14316:627:::0;;:::o;13701:174::-;3573:5;;;;3559:10;:19;3551:66;;;;;;;;;;;;:::i;:::-;13831:24:::1;::::0;;;:12:::1;:24;::::0;;;;;:37;;;::::1;::::0;::::1;;::::0;;;::::1;::::0;;13701:174::o;4309:1332::-;4402:35;4453:27;4483:18;;;;;;;;;;;:34;;;:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4453:66;-1:-1:-1;4619:51:2;4544:10;4563:43;4544:64;;;;;;;;;;;;;;;;;:127;2273:66;4685:10;4704:51;4685:72;;;;;;;;;;;;;;;;;:82;4987:18;;;;4885:10;4904:54;4885:75;;;;;;;;;;;;;;;;;:123;5116:11;;5042:10;5061:50;5042:71;;;;;;;;;;;;;;;;;:85;5581:15;;5511:10;5530:46;5511:67;;;;;;;;;;;;;;;;;:85;5624:10;-1:-1:-1;4309:1332:2;:::o;10690:530::-;10857:18;;:60;;;;;10803:51;;10857:18;;;:48;;:60;;10906:10;;10857:60;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;10803:114;;10978:14;:33;;;:38;;11015:1;10978:38;;10971:46;;;;11037:34;11056:14;11037:18;:34::i;:::-;11028:69;;;;;;;;;;;;:::i;:::-;11107:106;11141:14;11169:10;11193;11107:20;:106::i;:::-;10690:530;;;:::o;8717:1055::-;8928:5;;8858:21;;8928:5;;8914:10;:19;8910:106;;;-1:-1:-1;8997:4:2;8990:11;;8910:106;9069:25;;;;9052:43;;;;;;:16;:43;;;;;:49;9030:156;;-1:-1:-1;9166:5:2;9159:12;;9030:156;2714:3;9263:136;9362:14;:35;;;9354:44;;9263:86;9317:14;:30;;;9309:39;;9272:14;:30;;;9264:39;;9263:45;;:86;;;;:::i;:::-;:90;;:136::i;:::-;:162;;9262:234;;;;;2777:2;9443:14;:30;;;:52;;;;9262:234;:304;;;;;2839:2;9513:14;:30;;;:52;;;;9262:304;:384;;;;;2906:1;9583:14;:35;;;:62;;;;9262:384;:435;;;;-1:-1:-1;9691:5:2;;9663:24;;;;9691:5;9663:33;;;9691:5;;9663:33;9262:435;9245:498;;;-1:-1:-1;9728:4:2;9721:11;;9245:498;-1:-1:-1;9760:5:2;8717:1055;;;:::o;7168:441::-;7379:43;;:::i;:::-;7451:18;;:62;;;;;:18;;;;;:44;;:62;;7496:4;;7502:10;;7451:62;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7578:24;;;;:12;:24;;;;;;;;;7554:48;;:21;;;:48;-1:-1:-1;7438:75:2;7168:441;-1:-1:-1;7168:441:2:o;11226:2469::-;11408:22;11433:49;11467:14;11433:33;:49::i;:::-;11493:29;11525:27;;;:11;:27;;;;;11567:21;;11408:74;;-1:-1:-1;11525:27:2;11563:1842;;11684:5;;11644:15;;11684:5;;11670:10;:19;11669:61;;11696:15;2965:3;11696:34;11669:61;;;11692:1;11669:61;11775:201;;;;;;;;;;;11878:30;;;;11775:201;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;11745:27:2;;;:11;:27;;;;;;;:231;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;11745:231:2;;;;;;;;12009:5;11775:201;;-1:-1:-1;12009:5:2;;11995:10;:19;11991:95;;;12034:24;;;;:12;:24;;;;;:37;;;;;;;;;;11991:95;12100:26;12179:14;:29;;;12211:1;12179:33;12129:84;;12143:14;:29;;;12135:38;;12130:1;:43;;12129:84;;12100:113;;12249:18;12231:15;;:36;12271:1;12231:41;12227:134;;;12310:15;;;:36;;12292:54;;12227:134;12428:21;;;;12375:34;;12458:57;12428:88;:93;12423:406;;-1:-1:-1;12609:29:2;;;;12423:406;;;12746:68;12780:14;:33;;;12746;:68::i;:::-;12715:99;;12423:406;13256:14;:29;;;12930:444;;13209:14;:29;;;12930:444;;13112:28;13011:129;;13107:1;13047:55;13073:28;13047:55;;:25;:55::i;:::-;13013:89;;:14;:33;;;:89;;;;;;;;13012:96;;;;13011:129;12930:444;;;12966:14;13158;:33;;;13303:8;13329:14;:31;;;12930:444;;;;;;;;;:::i;:::-;;;;;;;;13388:7;;;;;;;11563:1842;13465:26;;;;13432:30;;;;13465:26;;;;13432:59;;;13431:116;;;;-1:-1:-1;13527:19:2;;;;;;;;;13509:15;:37;13431:116;13414:275;;;13571:34;;;13648:30;;;;13619:26;;;:59;;;;;;;;;;;;;;13414:275;11226:2469;;;;;:::o;875:176:7:-;933:7;964:5;;;987:6;;;;979:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8752:1331:1;8880:22;9059:17;9150:14;:31;;;9133:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9123:60;;;;;;9223:14;:33;;;9312:14;:30;;;9380:14;:21;;;9415:14;:29;;;9459:14;:26;;;9556:14;:21;;;9642:14;:29;;;9686:14;:25;;;9093:628;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9086:635;;9853:58;9847:65;;;;;;;;9823:14;:21;;;:89;:94;;9916:1;9823:94;9818:226;;;9975:4;9997:14;:22;;;9941:92;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;9941:92:1;;;;-1:-1:-1;9941:92:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9934:99;;9818:226;10060:15;;;;;;;;8752:1331;-1:-1:-1;;8752:1331:1:o;5019:1240::-;5136:14;;;5229:57;:27;;;5269:15;5229:31;:57::i;:::-;5196:90;;5355:18;5330:22;:43;5322:77;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5438:17;5413:22;:42;5409:811;;;5505:39;5499:46;5482:63;;5409:811;;;5589:16;5564:22;:41;5560:660;;;5654:40;5648:47;;5560:660;5739:12;5714:22;:37;5710:510;;;5802:39;5796:46;;5710:510;5886:11;5861:22;:36;5857:363;;;5947:38;5941:45;;5857:363;6030:7;6005:22;:32;6001:219;;;6086:39;6080:46;;6001:219;6176:43;6153:67;;6001:219;-1:-1:-1;6238:14:1;5019:1240;-1:-1:-1;;5019:1240:1:o;4541:375::-;4656:6;4678:18;4699:13;;;;;;;;;;;;;;;;;4764:1;4737:28;;4310:1;4736:52;4858:18;4852:25;;-1:-1:-1;;4541:375:1;;;:::o;1322:134:7:-;1380:7;1406:43;1410:1;1413;1406:43;;;;;;;;;;;;;;;;;1833:7;1868:12;1860:6;;;;1852:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1903:5:7;;;1747:187::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;14:138:11:-;84:20;;113:33;84:20;113:33;:::i;157:142::-;238:13;;260:33;238:13;260:33;:::i;304:779::-;;416:3;409:4;401:6;397:17;393:27;383:2;;438:5;431;424:20;383:2;478:6;465:20;504:4;528:64;543:48;588:2;543:48;:::i;:::-;528:64;:::i;:::-;626:15;;;657:12;;;;689:15;;;735:11;;;723:24;;719:33;;716:42;-1:-1:-1;713:2:11;;;775:5;768;761:20;713:2;801:5;815:239;829:2;826:1;823:9;815:239;;;900:3;887:17;917:32;943:5;917:32;:::i;:::-;962:18;;1000:12;;;;1032;;;;847:1;840:9;815:239;;;-1:-1:-1;1072:5:11;;373:710;-1:-1:-1;;;;;;;373:710:11:o;1088:776::-;;1211:3;1204:4;1196:6;1192:17;1188:27;1178:2;;1233:5;1226;1219:20;1178:2;1266:6;1260:13;1292:4;1316:64;1331:48;1376:2;1331:48;:::i;1316:64::-;1414:15;;;1445:12;;;;1477:15;;;1523:11;;;1511:24;;1507:33;;1504:42;-1:-1:-1;1501:2:11;;;1563:5;1556;1549:20;1501:2;1589:5;1603:232;1617:2;1614:1;1611:9;1603:232;;;1681:3;1675:10;1698:32;1724:5;1698:32;:::i;:::-;1743:18;;1781:12;;;;1813;;;;1635:1;1628:9;1603:232;;1869:136;1947:13;;1969:30;1947:13;1969:30;:::i;2010:157::-;2099:13;;2141:1;2131:12;;2121:2;;2157:1;2154;2147:12;2172:132;2239:20;;2268:30;2239:20;2268:30;:::i;2309:136::-;2387:13;;2409:30;2387:13;2409:30;:::i;2450:487::-;;2548:3;2541:4;2533:6;2529:17;2525:27;2515:2;;2570:5;2563;2556:20;2515:2;2610:6;2597:20;2641:50;2656:34;2687:2;2656:34;:::i;2641:50::-;2716:2;2707:7;2700:19;2762:3;2755:4;2750:2;2742:6;2738:15;2734:26;2731:35;2728:2;;;2783:5;2776;2769:20;2728:2;2852;2845:4;2837:6;2833:17;2826:4;2817:7;2813:18;2800:55;2875:16;;;2893:4;2871:27;2864:42;;;;2879:7;2505:432;-1:-1:-1;;2505:432:11:o;2942:449::-;;3051:3;3044:4;3036:6;3032:17;3028:27;3018:2;;3073:5;3066;3059:20;3018:2;3106:6;3100:13;3137:50;3152:34;3183:2;3152:34;:::i;3137:50::-;3212:2;3203:7;3196:19;3258:3;3251:4;3246:2;3238:6;3234:15;3230:26;3227:35;3224:2;;;3279:5;3272;3265:20;3224:2;3296:64;3357:2;3350:4;3341:7;3337:18;3330:4;3322:6;3318:17;3296:64;:::i;:::-;3378:7;3008:383;-1:-1:-1;;;;3008:383:11:o;3396:1696::-;;3490:6;3533:2;3521:9;3516:3;3512:19;3508:28;3505:2;;;3553:5;3546;3539:20;3505:2;3579:18;3594:2;3579:18;:::i;:::-;3570:27;;;3633:9;3620:23;3662:18;3703:2;3695:6;3692:14;3689:2;;;3719:1;3716;3709:12;3689:2;3746:48;3790:3;3781:6;3770:9;3766:22;3746:48;:::i;:::-;3739:5;3732:63;3827:39;3862:2;3851:9;3847:18;3827:39;:::i;:::-;3822:2;3815:5;3811:14;3804:63;3899:39;3934:2;3923:9;3919:18;3899:39;:::i;:::-;3894:2;3887:5;3883:14;3876:63;3971:38;4005:2;3994:9;3990:18;3971:38;:::i;:::-;3966:2;3959:5;3955:14;3948:62;4043:39;4077:3;4066:9;4062:19;4043:39;:::i;:::-;4037:3;4030:5;4026:15;4019:64;4116:39;4150:3;4139:9;4135:19;4116:39;:::i;:::-;4110:3;4103:5;4099:15;4092:64;4189:38;4222:3;4211:9;4207:19;4189:38;:::i;:::-;4183:3;4176:5;4172:15;4165:63;4261:41;4297:3;4286:9;4282:19;4261:41;:::i;:::-;4255:3;4248:5;4244:15;4237:66;4322:3;4312:13;;4357:38;4391:2;4380:9;4376:18;4357:38;:::i;:::-;4352:2;4345:5;4341:14;4334:62;4415:3;4405:13;;4450:38;4484:2;4473:9;4469:18;4450:38;:::i;:::-;4445:2;4438:5;4434:14;4427:62;4508:3;4498:13;;4543:38;4577:2;4566:9;4562:18;4543:38;:::i;:::-;4538:2;4531:5;4527:14;4520:62;4601:3;4591:13;;4636:38;4670:2;4659:9;4655:18;4636:38;:::i;:::-;4631:2;4624:5;4620:14;4613:62;4694:3;4684:13;;4729:40;4765:2;4754:9;4750:18;4729:40;:::i;:::-;4724:2;4717:5;4713:14;4706:64;4789:3;4779:13;;4824:40;4860:2;4849:9;4845:18;4824:40;:::i;:::-;4819:2;4812:5;4808:14;4801:64;4884:3;4874:13;;4940:2;4929:9;4925:18;4912:32;4969:2;4959:8;4956:16;4953:2;;;4985:1;4982;4975:12;4953:2;5021:64;5081:3;5070:8;5059:9;5055:24;5021:64;:::i;:::-;5016:2;5009:5;5005:14;4998:88;;;;3470:1622;;;;:::o;5097:1858::-;;5202:6;5245:2;5233:9;5228:3;5224:19;5220:28;5217:2;;;5265:5;5258;5251:20;5217:2;5291:18;5306:2;5291:18;:::i;:::-;5282:27;;;5338:9;5332:16;5367:18;5408:2;5400:6;5397:14;5394:2;;;5424:1;5421;5414:12;5394:2;5451:59;5506:3;5497:6;5486:9;5482:22;5451:59;:::i;:::-;5444:5;5437:74;5543:50;5589:2;5578:9;5574:18;5543:50;:::i;:::-;5538:2;5531:5;5527:14;5520:74;5626:50;5672:2;5661:9;5657:18;5626:50;:::i;:::-;5621:2;5614:5;5610:14;5603:74;5709:49;5754:2;5743:9;5739:18;5709:49;:::i;:::-;5704:2;5697:5;5693:14;5686:73;5792:50;5837:3;5826:9;5822:19;5792:50;:::i;:::-;5786:3;5779:5;5775:15;5768:75;5876:50;5921:3;5910:9;5906:19;5876:50;:::i;:::-;5870:3;5863:5;5859:15;5852:75;5960:49;6004:3;5993:9;5989:19;5960:49;:::i;:::-;5954:3;5947:5;5943:15;5936:74;6043:52;6090:3;6079:9;6075:19;6043:52;:::i;:::-;6037:3;6030:5;6026:15;6019:77;6115:3;6105:13;;6150:49;6195:2;6184:9;6180:18;6150:49;:::i;:::-;6145:2;6138:5;6134:14;6127:73;6219:3;6209:13;;6254:49;6299:2;6288:9;6284:18;6254:49;:::i;:::-;6249:2;6242:5;6238:14;6231:73;6323:3;6313:13;;6358:49;6403:2;6392:9;6388:18;6358:49;:::i;:::-;6353:2;6346:5;6342:14;6335:73;6427:3;6417:13;;6462:49;6507:2;6496:9;6492:18;6462:49;:::i;:::-;6457:2;6450:5;6446:14;6439:73;6531:3;6521:13;;6566:51;6613:2;6602:9;6598:18;6566:51;:::i;:::-;6561:2;6554:5;6550:14;6543:75;6637:3;6627:13;;6672:51;6719:2;6708:9;6704:18;6672:51;:::i;:::-;6667:2;6660:5;6656:14;6649:75;6743:3;6733:13;;6792:2;6781:9;6777:18;6771:25;6821:2;6811:8;6808:16;6805:2;;;6837:1;6834;6827:12;6805:2;6873:75;6944:3;6933:8;6922:9;6918:24;6873:75;:::i;6960:836::-;;7080:4;7068:9;7063:3;7059:19;7055:30;7052:2;;;7102:5;7095;7088:20;7052:2;7139;7133:9;7181:4;7173:6;7169:17;7252:6;7240:10;7237:22;7216:18;7204:10;7201:34;7198:62;7195:2;;;7263:9;7195:2;7294:10;7290:2;7283:22;;7323:6;7314:15;;7359:9;7353:16;7413:34;7404:7;7400:48;7391:7;7388:61;7378:2;;7463:1;7460;7453:12;7378:2;7476:23;;7544:2;7529:18;;7523:25;7592:6;7579:20;;7567:33;;7557:2;;7614:1;7611;7604:12;7557:2;7646;7634:15;;7627:32;7704:2;7689:18;;7683:25;7717:32;7683:25;7717:32;:::i;:::-;7777:2;7765:15;;;;7758:32;7042:754;;-1:-1:-1;;7042:754:11:o;7801:136::-;7870:20;;7899:32;7870:20;7899:32;:::i;7942:140::-;8022:13;;8044:32;8022:13;8044:32;:::i;8087:136::-;8156:20;;8185:32;8156:20;8185:32;:::i;8228:140::-;8308:13;;8330:32;8308:13;8330:32;:::i;8373:134::-;8441:20;;8470:31;8441:20;8470:31;:::i;8512:138::-;8591:13;;8613:31;8591:13;8613:31;:::i;8655:803::-;;;;8819:2;8807:9;8798:7;8794:23;8790:32;8787:2;;;8840:6;8832;8825:22;8787:2;8884:9;8871:23;8903:33;8930:5;8903:33;:::i;:::-;8955:5;-1:-1:-1;9011:2:11;8996:18;;8983:32;9034:18;9064:14;;;9061:2;;;9096:6;9088;9081:22;9061:2;9139:6;9128:9;9124:22;9114:32;;9184:7;9177:4;9173:2;9169:13;9165:27;9155:2;;9211:6;9203;9196:22;9155:2;9256;9243:16;9282:2;9274:6;9271:14;9268:2;;;9303:6;9295;9288:22;9268:2;9362:7;9357:2;9351;9343:6;9339:15;9335:2;9331:24;9327:33;9324:46;9321:2;;;9388:6;9380;9373:22;9321:2;9424;9420;9416:11;9406:21;;9446:6;9436:16;;;;;8777:681;;;;;:::o;9463:327::-;;;9592:2;9580:9;9571:7;9567:23;9563:32;9560:2;;;9613:6;9605;9598:22;9560:2;9657:9;9644:23;9676:33;9703:5;9676:33;:::i;:::-;9728:5;9780:2;9765:18;;;;9752:32;;-1:-1:-1;;;9550:240:11:o;10127:942::-;;10253:2;10296;10284:9;10275:7;10271:23;10267:32;10264:2;;;10317:6;10309;10302:22;10264:2;10355:9;10349:16;10388:18;10380:6;10377:30;10374:2;;;10425:6;10417;10410:22;10374:2;10453:22;;10506:4;10498:13;;10494:27;-1:-1:-1;10484:2:11;;10540:6;10532;10525:22;10484:2;10574;10568:9;10597:64;10612:48;10657:2;10612:48;:::i;10597:64::-;10695:15;;;10726:12;;;;10758:11;;;10796;;;10788:20;;10784:29;;10781:42;-1:-1:-1;10778:2:11;;;10841:6;10833;10826:22;10778:2;10868:6;10859:15;;10883:156;10897:2;10894:1;10891:9;10883:156;;;10954:10;;10942:23;;10915:1;10908:9;;;;;10985:12;;;;11017;;10883:156;;;-1:-1:-1;11058:5:11;10233:836;-1:-1:-1;;;;;;;10233:836:11:o;11074:194::-;;11197:2;11185:9;11176:7;11172:23;11168:32;11165:2;;;11218:6;11210;11203:22;11165:2;-1:-1:-1;11246:16:11;;11155:113;-1:-1:-1;11155:113:11:o;11273:321::-;;;11399:2;11387:9;11378:7;11374:23;11370:32;11367:2;;;11420:6;11412;11405:22;11367:2;11461:9;11448:23;11438:33;;11521:2;11510:9;11506:18;11493:32;11534:30;11558:5;11534:30;:::i;:::-;11583:5;11573:15;;;11357:237;;;;;:::o;11599:381::-;;11742:2;11730:9;11721:7;11717:23;11713:32;11710:2;;;11763:6;11755;11748:22;11710:2;11808:9;11795:23;11841:18;11833:6;11830:30;11827:2;;;11878:6;11870;11863:22;11827:2;11906:68;11966:7;11957:6;11946:9;11942:22;11906:68;:::i;11985:396::-;;12139:2;12127:9;12118:7;12114:23;12110:32;12107:2;;;12160:6;12152;12145:22;12107:2;12198:9;12192:16;12231:18;12223:6;12220:30;12217:2;;;12268:6;12260;12253:22;12217:2;12296:79;12367:7;12358:6;12347:9;12343:22;12296:79;:::i;12386:1193::-;;;;12578:9;12569:7;12565:23;12608:3;12604:2;12600:12;12597:2;;;12630:6;12622;12615:22;12597:2;12675:9;12662:23;12704:18;12745:2;12737:6;12734:14;12731:2;;;12766:6;12758;12751:22;12731:2;12794:68;12854:7;12845:6;12834:9;12830:22;12794:68;:::i;:::-;12784:78;;12912:2;12901:9;12897:18;12884:32;12871:45;;12925:30;12949:5;12925:30;:::i;:::-;12974:5;12964:15;;13072:4;13003:66;12999:2;12995:75;12991:86;12988:2;;;13095:6;13087;13080:22;12988:2;13133;13127:9;13113:23;;13175:4;13167:6;13163:17;13145:35;;13230:6;13218:10;13215:22;13210:2;13198:10;13195:18;13192:46;13189:2;;;13241:9;13189:2;-1:-1:-1;13268:2:11;13261:22;;;13320:18;;13307:32;13348:33;13307:32;13348:33;:::i;:::-;13390:23;;13474:4;13459:20;;13446:34;13441:2;13429:15;;13422:59;13542:3;13527:19;;;13514:33;13509:2;13497:15;;13490:58;-1:-1:-1;12545:1034:11;;;;-1:-1:-1;12545:1034:11:o;13584:1133::-;;13734:2;13722:9;13713:7;13709:23;13705:32;13702:2;;;13755:6;13747;13740:22;13702:2;13793:9;13787:16;13822:18;13863:2;13855:6;13852:14;13849:2;;;13884:6;13876;13869:22;13849:2;13912:22;;;;13968:4;13950:16;;;13946:27;13943:2;;;13991:6;13983;13976:22;13943:2;14029;14023:9;14071:4;14063:6;14059:17;14126:6;14114:10;14111:22;14106:2;14094:10;14091:18;14088:46;14085:2;;;14137:9;14085:2;14164;14157:22;14204:9;;14225:16;;;14222:2;;;14259:6;14251;14244:22;14222:2;14292:74;14358:7;14347:8;14343:2;14339:17;14292:74;:::i;:::-;14284:6;14277:90;;14400:65;14457:7;14452:2;14448;14444:11;14400:65;:::i;:::-;14395:2;14387:6;14383:15;14376:90;14513:3;14509:2;14505:12;14499:19;14494:2;14486:6;14482:15;14475:44;14554:54;14602:4;14598:2;14594:13;14554:54;:::i;:::-;14547:4;14539:6;14535:17;14528:81;14643:42;14680:3;14676:2;14672:12;14643:42;:::i;:::-;14637:3;14625:16;;14618:68;14629:6;13692:1025;-1:-1:-1;;;;;13692:1025:11:o;14722:257::-;;14833:2;14821:9;14812:7;14808:23;14804:32;14801:2;;;14854:6;14846;14839:22;14801:2;14898:9;14885:23;14917:32;14943:5;14917:32;:::i;14984:259::-;;15105:2;15093:9;15084:7;15080:23;15076:32;15073:2;;;15126:6;15118;15111:22;15073:2;15163:9;15157:16;15182:31;15207:5;15182:31;:::i;15248:129::-;15327:42;15316:54;15304:67;;15294:83::o;15382:458::-;;15478:5;15472:12;15505:6;15500:3;15493:19;15531:4;15560:2;15555:3;15551:12;15544:19;;15597:2;15590:5;15586:14;15618:3;15630:185;15644:6;15641:1;15638:13;15630:185;;;15720:13;;15716:2;15705:29;15693:42;;15755:12;;;;15790:15;;;;15666:1;15659:9;15630:185;;;-1:-1:-1;15831:3:11;;15448:392;-1:-1:-1;;;;;15448:392:11:o;15845:443::-;;15942:5;15936:12;15969:6;15964:3;15957:19;15995:4;16024:2;16019:3;16015:12;16008:19;;16061:2;16054:5;16050:14;16082:3;16094:169;16108:6;16105:1;16102:13;16094:169;;;16169:13;;16157:26;;16203:12;;;;16238:15;;;;16130:1;16123:9;16094:169;;16293:93;16365:13;16358:21;16346:34;;16336:50::o;16391:92::-;16467:1;16456:20;16444:33;;16434:49::o;16488:319::-;;16570:5;16564:12;16597:6;16592:3;16585:19;16613:63;16669:6;16662:4;16657:3;16653:14;16646:4;16639:5;16635:16;16613:63;:::i;:::-;16721:2;16709:15;16726:66;16705:88;16696:98;;;;16796:4;16692:109;;16540:267;-1:-1:-1;;16540:267:11:o;16812:2038::-;;16900:6;16941:5;16935:12;16968:2;16963:3;16956:15;16992:47;17035:2;17030:3;17026:12;17012;16992:47;:::i;:::-;16980:59;;;17087:4;17080:5;17076:16;17070:23;17102:51;17147:4;17142:3;17138:14;17122;17102:51;:::i;:::-;;17201:4;17194:5;17190:16;17184:23;17216:51;17261:4;17256:3;17252:14;17236;17216:51;:::i;:::-;;17315:4;17308:5;17304:16;17298:23;17330:50;17374:4;17369:3;17365:14;17349;17330:50;:::i;:::-;;17428:4;17421:5;17417:16;17411:23;17443:50;17487:4;17482:3;17478:14;17462;17443:50;:::i;:::-;;17541:4;17534:5;17530:16;17524:23;17556:50;17600:4;17595:3;17591:14;17575;17556:50;:::i;:::-;;17654:4;17647:5;17643:16;17637:23;17669:49;17712:4;17707:3;17703:14;17687;17669:49;:::i;:::-;;17766:4;17759:5;17755:16;17749:23;17781:52;17827:4;17822:3;17818:14;17802;17781:52;:::i;:::-;;17852:6;17906:2;17899:5;17895:14;17889:21;17919:48;17963:2;17958:3;17954:12;17938:14;17919:48;:::i;:::-;;;17986:6;18040:2;18033:5;18029:14;18023:21;18053:48;18097:2;18092:3;18088:12;18072:14;18053:48;:::i;:::-;;;18120:6;18175:2;18168:5;18164:14;18158:21;18188:49;18233:2;18228:3;18224:12;18207:15;18188:49;:::i;:::-;;;18256:6;18311:2;18304:5;18300:14;18294:21;18324:49;18369:2;18364:3;18360:12;18343:15;18324:49;:::i;:::-;;;18392:6;18447:2;18440:5;18436:14;18430:21;18460:51;18507:2;18502:3;18498:12;18481:15;18460:51;:::i;:::-;;;18530:6;18585:2;18578:5;18574:14;18568:21;18598:51;18645:2;18640:3;18636:12;18619:15;18598:51;:::i;:::-;;;18668:6;18723:2;18716:5;18712:14;18706:21;18767:3;18761:4;18757:14;18752:2;18747:3;18743:12;18736:36;18788:56;18839:4;18822:15;18788:56;:::i;:::-;18781:63;16880:1970;-1:-1:-1;;;;;;16880:1970:11:o;18855:866::-;;18955:5;18949:12;18982:4;18977:3;18970:17;19008:65;19067:4;19062:3;19058:14;19044:12;19008:65;:::i;:::-;18996:77;;19121:4;19114:5;19110:16;19104:23;19186:34;19169:14;19163:21;19159:62;19152:4;19147:3;19143:14;19136:86;19290:6;19282:4;19266:14;19262:25;19256:32;19252:45;19247:2;19242:3;19238:12;19231:67;19368:2;19352:14;19348:23;19342:30;19335:38;19328:46;19323:2;19318:3;19314:12;19307:68;;19424:2;19417:5;19413:14;19407:21;19400:4;19395:3;19391:14;19384:45;19477:2;19470:5;19466:14;19460:21;19519:1;19503:14;19500:21;19490:2;;19525:9;19490:2;19561:4;19552:14;;19545:38;19631:4;19620:16;;19614:23;19646:49;19689:4;19680:14;;19614:23;19646:49;:::i;19726:94::-;19804:8;19793:20;19781:33;;19771:49::o;19825:98::-;19903:12;19892:24;19880:37;;19870:53::o;19928:77::-;19997:4;19986:16;19974:29;;19972:33::o;20010:297::-;20214:42;20202:55;;;;20184:74;;20289:2;20274:18;;20267:34;20172:2;20157:18;;20139:168::o;20312:914::-;;20537:2;20577;20566:9;20562:18;20607:2;20596:9;20589:21;20630:6;20665;20659:13;20696:6;20688;20681:22;20734:2;20723:9;20719:18;20712:25;;20797:2;20791;20783:6;20779:15;20768:9;20764:31;20760:40;20746:54;;20835:2;20827:6;20823:15;20856:4;20869:328;20883:6;20880:1;20877:13;20869:328;;;20972:66;20960:9;20952:6;20948:22;20944:95;20939:3;20932:108;21063:54;21110:6;21101;21095:13;21063:54;:::i;:::-;21053:64;-1:-1:-1;21175:12:11;;;;21140:15;;;;20905:1;20898:9;20869:328;;;-1:-1:-1;21214:6:11;;20517:709;-1:-1:-1;;;;;;;20517:709:11:o;21231:267::-;;21410:2;21399:9;21392:21;21430:62;21488:2;21477:9;21473:18;21465:6;21430:62;:::i;21503:1022::-;;21806:2;21835;21824:9;21817:21;21861:62;21919:2;21908:9;21904:18;21896:6;21861:62;:::i;:::-;21980:22;;;21942:2;21960:18;;;21953:50;;;;22052:13;;22074:22;;;22150:15;;;;22112;;;22183:4;22196:303;22210:6;22207:1;22204:13;22196:303;;;22269:13;;22311:9;;22322:42;22307:58;22295:71;;22406:11;;22400:18;22386:12;;;22379:40;22474:15;;;;22439:12;;;;22232:1;22225:9;22196:303;;;-1:-1:-1;22516:3:11;;21786:739;-1:-1:-1;;;;;;;;21786:739:11:o;22530:187::-;22695:14;;22688:22;22670:41;;22658:2;22643:18;;22625:92::o;22722:177::-;22868:25;;;22856:2;22841:18;;22823:76::o;22904:482::-;;23133:6;23122:9;23115:25;23159:12;23219:2;23211:6;23207:15;23202:2;23191:9;23187:18;23180:43;23271:2;23263:6;23259:15;23254:2;23243:9;23239:18;23232:43;;23311:3;23306:2;23295:9;23291:18;23284:31;23332:48;23375:3;23364:9;23360:19;23352:6;23332:48;:::i;23391:398::-;23593:2;23575:21;;;23632:2;23612:18;;;23605:30;23671:34;23666:2;23651:18;;23644:62;23742:4;23737:2;23722:18;;23715:32;23779:3;23764:19;;23565:224::o;23794:345::-;23996:2;23978:21;;;24035:2;24015:18;;;24008:30;24074:23;24069:2;24054:18;;24047:51;24130:2;24115:18;;23968:171::o;24144:625::-;;24439:3;24428:9;24421:22;24460:64;24519:3;24508:9;24504:19;24496:6;24460:64;:::i;:::-;24452:72;;24574:6;24567:14;24560:22;24555:2;24544:9;24540:18;24533:50;24638:4;24629:6;24623:13;24619:24;24614:2;24603:9;24599:18;24592:52;24698:2;24690:6;24686:15;24680:22;24675:2;24664:9;24660:18;24653:50;24758:2;24750:6;24746:15;24740:22;24734:3;24723:9;24719:19;24712:51;24411:358;;;;;;:::o;24774:268::-;;24957:2;24946:9;24939:21;24977:59;25032:2;25021:9;25017:18;25009:6;24977:59;:::i;25047:194::-;25221:12;25209:25;;;;25191:44;;25179:2;25164:18;;25146:95::o;25246:184::-;25418:4;25406:17;;;;25388:36;;25376:2;25361:18;;25343:87::o;25435:242::-;25505:2;25499:9;25535:17;;;25582:18;25567:34;;25603:22;;;25564:62;25561:2;;;25629:9;25561:2;25656;25649:22;25479:198;;-1:-1:-1;25479:198:11:o;25682:182::-;;25780:18;25772:6;25769:30;25766:2;;;25802:9;25766:2;-1:-1:-1;25853:4:11;25834:17;;;25830:28;;25756:108::o;25869:241::-;;25953:18;25945:6;25942:30;25939:2;;;25975:9;25939:2;-1:-1:-1;26023:4:11;26011:17;26030:66;26007:90;26099:4;26003:101;;25929:181::o;26115:258::-;26187:1;26197:113;26211:6;26208:1;26205:13;26197:113;;;26287:11;;;26281:18;26268:11;;;26261:39;26233:2;26226:10;26197:113;;;26328:6;26325:1;26322:13;26319:2;;;26363:1;26354:6;26349:3;26345:16;26338:27;26319:2;;26168:205;;;:::o;26378:156::-;26466:42;26459:5;26455:54;26448:5;26445:65;26435:2;;26524:1;26521;26514:12;26435:2;26425:109;:::o;26539:120::-;26627:5;26620:13;26613:21;26606:5;26603:32;26593:2;;26649:1;26646;26639:12;26664:122;26755:5;26751:2;26740:21;26733:5;26730:32;26720:2;;26776:1;26773;26766:12;26791:119;26879:5;26876:1;26865:20;26858:5;26855:31;26845:2;;26900:1;26897;26890:12;26915:121;27002:8;26995:5;26991:20;26984:5;26981:31;26971:2;;27026:1;27023;27016:12;27041:125;27128:12;27121:5;27117:24;27110:5;27107:35;27097:2;;27156:1;27153;27146:12;27171:116;27257:4;27250:5;27246:16;27239:5;27236:27;27226:2;;27277:1;27274;27267:12"
			}
		}
	},
	"sourceTreeHashHex": "0x01a26af3d52d79b973f6e7c048342872effdc289f56cbecd4c783f10f6ebc62c",
	"sources": {
		"./DigiOptionsMarketLister.sol": {
			"id": 2,
			"content": "/*\n freedex-protocol / User Driven Option Markets Contract used by https://www.digioptions.com\n\n Designed to work with signatures from [www.factsigner.com](https://www.factsigner.com)\n\n Public repository:\n https://github.com/berlincode/digioptions-contracts.js\n\n elastic.code@gmail.com\n mail@digioptions.com\n\n SPDX-License-Identifier: MIT\n\n MIT License\n\n Copyright (c) digioptions.com (https://www.digioptions.com)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n*/\n\npragma solidity >=0.7.0;\npragma experimental ABIEncoderV2;\n\nimport \"./DigiOptionsBaseInterface.sol\";\nimport \"./DigiOptionsMarkets.sol\";\nimport \"./DigiOptionsLib.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/math/SignedSafeMath.sol\";\n\n\ncontract DigiOptionsMarketLister is DigiOptionsBaseInterface {\n    using SafeMath for uint256;\n    using SignedSafeMath for int256;\n\n    /*\n        we use a simple linked list - since the SignerListEntry is part of a map\n        the value remains directly accessible by the signer's address\n    */\n    struct SignerListEntry {\n        uint256 value;\n        address addrNext;\n        bool exists;\n    }\n\n    struct SignerData {\n        address signerAddr;\n        uint256 value;\n    }\n\n    uint256 constant private VERSION = (\n        (0 << 32) + /* major */\n        (53 << 16) + /* minor */\n        0 /* bugfix */\n    );\n\n    /* constants which are set during construction */\n    uint256 private blockNumber;\n    address private owner;\n    DigiOptionsMarkets private digiOptionsMarkets;\n\n    uint256 private existingMarkets; /* one bit for each marketCategory and marketInterval */\n\n    /* control variables/constants */\n    uint256 constant private transactionFeeTotalMax = 100; // 1.0%\n    uint256 constant private transactionFee0Min = 10; // 0.1%\n    uint256 constant private transactionFee1Min = 10; // 0.1%\n    uint256 constant private transactionFeeSignerMin = 5; // 0.05%\n    uint16 constant private openDelaySeconds = 600;\n\n    address internal signerAddrFirst; /* the first signer (if exists) */\n    mapping(address => SignerListEntry) private signerEntriesMap; // stores which signing addresses are allowed to register\n    uint256 private signerMapNumEntries = 0;\n\n    /* variables */\n    struct MarketBest {\n        bytes32 marketHash;\n        uint8 transactionFee0;\n        uint40 openTime;\n    }\n    mapping(bytes32 => MarketBest) internal marketsBest; // mapping from baseMarketHash\n    mapping(bytes32 => bool) internal isTestMarket; // mapping from marketHash\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Only owner can call this function.\");\n        _;\n    }\n\n    event MarketCreateLister(\n        bytes32 marketKey, /* marketsContract stores marketHash ; marketListerContract stores baseMarketHash */\n        uint48 indexed expirationDatetimeFilter,\n        uint40 expirationDatetime,\n        uint8 indexed marketInterval,\n        uint8 indexed marketCategory,\n        uint40 openTime,\n        string underlyingString\n    );\n\n    constructor (DigiOptionsMarkets addr)\n    {\n        owner = msg.sender;\n        blockNumber = block.number;\n        digiOptionsMarkets = addr;\n    }\n\n    /* TODO re-enabled after 0x-tools support solc-0.6.0\n    // default fallback\n    receive () external payable {\n        revert();\n    }\n    */\n\n    function getContractInfo (\n    )\n        external\n        override\n\tvirtual\n        returns (uint256[] memory contractInfoValues)\n    {\n        uint256[] memory infoValues = digiOptionsMarkets.getContractInfo();\n\n        {\n            infoValues[uint256(DigiOptionsLib.InfoValues.CONTRACT_TYPE_IDX)] = uint256(DigiOptionsLib.ContractType.DIGIOPTIONSMARKETLISTER);\n            infoValues[uint256(DigiOptionsLib.InfoValues.VERSION_MARKET_LISTER_IDX)] = VERSION;\n            //infoValues[uint256(DigiOptionsLib.InfoValues.VERSION_MARKETS_IDX)] // keep versionMarkets\n            infoValues[uint256(DigiOptionsLib.InfoValues.DIGIOPTIONS_MARKETS_ADDR_IDX)] = uint256(uint160(address(digiOptionsMarkets)));\n        }\n        {\n            infoValues[uint256(DigiOptionsLib.InfoValues.BLOCK_NUMBER_CREATED_IDX)] = blockNumber;\n            //infoValues[uint256(DigiOptionsLib.InfoValues.TIMESTAMP_MARKET_CREATED_IDX)] // keep timestampMarketsCreated\n            //infoValues[uint256(DigiOptionsLib.InfoValues.OFFER_MAX_BLOCKS_INTO_FUTURE_IDX)] // keep offerMaxBlocksInto_future\n            //infoValues[uint256(DigiOptionsLib.InfoValues.PAYOUT_PER_NANO_OPTION_EXP_IDX)] // keep payoutPerNanoOption\n            infoValues[uint256(DigiOptionsLib.InfoValues.EXISTING_MARKETS_IDX)] = existingMarkets;\n        }\n\n        return infoValues;\n    }\n\n    function getMarketListerInfo(\n    )\n        external\n        view\n        returns (uint256[] memory listerValues, SignerData[] memory signerDataList)\n    {\n        listerValues = new uint[](uint256(DigiOptionsLib.InfoLister.MAX));\n\n        listerValues[uint256(DigiOptionsLib.InfoLister.VERSION_MARKET_LISTER_IDX)] = VERSION;\n        listerValues[uint256(DigiOptionsLib.InfoLister.OWNER_IDX)] = uint256(uint160(owner));\n        listerValues[uint256(DigiOptionsLib.InfoLister.TRANSACTION_FEE_TOTAL_MAX_IDX)] = transactionFeeTotalMax;\n        listerValues[uint256(DigiOptionsLib.InfoLister.TRANSACTION_FEE0_MIN_IDX)] = transactionFee0Min;\n        listerValues[uint256(DigiOptionsLib.InfoLister.TRANSACTION_FEE1_MIN_IDX)] = transactionFee1Min;\n        listerValues[uint256(DigiOptionsLib.InfoLister.TRANSACTION_FEE_SIGNER_MIN_IDX)] = transactionFeeSignerMin;\n        listerValues[uint256(DigiOptionsLib.InfoLister.OPEN_DELAY_SECONDS_IDX)] = uint256(openDelaySeconds);\n\n        uint256 numEntries = signerMapNumEntries;\n        signerDataList = new SignerData[](numEntries);\n\n        address signerAddr = signerAddrFirst;\n        uint256 idx;\n        for (idx=0 ; idx < numEntries ; idx++){\n\n            signerDataList[idx] = SignerData({\n                signerAddr: signerAddr,\n                value: signerEntriesMap[signerAddr].value\n            });\n            // move on with next entry\n            signerAddr = signerEntriesMap[signerAddr].addrNext;\n        }\n\n        return (listerValues, signerDataList);\n    }\n\n    function getMarketDataByMarketHash (\n        address addr, // marketData.userState for this address\n        bytes32 marketHash\n    )\n        public\n        view\n        override\n        virtual\n        returns (DigiOptionsLib.MarketData memory marketData)\n    {\n        marketData = digiOptionsMarkets.getMarketDataByMarketHash(addr, marketHash);\n        // override testMarket\n        marketData.testMarket = isTestMarket[marketHash];\n    }\n\n    function getMarketDataListByMarketKeys (\n        address addr, // marketData.userState for this address\n        bytes32[] calldata marketKeys // marketsContract uses marketHash / marketListerContract uses baseMarketHash\n    )\n        external\n        view\n        override\n        virtual\n        returns (DigiOptionsLib.MarketData[] memory marketDataList)\n    {\n        marketDataList = new DigiOptionsLib.MarketData[](marketKeys.length);\n        uint256 idx;\n\n        for (idx= 0 ; idx < marketKeys.length ; idx++) {\n            marketDataList[idx] = getMarketDataByMarketHash(addr, marketsBest[marketKeys[idx]].marketHash);\n        }\n        return marketDataList;\n    }\n\n    function calcMarketInterval (\n        uint40 expirationDatetime\n    )\n        external\n        view\n        override\n        virtual\n        returns (uint8 interval)\n    {\n        return digiOptionsMarkets.calcMarketInterval(expirationDatetime);\n    }\n\n    /*\n    check, if a market might be possible to register (it does not need to be created for this\n    and it is not checked if creating is possible at all)\n    */\n    function registerMarketTest (\n        DigiOptionsLib.MarketBaseData memory marketBaseData\n    )\n        public\n        view\n        returns (bool registerPossible)\n    {\n\n        {\n            if (msg.sender == owner){\n                // always allow owner\n                return true;\n            }\n\n            if (\n                (signerEntriesMap[marketBaseData.signerAddr].value == 0) // TODO check bits!\n            ){\n                return false;\n            }\n        }\n\n        /* check fees and feeTaker0 */\n        if (\n            ((uint256(marketBaseData.transactionFee0)).add(uint256(marketBaseData.transactionFee1)).add(uint256(marketBaseData.transactionFeeSigner)) <= transactionFeeTotalMax) &&\n            (marketBaseData.transactionFee0 >= transactionFee0Min) &&\n            (marketBaseData.transactionFee1 >= transactionFee1Min) &&\n            (marketBaseData.transactionFeeSigner >= transactionFeeSignerMin) &&\n            (marketBaseData.feeTaker0 == owner)\n        ){\n            return true;\n        }\n\n        return false;\n    }\n\n    /*\n        This is just a convenient wrapper for both, creating and registering a market.\n        Remember you can always do this in two transactions and just use this contract\n        for registration.\n    */\n    function createMarket (\n        DigiOptionsLib.MarketBaseData memory marketBaseData,\n        bool testMarket,\n        FactsignerVerify.Signature memory signature\n    )\n        public // this should be external (see https://github.com/ethereum/solidity/issues/5479)\n        override\n        returns (bytes32 marketHash)\n    {\n        require (registerMarketTest(marketBaseData), 'register not possible');\n        marketHash = digiOptionsMarkets.createMarket(\n            marketBaseData,\n            testMarket,\n            signature\n        );\n        registerMarketIntern (\n            marketBaseData,\n            marketHash,\n            testMarket\n        );\n        return marketHash;\n    }\n\n    function registerMarket (\n        bytes32 marketHash,\n        bool testMarket\n    )\n        public\n    {\n        DigiOptionsLib.MarketBaseData memory marketBaseData = digiOptionsMarkets.getMarketBaseDataByMarketHash(marketHash);\n\n        /* check that the market exists */\n        assert(marketBaseData.expirationDatetime != 0);\n\n        require (registerMarketTest(marketBaseData), 'register not possible');\n        registerMarketIntern(\n            marketBaseData,\n            marketHash,\n            testMarket\n        );\n    }\n\n    function registerMarketIntern (\n        DigiOptionsLib.MarketBaseData memory marketBaseData,\n        bytes32 marketHash,\n        bool testMarket\n    )\n        internal\n    {\n        bytes32 baseMarketHash = DigiOptionsLib.calcBaseMarketHash(marketBaseData);\n\n        MarketBest storage marketBest = marketsBest[baseMarketHash];\n\n        if (marketBest.marketHash == 0) {\n            // does not yet exist\n\n            uint40 openTime = uint40((msg.sender == owner)? 0 : block.timestamp + openDelaySeconds);\n            marketsBest[baseMarketHash] = MarketBest(\n                {\n                marketHash: marketHash,\n                transactionFee0: marketBaseData.transactionFee0,\n                openTime: openTime\n                }\n            );\n\n            if (msg.sender == owner) {\n                isTestMarket[marketHash] = testMarket;\n            }\n\n            uint256 existingMarketsBit = (1 << uint256(marketBaseData.marketInterval)) << (marketBaseData.marketCategory * 8);\n            if (existingMarkets & existingMarketsBit == 0) {\n                existingMarkets = existingMarkets | existingMarketsBit;\n            }\n\n            uint8 marketIntervalForEventFilter;\n            if ((marketBaseData.config & uint8(FactsignerDefines.ConfigMask.ConfigIntervalTypeIsUsedMask) != 0)) {\n                /* interval used */\n                marketIntervalForEventFilter = marketBaseData.marketInterval;\n            } else {\n                /* interval unused */\n                marketIntervalForEventFilter = DigiOptionsLib.calcMarketInterval(marketBaseData.expirationDatetime);\n            }\n\n            // emit only once for each market (even if it will be replaced later)\n            emit MarketCreateLister(\n                baseMarketHash, // marketKey\n                ((marketBaseData.expirationDatetime/DigiOptionsLib.getDivider(marketIntervalForEventFilter)) << 8) + marketIntervalForEventFilter,\n                marketBaseData.expirationDatetime,\n                marketBaseData.marketInterval,\n                marketBaseData.marketCategory,\n                openTime,\n                marketBaseData.underlyingString\n            );\n            return;\n        }\n        if (\n            (marketBaseData.transactionFee0 > marketBest.transactionFee0) &&\n            (block.timestamp < marketBest.openTime)\n        ){\n            marketBest.marketHash = marketHash;\n            marketBest.transactionFee0 = marketBaseData.transactionFee0;\n        }\n    }\n\n    function setTestMarket (\n        bytes32 marketHash,\n        bool testMarket\n    )\n        public\n        onlyOwner\n    {\n        isTestMarket[marketHash] = testMarket;\n    }\n\n    /*\n    function setOpenDelaySeconds (\n        uint16 openDelaySeconds_\n    )\n        public\n        onlyOwner\n    {\n        if (openDelaySeconds_ > 0) {\n            openDelaySeconds = openDelaySeconds_;\n        }\n    }\n    */\n\n    /*\n    function setTransactionFeeTotalMax (\n        uint64 transactionFeeTotalMax_\n    )\n        public\n        onlyOwner\n    {\n        transactionFeeTotalMax = transactionFeeTotalMax_;\n    }\n    */\n\n    function setSigner (\n        address signerAddr,\n        uint256 value\n    )\n        public\n        onlyOwner\n    {\n        if (signerEntriesMap[signerAddr].exists){\n            // just modify value\n            signerEntriesMap[signerAddr].value = value;\n            return;\n        }\n\n        // add new entry at the head of the list\n        address addrTmp = signerAddrFirst;\n        signerEntriesMap[signerAddr] = SignerListEntry({\n            value: value,\n            addrNext: addrTmp,\n            exists: true\n        });\n        signerAddrFirst = signerAddr;\n        signerMapNumEntries = signerMapNumEntries + 1;\n    }\n}\n"
		},
		"./DigiOptionsBaseInterface.sol": {
			"id": 0,
			"content": "/*\n freedex-protocol / User Driven Option Markets Contract used by https://www.digioptions.com\n\n Base data structures and the interface functions that\n are implemented by both contracts (DigiOptionsMarkets and\n DigioptionsMarketLister)\n\n Public repository:\n https://github.com/berlincode/digioptions-contracts.js\n\n elastic.code@gmail.com\n mail@digioptions.com\n\n SPDX-License-Identifier: MIT\n\n MIT License\n\n Copyright (c) digioptions.com (https://www.digioptions.com)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n*/\n\npragma solidity >=0.7.0;\npragma experimental ABIEncoderV2;\n\nimport \"factsigner/contracts/FactsignerDefines.sol\";\nimport \"factsigner/contracts/FactsignerVerify.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"./DigiOptionsLib.sol\";\n\nabstract contract DigiOptionsBaseInterface {\n\n    function getContractInfo (\n    )\n        external\n        virtual\n        returns (uint256[] memory contractInfoValues);\n\n    function getMarketDataByMarketHash (\n        address addr, // marketData.userState for this address\n        bytes32 marketHash\n    )\n        public\n        view\n        virtual\n        returns (DigiOptionsLib.MarketData memory marketData);\n\n    function getMarketDataListByMarketKeys (\n        address addr, // marketData.userState for this address\n        bytes32[] calldata marketKeys // marketsContract uses marketHash / marketListerContract uses baseMarketHash\n    )\n        external\n        view\n        virtual\n        returns (DigiOptionsLib.MarketData[] memory marketDataList);\n\n    // TODO implement createMarketTest\n\n    function createMarket (\n        DigiOptionsLib.MarketBaseData memory marketBaseData,\n        bool testMarket,\n        FactsignerVerify.Signature memory signature\n    )\n        public\n        virtual\n        returns (bytes32 marketHash);\n\n    function calcMarketInterval (\n        uint40 expirationDatetime\n    )\n        external\n        view\n        virtual\n        returns (uint8 interval);\n\n}\n"
		},
		"factsigner/contracts/FactsignerDefines.sol": {
			"id": 9,
			"content": "/*\n Contract defines for https://www.factsigner.com\n\n Public repository:\n https://github.com/berlincode/factsigner\n\n Version 7.0.0\n\n SPDX-License-Identifier: MIT\n\n MIT License\n\n Copyright (c) factsigner.com (https://www.factsigner.com)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n*/\n\npragma solidity >=0.7.0;\n\nlibrary FactsignerDefines\n{\n    // TODO we use a enum here as a hack until\n    // https://github.com/ethereum/solidity/issues/1290 is solved\n    enum ConfigMask {\n        ConfigMaskDummy0,\n        ConfigMarketTypeIsStrikedMask, // = 1\n        ConfigMaskDummy2,\n        ConfigMaskDummy3,\n        ConfigIntervalTypeIsUsedMask // = 4\n    }\n\n    enum SettlementType {\n        FINAL, // = 0\n        PRELIMINARY_FIRST // = 1\n        //PRELIMINARY_MAX // = 65535\n    }\n\n    enum MarketInterval {\n        NONE, // = 0\n        // the following constants are just proposed assignments\n        YEARLY, // = 1\n        QUATERLY, // 2\n        MONTHLY, // = 3\n        WEEKLY, // = 4\n        DAILY, // = 5\n        HOURLY, // = 6\n        SHORT_TERM // = 7\n    }\n\n}\n"
		},
		"factsigner/contracts/FactsignerVerify.sol": {
			"id": 10,
			"content": "/*\n Signature validation for https://www.factsigner.com\n\n Public repository:\n https://github.com/berlincode/factsigner\n\n Version 7.0.0\n\n SPDX-License-Identifier: MIT\n\n MIT License\n\n Copyright (c) factsigner.com (https://www.factsigner.com)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n*/\n\npragma solidity >=0.7.0;\n\nlibrary FactsignerVerify {\n\n    struct Signature {\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n    }\n\n    bytes constant factsignerPrefix = \"\\x19Factsigner Signed Message:\\n32\";\n    function verifyFactsignerMessage(\n        bytes32 message,\n        Signature memory signature\n    ) internal pure returns (address)\n    {\n        bytes32 prefixedHash = keccak256(\n            abi.encodePacked(\n                factsignerPrefix,\n                message\n            )\n        );\n        address signer = ecrecover(\n            prefixedHash,\n            signature.v,\n            signature.r,\n            signature.s\n        );\n        return signer;\n    }\n}\n"
		},
		"@openzeppelin/contracts/math/SafeMath.sol": {
			"id": 7,
			"content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
		},
		"./DigiOptionsLib.sol": {
			"id": 1,
			"content": "/*\n\n Public repository:\n https://github.com/berlincode/digioptions-contracts.js\n\n elastic.code@gmail.com\n mail@digioptions.com\n\n SPDX-License-Identifier: MIT\n\n MIT License\n\n Copyright (c) digioptions.com (https://www.digioptions.com)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n*/\n\npragma solidity >=0.7.0;\n\nimport \"factsigner/contracts/FactsignerDefines.sol\";\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n//import \"@openzeppelin/contracts/math/SignedSafeMath.sol\";\n\n\nlibrary DigiOptionsLib {\n    using SafeMath for uint256;\n\n    /*\n        For future updgrade we want getContractInfo() to remain its signature('getContractInfo(uint256[]')\n        so we declared the return values as dynamic list. The meaning of each entry is defined via\n        follwing enum.\n    */\n    enum InfoValues { // rename InfoContract\n        CONTRACT_TYPE_IDX, // 0\n        VERSION_MARKET_LISTER_IDX, // 1\n        VERSION_MARKETS_IDX, // 2\n        DIGIOPTIONS_MARKETS_ADDR_IDX, // 3\n        BLOCK_NUMBER_CREATED_IDX, // 4\n        TIMESTAMP_MARKET_CREATED_IDX, // 5\n        OFFER_MAX_BLOCKS_INTO_FUTURE_IDX, // 6\n        ATOMIC_OPTION_PAYOUT_WEI_EXP_IDX, // 7\n        EXISTING_MARKETS_IDX, // 8\n\n        MAX // meta info\n    }\n\n    enum InfoLister {\n        VERSION_MARKET_LISTER_IDX, // 0\n        OWNER_IDX,\n        TRANSACTION_FEE_TOTAL_MAX_IDX,\n        TRANSACTION_FEE0_MIN_IDX,\n        TRANSACTION_FEE1_MIN_IDX,\n        TRANSACTION_FEE_SIGNER_MIN_IDX,\n        OPEN_DELAY_SECONDS_IDX,\n\n        MAX // meta info\n    }\n\n    enum ContractType {\n        UNKNOWN,\n        DIGIOPTIONSMARKETS, // == 1\n        DIGIOPTIONSMARKETLISTER // == 2\n    }\n\n    enum UserState {\n        NONE,\n        EXISTS,\n        PAYED_OUT\n    }\n\n    struct Signature {\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n    }\n\n    struct MarketBaseData {\n        /* constant core market data, part of marketHash calculation */\n\n        string underlyingString;\n        uint40 expirationDatetime; /* used for sorting contracts */\n        uint24 objectionPeriod; /* e.g. 3600 seconds */\n\n        uint8 config;\n        uint8 marketCategory;\n\n        uint8 baseUnitExp;\n        int8 ndigit;\n\n        address signerAddr; /* address used to check the signed result (e.g. of factsigner) */\n\n        uint8 marketInterval;\n        uint8 transactionFee0; /* fee in 1/100 per cent (payed by orderTaker) */\n        uint8 transactionFee1; /* fee in 1/100 per cent (payed by orderTaker) */\n        uint8 transactionFeeSigner; /* fee in 1/100 per cent (payed by orderTaker) */\n        address feeTaker0;\n        address feeTaker1;\n        int128[] strikes;\n    }\n\n    struct MarketState {\n        /* winningOptionID is only valid if settled == true */\n        uint128 fee; // total payed fee (for all fee takers)\n        uint16 winningOptionID;\n        bool settled;\n    }\n\n    struct MarketData {\n        MarketBaseData marketBaseData;\n        MarketState marketState;\n        bytes32 marketHash;\n        UserState userState;\n        bool testMarket; // only used by MarketLister\n    }\n\n\n// TODO remove long term? (and add 2-year?)\n// TODO remove uint8() conversion\n// TODO time offset between marketsContract and marketListerContract?\n\n    /* until const arrays are supported in solidity we use our custom function */\n    uint256 constant DIVIDER_ENTRY_BYTES = 6;\n    bytes constant DIVIDER_TABLE = \"\\\n\\x00\\x00\\x00\\x00\\x00\\x00\\\n\\x00\\x00\\x00\\xfa\\x7d\\x00\\\n\\x00\\x00\\x00\\x3b\\x53\\x80\\\n\\x00\\x00\\x00\\x0a\\x8c\\x00\\\n\\x00\\x00\\x00\\x01\\xfa\\x40\\\n\\x00\\x00\\x00\\x00\\x1c\\x20\\\n\\x00\\x00\\x00\\x00\\x00\\x00\\\n\";\n\n    function getDivider(\n        uint256 calculatedMarketInterval\n    )\n        internal\n        pure\n        returns (uint48)\n    {\n        bytes memory table = DIVIDER_TABLE;\n        uint offset = (calculatedMarketInterval + 1) * DIVIDER_ENTRY_BYTES;\n        uint48 value;\n        assembly {\n            value := mload(add(table, offset))\n        }\n\n        return value;\n    }\n\n\n    // TODO this is only 'view' and not internal because of block.timestamp - maybe change that\n    function calcMarketInterval (\n        uint40 expirationDatetime\n    )\n        internal\n        view\n        returns (uint8 interval)\n    {\n        uint8 marketInterval;\n        uint256 secondsUntilExpiration = uint256(expirationDatetime).sub(uint256(block.timestamp));\n        // TODO > or >= ?\n        require(secondsUntilExpiration < 730 * 24 * 60 * 60, \"too far in the future\");\n        if (secondsUntilExpiration > 45 * 24 * 60 * 60) // > 45 days\n            marketInterval = uint8(FactsignerDefines.MarketInterval.YEARLY);\n        else if (secondsUntilExpiration > 8 * 24 * 60 * 60) // > 8 days\n            marketInterval = uint8(FactsignerDefines.MarketInterval.MONTHLY);\n        else if (secondsUntilExpiration > 36 * 60 * 60) // > 36 hours\n            marketInterval = uint8(FactsignerDefines.MarketInterval.WEEKLY);\n        else if (secondsUntilExpiration > 2 * 60 * 60) // > 2 hours\n            marketInterval = uint8(FactsignerDefines.MarketInterval.DAILY);\n        else if (secondsUntilExpiration > 15 * 60) // > 15 min\n            marketInterval = uint8(FactsignerDefines.MarketInterval.HOURLY);\n        else\n            marketInterval = uint8(FactsignerDefines.MarketInterval.SHORT_TERM);\n\n        return marketInterval;\n    }\n\n    function calcFactHash (\n        DigiOptionsLib.MarketBaseData memory marketBaseData\n    )\n        internal\n        pure // this should be external (see https://github.com/ethereum/solidity/issues/5479)\n        returns (bytes32 factHash)\n    {\n        bytes memory data;\n        data = abi.encodePacked(\n            keccak256(abi.encodePacked(marketBaseData.underlyingString)), /* 'name' utf8 encoded */\n            marketBaseData.expirationDatetime, /* 'settlement' unix epoch seconds UTC */\n            marketBaseData.objectionPeriod, /* e.g. 3600 seconds */\n            marketBaseData.config,\n            marketBaseData.marketCategory,\n\n            marketBaseData.baseUnitExp, /* e.g. 18 -> baseUnit = 10**18 = 1000000000000000000 */\n            marketBaseData.ndigit /* 'ndigit' number of digits (may be negative) */\n        );\n        // if this is a named market we simply use strikes as factsigner's namedRanges\n        if ((marketBaseData.config & uint8(FactsignerDefines.ConfigMask.ConfigMarketTypeIsStrikedMask) == 0)) {\n            data = abi.encodePacked(\n                data,\n                marketBaseData.strikes\n            );\n        }\n        return keccak256(data);\n    }\n\n    function calcMarketHash (\n        DigiOptionsLib.MarketBaseData memory marketBaseData\n    )\n        internal\n        pure\n        returns (bytes32 marketHash)\n    {\n        bytes memory data;\n        data = abi.encodePacked(\n            // TODO from facthash?\n            keccak256(abi.encodePacked(marketBaseData.underlyingString)), /* 'name' utf8 encoded */\n            marketBaseData.expirationDatetime, /* 'settlement' unix epoch seconds UTC */\n            marketBaseData.objectionPeriod, /* e.g. 3600 seconds */\n            marketBaseData.config,\n            marketBaseData.marketCategory,\n\n            marketBaseData.baseUnitExp, /* e.g. 18 -> baseUnit = 10**18 = 1000000000000000000 */\n            marketBaseData.ndigit, /* 'ndigit' number of digits (may be negative) */\n\n            marketBaseData.marketInterval,\n            marketBaseData.feeTaker0,\n            marketBaseData.feeTaker1,\n            marketBaseData.signerAddr /* address used to check the signed result (e.g. of factsigner) */\n        );\n        data = abi.encodePacked(\n            data,\n            marketBaseData.transactionFee0,\n            marketBaseData.transactionFee1,\n            marketBaseData.transactionFeeSigner,\n            marketBaseData.strikes\n        );\n        return keccak256(data);\n    }\n\n    function calcBaseMarketHash (\n        MarketBaseData memory marketBaseData\n    )\n        internal\n        pure\n        returns (bytes32 baseMarketHash)\n    {\n        /* baseMarketHash is similar to marketHash but does not contain all elements. It's basically a factHash with added marketInterval */\n        bytes memory data;\n        data = abi.encodePacked(\n            keccak256(abi.encodePacked(marketBaseData.underlyingString)), /* 'name' utf8 encoded */\n            marketBaseData.expirationDatetime, /* 'settlement' unix epoch seconds UTC */\n            marketBaseData.objectionPeriod, /* e.g. 3600 seconds */\n            marketBaseData.config,\n            marketBaseData.marketCategory,\n\n            marketBaseData.baseUnitExp, /* e.g. 18 -> baseUnit = 10**18 = 1000000000000000000 */\n            marketBaseData.ndigit, /* 'ndigit' number of digits (may be negative) */\n\n            marketBaseData.marketInterval,\n\n            marketBaseData.signerAddr\n        );\n        // if this is a named market we simply use strikes as factsigner's namedRanges\n        if ((marketBaseData.config & uint8(FactsignerDefines.ConfigMask.ConfigMarketTypeIsStrikedMask) == 0)) {\n            data = abi.encodePacked(\n                data,\n                marketBaseData.strikes\n            );\n        }\n        return keccak256(data);\n\n    }\n\n\n    bytes constant OFFER_PREFIX = \"\\x19Ethereum Signed Message:\\n32\"; // TODO\n    function verifyOffer(\n        bytes32 message,\n        Signature memory signature\n    )\n        internal\n        pure\n        returns (address addr)\n    {\n        bytes32 prefixedHash = keccak256(\n            abi.encodePacked(\n                OFFER_PREFIX,\n                message\n            )\n        );\n        address signer = ecrecover(\n            prefixedHash,\n            signature.v,\n            signature.r,\n            signature.s\n        );\n        return signer;\n    }\n}\n"
		},
		"./DigiOptionsMarkets.sol": {
			"id": 3,
			"content": "/*\n freedex-protocol / User Driven Option Markets Contract used by https://www.digioptions.com\n\n Designed to work with signatures from [www.factsigner.com](https://www.factsigner.com)\n\n Public repository:\n https://github.com/berlincode/digioptions-contracts.js\n\n elastic.code@gmail.com\n mail@digioptions.com\n\n SPDX-License-Identifier: MIT\n\n MIT License\n\n Copyright (c) digioptions.com (https://www.digioptions.com)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n*/\n\npragma solidity >=0.7.0;\npragma experimental ABIEncoderV2;\n\nimport \"./DigiOptionsBaseInterface.sol\";\nimport \"./DigiOptionsLib.sol\";\nimport \"./SafeCast.sol\";\nimport \"factsigner/contracts/FactsignerDefines.sol\";\nimport \"factsigner/contracts/FactsignerVerify.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/math/SignedSafeMath.sol\";\n\n\ncontract DigiOptionsMarkets is DigiOptionsBaseInterface {\n    using SafeCast for int256;\n    using SafeCast for uint256;\n    using SafeCast for int128;\n    using SafeCast for uint128;\n    using SafeMath for uint256;\n    using SignedSafeMath for int256;\n\n    uint256 constant private VERSION = (\n        (0 << 32) + /* major */\n        (53 << 16) + /* minor */\n        0 /* bugfix */\n    );\n    uint256 constant private OFFER_MAX_BLOCKS_INTO_FUTURE = 12; // increase for e.g. thundercore\n\n    // each atomic option is worth 10**9 = 1000000000 wei in case of win\n    uint256 constant private ATOMIC_OPTION_PAYOUT_WEI_EXP = 9;\n    int256 constant private ATOMIC_OPTION_PAYOUT_WEI = int256(uint256(10)**ATOMIC_OPTION_PAYOUT_WEI_EXP);\n\n    uint8 constant private RANGESTATE_NOT_USED = 0;\n    uint8 constant private RANGESTATE_TRADED = 1;\n    uint8 constant private RANGESTATE_PAYED_OUT = 2;\n\n    int256 constant private INT256_MAX = int256(~(uint256(1) << 255));\n\n    struct Position {\n        int128 value;\n        uint8 rangeState;\n    }\n\n    struct Market {\n        DigiOptionsLib.MarketState marketState;\n        DigiOptionsLib.MarketBaseData marketBaseData;\n        mapping(address => mapping(uint256 => Position)) positions; // position mapping for each user\n\n        mapping(bytes32 => uint256)  offersAccepted; // remember how many options from an offer are already taken\n    }\n\n    struct OrderOffer {\n        bytes32 marketHash;\n        uint16 optionID;\n        bool buy; // does the offer owner want to buy or sell options\n        uint256 pricePerOption;\n        uint256 size;\n        uint256 offerID;\n        uint256 blockExpires;\n        address offerOwner;\n    }\n\n    struct OrderOfferSigned {\n        OrderOffer orderOffer;\n        DigiOptionsLib.Signature signature;\n    }\n\n    /* variables */\n    uint256 private timestamp;\n    uint256 private blockNumber;\n    uint256 private existingMarkets; /* one bit for each marketCategory and marketInterval */\n\n    mapping(address => uint256) internal liquidityUser;\n    mapping(bytes32 => Market) internal markets;\n\n    mapping(address => uint32) internal userMarketsIdx;\n\n    event MarketCreate(\n        bytes32 marketKey, /* marketsContract stores marketHash ; marketListerContract stores baseMarketHash */\n        uint48 indexed expirationDatetimeFilter,\n        uint40 expirationDatetime,\n        uint8 indexed marketInterval,\n        uint8 indexed marketCategory,\n        string underlyingString\n    );\n    event MarketSettlement(\n        bytes32 marketHash\n    );\n    // this may result in liquidity change\n    event LiquidityAddWithdraw(address indexed addr, uint256 datetime, int256 amount);\n    event PositionChange(\n        // TODO optimize order for gas costs possible?\n        uint256 indexed buyer,\n        uint256 indexed seller,\n        bytes32 indexed marketHash,\n        uint256 datetime, // TODO we might remove this and use info from block\n        uint16 optionID,\n        uint256 pricePerOption,\n        uint256 size,\n        bytes32 offerHash\n    );\n\n    /* This is the constructor */\n    constructor ()\n    {\n        blockNumber = block.number;\n        timestamp = block.timestamp;\n    }\n\n    /* TODO re-enabled after 0x-tools support solc-0.6.0\n    // default fallback\n    receive ()\n        external\n        payable\n    {\n        liquidityAdd();\n    }\n    */\n\n    function getContractInfo (\n    )\n        external\n        override\n        virtual\n        returns (uint256[] memory contractInfoValues)\n    {\n        uint256[] memory infoValues = new uint[](uint256(DigiOptionsLib.InfoValues.MAX));\n\n        infoValues[uint256(DigiOptionsLib.InfoValues.CONTRACT_TYPE_IDX)] = uint256(DigiOptionsLib.ContractType.DIGIOPTIONSMARKETS);\n        infoValues[uint256(DigiOptionsLib.InfoValues.VERSION_MARKET_LISTER_IDX)] = 0; // versionMarketLister\n        infoValues[uint256(DigiOptionsLib.InfoValues.VERSION_MARKETS_IDX)] = VERSION; // versionMarkets\n        infoValues[uint256(DigiOptionsLib.InfoValues.DIGIOPTIONS_MARKETS_ADDR_IDX)] = uint256(uint160(address(this))); // digiOptionsMarketsAddr\n        infoValues[uint256(DigiOptionsLib.InfoValues.BLOCK_NUMBER_CREATED_IDX)] = blockNumber; // blockNumberCreated\n        infoValues[uint256(DigiOptionsLib.InfoValues.TIMESTAMP_MARKET_CREATED_IDX)] = timestamp; // timestampMarketsCreated\n        infoValues[uint256(DigiOptionsLib.InfoValues.OFFER_MAX_BLOCKS_INTO_FUTURE_IDX)] = OFFER_MAX_BLOCKS_INTO_FUTURE;\n        infoValues[uint256(DigiOptionsLib.InfoValues.ATOMIC_OPTION_PAYOUT_WEI_EXP_IDX)] = ATOMIC_OPTION_PAYOUT_WEI_EXP;\n        infoValues[uint256(DigiOptionsLib.InfoValues.EXISTING_MARKETS_IDX)] = existingMarkets;\n\n        return infoValues;\n    }\n\n    function liquidityGet()\n        public\n        view\n        returns (uint256 liquidity)\n    {\n        return liquidityUser[msg.sender];\n    }\n\n    function liquidityWithdraw (uint256 amount) external {\n        require (amount <= liquidityUser[msg.sender], \"Not enough liquidity.\");\n\n        /* Remember to reduce the liquidity BEFORE */\n        /* sending to prevent re-entrancy attacks */\n        liquidityUser[msg.sender] = liquidityUser[msg.sender].sub(amount);\n        payable(msg.sender).transfer(amount);\n        emit LiquidityAddWithdraw(msg.sender, block.timestamp, -int256(amount));\n    }\n\n    /* returns all relevant market data - if marketHash does not exist marketBaseData.expirationDatetime is 0*/\n    function getMarketDataByMarketHash (\n        address addr, // marketData.userState for this address\n        bytes32 marketHash\n    )\n        public\n        view\n        override\n        virtual\n        returns (DigiOptionsLib.MarketData memory marketData)\n    {\n        Market storage market = markets[marketHash];\n        DigiOptionsLib.MarketBaseData memory marketBaseData = market.marketBaseData;\n        DigiOptionsLib.MarketState memory marketState = market.marketState;\n\n        return DigiOptionsLib.MarketData({\n            marketBaseData: marketBaseData,\n            marketState: marketState,\n            marketHash: marketHash,\n            userState: getUserState(addr, market),\n            testMarket: false // only used by MarketLister\n        });\n    }\n\n    function getMarketBaseDataByMarketHash (bytes32 marketHash)\n        public\n        view\n        returns (DigiOptionsLib.MarketBaseData memory marketBaseData)\n    {\n        Market storage market = markets[marketHash];\n        return market.marketBaseData;\n    }\n\n    function getMarketDataListByMarketKeys (\n        address addr, // marketData.userState for this address\n        bytes32[] calldata marketKeys // marketsContract uses marketHash / marketListerContract uses baseMarketHash\n    )\n        external\n        view\n        override\n        virtual\n        returns (DigiOptionsLib.MarketData[] memory marketDataList)\n    {\n        marketDataList = new DigiOptionsLib.MarketData[](marketKeys.length);\n        uint256 idx;\n\n        for (idx= 0 ; idx < marketKeys.length ; idx++) {\n            marketDataList[idx] = getMarketDataByMarketHash(addr, marketKeys[idx]);\n        }\n        return marketDataList;\n    }\n\n    function calcMarketInterval (\n        uint40 expirationDatetime\n    )\n        external\n        view\n        override\n        virtual\n        returns (uint8 interval)\n    {\n        return DigiOptionsLib.calcMarketInterval(expirationDatetime);\n    }\n\n    function getUserState (\n        address addr,\n        Market storage market\n    )\n        internal\n        view\n        returns (DigiOptionsLib.UserState userState)\n    {\n        mapping(uint256 => Position) storage positions = market.positions[addr];\n\n        if (market.marketState.settled){\n            Position memory winningPosition = positions[market.marketState.winningOptionID];\n            if (\n                (winningPosition.rangeState == RANGESTATE_PAYED_OUT) ||\n                ((winningPosition.rangeState == RANGESTATE_TRADED) && (winningPosition.value == 0))  // TODO fixme == 0\n                ){\n                return DigiOptionsLib.UserState.PAYED_OUT;\n            }\n        }\n        // TODO for named markets one excess optionID is checked (which should not be a problem)\n        for (uint256 optionID = 0; optionID <= market.marketBaseData.strikes.length; optionID++) {\n            if (positions[optionID].rangeState > RANGESTATE_NOT_USED) {\n                return DigiOptionsLib.UserState.EXISTS;\n            }\n        }\n        return DigiOptionsLib.UserState.NONE;\n    }\n\n    function getLiquidityAndPositions (bytes32 marketHash)\n        external\n        view\n        returns (uint256 liquidity, Position[] memory positions, DigiOptionsLib.UserState userState)\n    {\n        Market storage market = markets[marketHash];\n        DigiOptionsLib.MarketBaseData memory marketBaseData = market.marketBaseData;\n\n        // return user's total contract liquidity and positions for selected market\n\n        // TODO for named markets one excess optionID is checked (which should not be a problem)\n        positions = new Position[](marketBaseData.strikes.length + 1);\n\n        for (uint256 optionID = 0; optionID <= marketBaseData.strikes.length; optionID++) {\n            positions[optionID] = market.positions[msg.sender][optionID];\n        }\n        return (\n            liquidityUser[msg.sender],\n            positions,\n            getUserState(msg.sender, market)\n        );\n    }\n\n    function liquidityAdd ()\n        public\n        payable\n    {\n        if (msg.value > 0) {\n            liquidityUser[msg.sender] = liquidityUser[msg.sender].add(msg.value);\n            emit LiquidityAddWithdraw(msg.sender, block.timestamp, int256(msg.value));\n        }\n    }\n\n    function liquidityAddFor (address user)\n        public\n        payable\n    {\n        if (msg.value > 0) {\n            liquidityUser[user] = liquidityUser[user].add(msg.value);\n            emit LiquidityAddWithdraw(user, block.timestamp, int256(msg.value));\n        }\n    }\n\n    function createMarket (\n        DigiOptionsLib.MarketBaseData memory marketBaseData,\n        bool testMarket,\n        FactsignerVerify.Signature memory signature\n    )\n        public // this should be external (see https://github.com/ethereum/solidity/issues/5479)\n        override\n        returns (bytes32 marketHash)\n    {\n        assert(marketBaseData.expirationDatetime != 0);\n\n        { // scope here to safe stack space\n        bytes32 factHash = DigiOptionsLib.calcFactHash(marketBaseData);\n        require(\n            FactsignerVerify.verifyFactsignerMessage(\n                factHash,\n                signature\n            ) == marketBaseData.signerAddr,\n            \"Signature invalid.\"\n        );\n\n        marketHash = DigiOptionsLib.calcMarketHash(marketBaseData);\n        }\n\n        /* Check that the market does not already exists */\n        if (markets[marketHash].marketBaseData.expirationDatetime != 0)\n            return marketHash;\n\n        assert(marketBaseData.baseUnitExp == 18); // TODO remove this in the future\n\n        assert(marketBaseData.marketCategory < 64); // limit marketCategory (for now)\n\n        //assert((uint256(marketBaseData.transactionFee0)).add(uint256(marketBaseData.transactionFee1)).add(uint256(marketBaseData.transactionFeeSigner)) <= 500);\n\n        uint256 optionID;\n        if ((marketBaseData.config & uint8(FactsignerDefines.ConfigMask.ConfigMarketTypeIsStrikedMask)) != 0) {\n            /* striked market */\n            /* check that we have at least one strike */\n            assert(marketBaseData.strikes.length > 0);\n            assert(marketBaseData.strikes.length < 32765); // our first optionID is 0\n\n            /* check strikes are ordered */\n            for (optionID = 1; optionID < marketBaseData.strikes.length; optionID++) {\n                assert(marketBaseData.strikes[optionID-1] < marketBaseData.strikes[optionID]);\n            }\n\n            /* check that the final settlement precision high enough for the supplied strikes */\n            assert(int16(uint16(marketBaseData.baseUnitExp)) >= marketBaseData.ndigit);\n            for (optionID = 0; optionID < marketBaseData.strikes.length; optionID++) {\n                assert((marketBaseData.strikes[optionID] % int256(10**uint256((int256(uint256(marketBaseData.baseUnitExp))-marketBaseData.ndigit)))) == 0);\n            }\n        } else {\n            /* named market */\n            /* check that we have at least two named ranges */\n            assert(marketBaseData.strikes.length > 1);\n            assert(marketBaseData.strikes.length <= 32765); // our first optionID is 0\n        }\n        assert(marketBaseData.marketCategory < 32); // limit marketCategory (for now)\n\n        uint256 existingMarketsBit = (1 << uint256(marketBaseData.marketInterval)) << (marketBaseData.marketCategory * 8);\n        if (existingMarkets & existingMarketsBit == 0) {\n            existingMarkets = existingMarkets | existingMarketsBit;\n        }\n\n        uint8 marketIntervalForEventFilter = DigiOptionsLib.calcMarketInterval(marketBaseData.expirationDatetime);\n        if ((marketBaseData.config & uint8(FactsignerDefines.ConfigMask.ConfigIntervalTypeIsUsedMask) != 0)) {\n            /* interval used */\n            assert(marketBaseData.marketInterval == marketIntervalForEventFilter);\n        } else {\n            /* interval unused */\n            assert(marketBaseData.marketInterval == uint8(FactsignerDefines.MarketInterval.NONE));\n        }\n\n        markets[marketHash].marketBaseData = marketBaseData;\n\n\n        emit MarketCreate(\n            marketHash, // marketKey\n            ((marketBaseData.expirationDatetime/DigiOptionsLib.getDivider(marketIntervalForEventFilter)) << 8) + marketIntervalForEventFilter,\n            marketBaseData.expirationDatetime,\n            marketBaseData.marketInterval,\n            marketBaseData.marketCategory,\n            marketBaseData.underlyingString\n        );\n        return marketHash;\n    }\n\n    function settlement (\n        bytes32 marketHash, /* market to settle */\n        FactsignerVerify.Signature memory signature,\n        int256 value,\n        address[] memory users,\n        bytes32[] memory offerHash\n    )\n        public // this should be external (see https://github.com/ethereum/solidity/issues/5479)\n    {\n        Market storage market = markets[marketHash];\n\n        /* anybody with access to the signed value (from signerAddr) can settle the market */\n\n        require(\n            FactsignerVerify.verifyFactsignerMessage(\n                keccak256(\n                    abi.encodePacked(\n                        DigiOptionsLib.calcFactHash(market.marketBaseData),\n                        value,\n                        uint16(FactsignerDefines.SettlementType.FINAL)\n                    )\n                ),\n                signature\n            ) == market.marketBaseData.signerAddr,\n            \"Signature invalid.\"\n        );\n\n        // just return if already settled\n        if (market.marketState.settled)\n            return;\n\n        uint256 winningOptionID;\n        uint256 optionID;\n        if ((market.marketBaseData.config & uint8(FactsignerDefines.ConfigMask.ConfigMarketTypeIsStrikedMask)) != 0) {\n            /* striked market */\n            winningOptionID = market.marketBaseData.strikes.length;\n            for (optionID = 0; optionID < market.marketBaseData.strikes.length; optionID++) {\n                if (value < market.marketBaseData.strikes[optionID]) {\n                    winningOptionID = optionID;\n                    break;\n                }\n            }\n        } else {\n            /* named market */\n            winningOptionID = 0; // default in case nothing matches\n            for (optionID = 0; optionID < market.marketBaseData.strikes.length; optionID++) {\n                if (value == market.marketBaseData.strikes[optionID]) {\n                    winningOptionID = optionID;\n                    break;\n                }\n            }\n        }\n        // TODO one transaction\n        market.marketState.winningOptionID = uint16(winningOptionID);\n        market.marketState.settled = true;\n\n        uint256 feeSum = uint256(market.marketBaseData.transactionFee0).add(uint256(market.marketBaseData.transactionFee1)).add(uint256(market.marketBaseData.transactionFeeSigner));\n        uint256 feePart = uint256(market.marketState.fee) / feeSum;\n        liquidityUser[market.marketBaseData.feeTaker0] = liquidityUser[market.marketBaseData.feeTaker0].add(feePart.mul(market.marketBaseData.transactionFee0));\n        liquidityUser[market.marketBaseData.feeTaker1] = liquidityUser[market.marketBaseData.feeTaker1].add(feePart.mul(market.marketBaseData.transactionFee1));\n        liquidityUser[market.marketBaseData.signerAddr] = liquidityUser[market.marketBaseData.signerAddr].add(feePart.mul(market.marketBaseData.transactionFeeSigner));\n\n        emit MarketSettlement(marketHash);\n\n        freeLiquidity(\n            marketHash,\n            users,\n            offerHash\n        );\n    }\n\n    function freeLiquidity(\n        bytes32 marketHash,\n        address[] memory users,\n        bytes32[] memory offerHash\n    )\n        public\n    {\n        Market storage market = markets[marketHash];\n\n        DigiOptionsLib.MarketState memory marketState = market.marketState;\n\n        // TODO fetch marketState once\n        uint16 winningOptionID = marketState.winningOptionID;\n        require(marketState.settled == true, \"Market not yet settled.\");\n\n        uint256 idx;\n        int256 minPosition;\n        for (idx = 0; idx < users.length; idx++) {\n\n            address user = users[idx];\n            //mapping(uint256 => Position) storage positions = market.positions[user];\n\n            if (getUserState(user, market) != DigiOptionsLib.UserState.PAYED_OUT) {\n\n                minPosition = getMinPosition(\n                    market,\n                    user\n                );\n\n                int256 pos = int256(market.positions[user][winningOptionID].value);\n                int256 size = pos.sub(minPosition);\n\n                market.positions[user][winningOptionID].rangeState = RANGESTATE_PAYED_OUT;\n\n                liquidityUser[user] = liquidityUser[user].add(size.mul(ATOMIC_OPTION_PAYOUT_WEI).castToUint());\n\n                // TODO a cheaper event would do too\n                if (pos >= 0) {\n                    emit PositionChange(\n                        //uint256(buyer) + uint256(market.userData[msg.sender].state),\n                        0, // indicates final payout\n                        uint256(uint160(user)),\n                        marketHash,\n                        block.timestamp,\n                        winningOptionID,\n                        uint256(ATOMIC_OPTION_PAYOUT_WEI),\n                        uint256(pos),\n                        0\n                    );\n                } else {\n                    emit PositionChange(\n                        //uint256(buyer) + uint256(market.userData[msg.sender].state),\n                        uint256(uint160(user)),\n                        0, // indicates final payout\n                        marketHash,\n                        block.timestamp,\n                        winningOptionID,\n                        uint256(ATOMIC_OPTION_PAYOUT_WEI),\n                        uint256(-pos),\n                        0\n                    );\n                }\n            }\n\n        }\n    }\n\n    function orderExecuteTest (\n        OrderOfferSigned memory orderOfferSigned,\n        uint256 sizeAccept // TODO rename to sizeAcceptMax?\n    )\n        public\n        view\n        returns (\n            uint256 sizeAcceptPossible,\n            bytes32 offerHash,\n            int256 liquidityOfferOwner, // only valid if sizeAcceptPossible > 0\n            int256 liquidityOfferTaker, // only valid if sizeAcceptPossible > 0\n            uint256 transactionFeeAmount // only valid if sizeAcceptPossible > 0\n        )\n    {\n\n        OrderOffer memory orderOffer = orderOfferSigned.orderOffer;\n        Market storage market = markets[orderOffer.marketHash];\n\n        offerHash = keccak256(\n            abi.encodePacked(\n                address(this), // this checks that the signature is valid only for this contract\n                orderOffer.marketHash,\n                orderOffer.optionID,\n                orderOffer.buy,\n                orderOffer.pricePerOption,\n                orderOffer.size,\n                orderOffer.offerID,\n                orderOffer.blockExpires,\n                orderOffer.offerOwner\n            )\n        );\n        if (!(\n                (DigiOptionsLib.verifyOffer(\n                    offerHash,\n                    orderOfferSigned.signature\n                ) == orderOffer.offerOwner)\n            )) {\n            sizeAccept = 0;\n            // TODO return immediately?\n        } else if (market.offersAccepted[offerHash].add(sizeAccept) > orderOffer.size) {\n            sizeAccept = orderOffer.size.sub(market.offersAccepted[offerHash]);\n        }\n\n        uint256 value = sizeAccept.mul(orderOffer.pricePerOption);\n\n        // TODO precalcuate sum of transactions fees\n        transactionFeeAmount = value.div(10000).mul(\n            uint256(market.marketBaseData.transactionFee0).add(uint256(market.marketBaseData.transactionFee1)).add(uint256(market.marketBaseData.transactionFeeSigner))\n        );\n\n        liquidityOfferOwner = getLiquidityAfterTrade(\n            market,\n            orderOffer.buy,\n            orderOffer,\n            orderOffer.offerOwner,\n            sizeAccept,\n            value\n        );\n        liquidityOfferTaker = getLiquidityAfterTrade(\n            market,\n            !orderOffer.buy,\n            orderOffer,\n            msg.sender,\n            sizeAccept,\n            value\n        ).sub(transactionFeeAmount.castToInt());\n\n        if (!(\n                (orderOffer.optionID <= market.marketBaseData.strikes.length) && // TODO depends on striked or named market?\n                (block.number <= orderOffer.blockExpires) &&\n                (block.number.add(OFFER_MAX_BLOCKS_INTO_FUTURE) >= orderOffer.blockExpires) &&\n                // offerTaker and offerOwner must not be the same (because liquidity is calculated seperately)\n                (orderOffer.offerOwner != msg.sender) &&\n                (liquidityOfferOwner >= int256(0)) &&\n                (liquidityOfferTaker >= int256(0))\n            )) {\n            sizeAccept = 0;\n        }\n        return (\n            sizeAccept,\n            offerHash,\n            liquidityOfferOwner, // only valid if sizeAcceptPossible > 0\n            liquidityOfferTaker, // only valid if sizeAcceptPossible > 0\n            transactionFeeAmount // only valid if sizeAcceptPossible > 0\n        );\n    }\n\n    function orderExecuteSingle (\n        OrderOfferSigned memory orderOfferSigned,\n        uint256 sizeAcceptMax /* maximum */\n    )\n        private\n        returns (uint256 sizeAcceptRemain)\n    {\n        OrderOffer memory orderOffer;\n\n        orderOffer = orderOfferSigned.orderOffer;\n        bytes32 offerHash;\n        uint256 sizeAcceptPossible;\n\n        Market storage market = markets[orderOffer.marketHash];\n\n        address buyer; // buys options / money giver\n        address seller; // sells options / money getter\n        if (orderOffer.buy) {\n            buyer = orderOffer.offerOwner;\n            seller = msg.sender;\n        } else {\n            buyer = msg.sender;\n            seller = orderOffer.offerOwner;\n        }\n\n        int256 liquidityOfferOwner; // only valid if sizeAcceptPossible > 0\n        int256 liquidityOfferTaker; // only valid if sizeAcceptPossible > 0\n        uint256 transactionFeeAmount; // only valid if sizeAcceptPossible > 0\n        (\n            sizeAcceptPossible,\n            offerHash,\n            liquidityOfferOwner, // only valid if sizeAcceptPossible > 0\n            liquidityOfferTaker, // only valid if sizeAcceptPossible > 0\n            transactionFeeAmount // only valid if sizeAcceptPossible > 0\n        ) = orderExecuteTest (\n            orderOfferSigned,\n            sizeAcceptMax\n        );\n        if (sizeAcceptPossible == 0) {\n            return sizeAcceptMax;\n        }\n\n        liquidityUser[orderOffer.offerOwner] = liquidityOfferOwner.castToUint();\n        liquidityUser[msg.sender] = liquidityOfferTaker.castToUint();\n        market.marketState.fee = uint256(market.marketState.fee).add(transactionFeeAmount).castToUint128();\n\n        {\n        // update positions\n        Position memory pos;\n        {\n            mapping(uint256 => Position) storage positions = market.positions[buyer];\n            pos = positions[orderOffer.optionID];\n            pos.rangeState = RANGESTATE_TRADED;\n            pos.value = int256(pos.value).add(int256(sizeAcceptPossible)).castToInt128();\n            positions[orderOffer.optionID] = pos;\n        }\n\n        {\n            mapping(uint256 => Position) storage positions = market.positions[seller];\n            pos = positions[orderOffer.optionID];\n            pos.value = int256(pos.value).sub(int256(sizeAcceptPossible)).castToInt128();\n            pos.rangeState = RANGESTATE_TRADED;\n            positions[orderOffer.optionID] = pos;\n        }\n        }\n\n        // remember that (some amount of) the offers is taken\n        market.offersAccepted[offerHash] = market.offersAccepted[offerHash].add(sizeAcceptPossible);\n\n        emit PositionChange(\n            //uint256(buyer) + uint256(market.userData[msg.sender].state),\n            uint256(uint160(buyer)),\n            uint256(uint160(seller)),\n            orderOffer.marketHash,\n            block.timestamp,\n            orderOffer.optionID,\n            orderOffer.pricePerOption,\n            sizeAcceptPossible,\n            offerHash\n        );\n\n        return sizeAcceptMax.sub(sizeAcceptPossible);\n    }\n\n    // OrderOfferSigned array should contain only sell orders or only buys orders for the same optionID and marketHash (not mixed)\n    function orderExecute (\n        OrderOfferSigned[] memory orderOfferSignedList,\n        uint256 sizeAcceptMax /* maximum for all supplied orderOfferSigned structs */\n    )\n        public // this should be external (see https://github.com/ethereum/solidity/issues/5479)\n    {\n        OrderOfferSigned memory orderOfferSigned;\n\n        for (uint256 orderOfferIdx=0; orderOfferIdx < orderOfferSignedList.length; orderOfferIdx++) {\n            orderOfferSigned = orderOfferSignedList[orderOfferIdx];\n\n            //Market storage market = markets[orderOfferSigned.orderOffer.marketHash];\n\n            sizeAcceptMax = orderExecuteSingle (\n                orderOfferSigned,\n                sizeAcceptMax\n            );\n        }\n    }\n\n    function getLiquidityAfterTrade(\n        Market storage market,\n        bool isBuyer,\n        OrderOffer memory orderOffer,\n        address userAddr,\n        uint256 sizeAccept,\n        uint256 value\n    )\n        internal\n        view\n        returns (int256 _liquidity)\n    {\n        int256 liquidity = liquidityUser[userAddr].castToInt();\n        int256 sizeAccept_;\n\n        if (! isBuyer) {\n            liquidity = liquidity.add(value.castToInt()); // seller gets money\n            sizeAccept_ = int256(0).sub(sizeAccept.castToInt());\n        } else {\n            liquidity = liquidity.sub(value.castToInt()); // buyer pays money\n            sizeAccept_ = sizeAccept.castToInt();\n        }\n\n        int256 minPositionBeforeTrade;\n        int256 minPositionAfterTrade;\n        (minPositionBeforeTrade, minPositionAfterTrade) = getMinPositionAfterTrade(\n            market,\n            userAddr,\n            orderOffer.optionID,\n            sizeAccept_\n        );\n\n        liquidity = liquidity.add((minPositionAfterTrade.sub(minPositionBeforeTrade)).mul(ATOMIC_OPTION_PAYOUT_WEI));\n\n        return liquidity;\n    }\n\n    function getMinPositionAfterTrade (\n        Market storage market,\n        address userAddr,\n        /* optional to calc the minimal position after a change */\n        uint16 optionID,\n        int256 positionChange\n    ) internal view\n        returns (int256 minPositionBeforeTrade_, int256 minPositionAfterTrade_)\n    {\n        int256 minPositionBeforeTrade = INT256_MAX;\n        int256 minPositionAfterTrade = INT256_MAX;\n\n        uint256 length = market.marketBaseData.strikes.length;\n        mapping(uint256 => Position) storage positions = market.positions[userAddr];\n        int256 position;\n        for (uint256 s = 0; s <= length; s++) {\n\n            position = positions[s].value;\n            if (position < minPositionBeforeTrade)\n                minPositionBeforeTrade = position;\n\n            if (s == optionID)\n                position = position.add(positionChange);\n\n            if (position < minPositionAfterTrade)\n                minPositionAfterTrade = position;\n        }\n        return (minPositionBeforeTrade, minPositionAfterTrade);\n    }\n\n    function getMinPosition (\n        Market storage market,\n        address userAddr\n    ) internal view\n        returns (int256 minPosition_)\n    {\n        int256 minPosition = INT256_MAX;\n\n        uint256 length = market.marketBaseData.strikes.length;\n        mapping(uint256 => Position) storage positions = market.positions[userAddr];\n        int256 position;\n        for (uint256 s = 0; s <= length; s++) {\n\n            position = positions[s].value;\n            if (position < minPosition)\n                minPosition = position;\n\n        }\n        return (minPosition);\n    }\n\n}\n"
		},
		"./SafeCast.sol": {
			"id": 6,
			"content": "pragma solidity >=0.7.0;\n\n/*\n SPDX-License-Identifier: MIT\n*/\n\nlibrary SafeCast {\n    /**\n     * Cast unsigned a to signed a.\n     */\n    function castToInt(uint256 a) internal pure returns(int256) {\n        assert(a < (1 << 255));\n        return int(a);\n    }\n\n    /**\n     * Cast signed a to unsigned a.\n     */\n    function castToUint(int256 a) internal pure returns(uint256) {\n        assert(a >= 0);\n        return uint(a);\n    }\n\n    // TODO\n    function castToInt128(int256 a) internal pure returns(int128) {\n        assert(int128(a) == a);\n        return int128(a);\n    }\n\n    // TODO\n    function castToUint128(uint256 a) internal pure returns(uint128) {\n        assert(uint128(a) == a);\n        return uint128(a);\n    }\n}\n"
		},
		"@openzeppelin/contracts/math/SignedSafeMath.sol": {
			"id": 8,
			"content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\n/**\n * @title SignedSafeMath\n * @dev Signed math operations with safety checks that revert on error.\n */\nlibrary SignedSafeMath {\n    int256 constant private _INT256_MIN = -2**255;\n\n    /**\n     * @dev Returns the multiplication of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(int256 a, int256 b) internal pure returns (int256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        require(!(a == -1 && b == _INT256_MIN), \"SignedSafeMath: multiplication overflow\");\n\n        int256 c = a * b;\n        require(c / a == b, \"SignedSafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two signed integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(int256 a, int256 b) internal pure returns (int256) {\n        require(b != 0, \"SignedSafeMath: division by zero\");\n        require(!(b == -1 && a == _INT256_MIN), \"SignedSafeMath: division overflow\");\n\n        int256 c = a / b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a - b;\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \"SignedSafeMath: subtraction overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the addition of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a + b;\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \"SignedSafeMath: addition overflow\");\n\n        return c;\n    }\n}\n"
		}
	},
	"sourceCodes": {
		"./DigiOptionsMarketLister.sol": "/*\n freedex-protocol / User Driven Option Markets Contract used by https://www.digioptions.com\n\n Designed to work with signatures from [www.factsigner.com](https://www.factsigner.com)\n\n Public repository:\n https://github.com/berlincode/digioptions-contracts.js\n\n elastic.code@gmail.com\n mail@digioptions.com\n\n SPDX-License-Identifier: MIT\n\n MIT License\n\n Copyright (c) digioptions.com (https://www.digioptions.com)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n*/\n\npragma solidity >=0.7.0;\npragma experimental ABIEncoderV2;\n\nimport \"./DigiOptionsBaseInterface.sol\";\nimport \"./DigiOptionsMarkets.sol\";\nimport \"./DigiOptionsLib.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/math/SignedSafeMath.sol\";\n\n\ncontract DigiOptionsMarketLister is DigiOptionsBaseInterface {\n    using SafeMath for uint256;\n    using SignedSafeMath for int256;\n\n    /*\n        we use a simple linked list - since the SignerListEntry is part of a map\n        the value remains directly accessible by the signer's address\n    */\n    struct SignerListEntry {\n        uint256 value;\n        address addrNext;\n        bool exists;\n    }\n\n    struct SignerData {\n        address signerAddr;\n        uint256 value;\n    }\n\n    uint256 constant private VERSION = (\n        (0 << 32) + /* major */\n        (53 << 16) + /* minor */\n        0 /* bugfix */\n    );\n\n    /* constants which are set during construction */\n    uint256 private blockNumber;\n    address private owner;\n    DigiOptionsMarkets private digiOptionsMarkets;\n\n    uint256 private existingMarkets; /* one bit for each marketCategory and marketInterval */\n\n    /* control variables/constants */\n    uint256 constant private transactionFeeTotalMax = 100; // 1.0%\n    uint256 constant private transactionFee0Min = 10; // 0.1%\n    uint256 constant private transactionFee1Min = 10; // 0.1%\n    uint256 constant private transactionFeeSignerMin = 5; // 0.05%\n    uint16 constant private openDelaySeconds = 600;\n\n    address internal signerAddrFirst; /* the first signer (if exists) */\n    mapping(address => SignerListEntry) private signerEntriesMap; // stores which signing addresses are allowed to register\n    uint256 private signerMapNumEntries = 0;\n\n    /* variables */\n    struct MarketBest {\n        bytes32 marketHash;\n        uint8 transactionFee0;\n        uint40 openTime;\n    }\n    mapping(bytes32 => MarketBest) internal marketsBest; // mapping from baseMarketHash\n    mapping(bytes32 => bool) internal isTestMarket; // mapping from marketHash\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Only owner can call this function.\");\n        _;\n    }\n\n    event MarketCreateLister(\n        bytes32 marketKey, /* marketsContract stores marketHash ; marketListerContract stores baseMarketHash */\n        uint48 indexed expirationDatetimeFilter,\n        uint40 expirationDatetime,\n        uint8 indexed marketInterval,\n        uint8 indexed marketCategory,\n        uint40 openTime,\n        string underlyingString\n    );\n\n    constructor (DigiOptionsMarkets addr)\n    {\n        owner = msg.sender;\n        blockNumber = block.number;\n        digiOptionsMarkets = addr;\n    }\n\n    /* TODO re-enabled after 0x-tools support solc-0.6.0\n    // default fallback\n    receive () external payable {\n        revert();\n    }\n    */\n\n    function getContractInfo (\n    )\n        external\n        override\n\tvirtual\n        returns (uint256[] memory contractInfoValues)\n    {\n        uint256[] memory infoValues = digiOptionsMarkets.getContractInfo();\n\n        {\n            infoValues[uint256(DigiOptionsLib.InfoValues.CONTRACT_TYPE_IDX)] = uint256(DigiOptionsLib.ContractType.DIGIOPTIONSMARKETLISTER);\n            infoValues[uint256(DigiOptionsLib.InfoValues.VERSION_MARKET_LISTER_IDX)] = VERSION;\n            //infoValues[uint256(DigiOptionsLib.InfoValues.VERSION_MARKETS_IDX)] // keep versionMarkets\n            infoValues[uint256(DigiOptionsLib.InfoValues.DIGIOPTIONS_MARKETS_ADDR_IDX)] = uint256(uint160(address(digiOptionsMarkets)));\n        }\n        {\n            infoValues[uint256(DigiOptionsLib.InfoValues.BLOCK_NUMBER_CREATED_IDX)] = blockNumber;\n            //infoValues[uint256(DigiOptionsLib.InfoValues.TIMESTAMP_MARKET_CREATED_IDX)] // keep timestampMarketsCreated\n            //infoValues[uint256(DigiOptionsLib.InfoValues.OFFER_MAX_BLOCKS_INTO_FUTURE_IDX)] // keep offerMaxBlocksInto_future\n            //infoValues[uint256(DigiOptionsLib.InfoValues.PAYOUT_PER_NANO_OPTION_EXP_IDX)] // keep payoutPerNanoOption\n            infoValues[uint256(DigiOptionsLib.InfoValues.EXISTING_MARKETS_IDX)] = existingMarkets;\n        }\n\n        return infoValues;\n    }\n\n    function getMarketListerInfo(\n    )\n        external\n        view\n        returns (uint256[] memory listerValues, SignerData[] memory signerDataList)\n    {\n        listerValues = new uint[](uint256(DigiOptionsLib.InfoLister.MAX));\n\n        listerValues[uint256(DigiOptionsLib.InfoLister.VERSION_MARKET_LISTER_IDX)] = VERSION;\n        listerValues[uint256(DigiOptionsLib.InfoLister.OWNER_IDX)] = uint256(uint160(owner));\n        listerValues[uint256(DigiOptionsLib.InfoLister.TRANSACTION_FEE_TOTAL_MAX_IDX)] = transactionFeeTotalMax;\n        listerValues[uint256(DigiOptionsLib.InfoLister.TRANSACTION_FEE0_MIN_IDX)] = transactionFee0Min;\n        listerValues[uint256(DigiOptionsLib.InfoLister.TRANSACTION_FEE1_MIN_IDX)] = transactionFee1Min;\n        listerValues[uint256(DigiOptionsLib.InfoLister.TRANSACTION_FEE_SIGNER_MIN_IDX)] = transactionFeeSignerMin;\n        listerValues[uint256(DigiOptionsLib.InfoLister.OPEN_DELAY_SECONDS_IDX)] = uint256(openDelaySeconds);\n\n        uint256 numEntries = signerMapNumEntries;\n        signerDataList = new SignerData[](numEntries);\n\n        address signerAddr = signerAddrFirst;\n        uint256 idx;\n        for (idx=0 ; idx < numEntries ; idx++){\n\n            signerDataList[idx] = SignerData({\n                signerAddr: signerAddr,\n                value: signerEntriesMap[signerAddr].value\n            });\n            // move on with next entry\n            signerAddr = signerEntriesMap[signerAddr].addrNext;\n        }\n\n        return (listerValues, signerDataList);\n    }\n\n    function getMarketDataByMarketHash (\n        address addr, // marketData.userState for this address\n        bytes32 marketHash\n    )\n        public\n        view\n        override\n        virtual\n        returns (DigiOptionsLib.MarketData memory marketData)\n    {\n        marketData = digiOptionsMarkets.getMarketDataByMarketHash(addr, marketHash);\n        // override testMarket\n        marketData.testMarket = isTestMarket[marketHash];\n    }\n\n    function getMarketDataListByMarketKeys (\n        address addr, // marketData.userState for this address\n        bytes32[] calldata marketKeys // marketsContract uses marketHash / marketListerContract uses baseMarketHash\n    )\n        external\n        view\n        override\n        virtual\n        returns (DigiOptionsLib.MarketData[] memory marketDataList)\n    {\n        marketDataList = new DigiOptionsLib.MarketData[](marketKeys.length);\n        uint256 idx;\n\n        for (idx= 0 ; idx < marketKeys.length ; idx++) {\n            marketDataList[idx] = getMarketDataByMarketHash(addr, marketsBest[marketKeys[idx]].marketHash);\n        }\n        return marketDataList;\n    }\n\n    function calcMarketInterval (\n        uint40 expirationDatetime\n    )\n        external\n        view\n        override\n        virtual\n        returns (uint8 interval)\n    {\n        return digiOptionsMarkets.calcMarketInterval(expirationDatetime);\n    }\n\n    /*\n    check, if a market might be possible to register (it does not need to be created for this\n    and it is not checked if creating is possible at all)\n    */\n    function registerMarketTest (\n        DigiOptionsLib.MarketBaseData memory marketBaseData\n    )\n        public\n        view\n        returns (bool registerPossible)\n    {\n\n        {\n            if (msg.sender == owner){\n                // always allow owner\n                return true;\n            }\n\n            if (\n                (signerEntriesMap[marketBaseData.signerAddr].value == 0) // TODO check bits!\n            ){\n                return false;\n            }\n        }\n\n        /* check fees and feeTaker0 */\n        if (\n            ((uint256(marketBaseData.transactionFee0)).add(uint256(marketBaseData.transactionFee1)).add(uint256(marketBaseData.transactionFeeSigner)) <= transactionFeeTotalMax) &&\n            (marketBaseData.transactionFee0 >= transactionFee0Min) &&\n            (marketBaseData.transactionFee1 >= transactionFee1Min) &&\n            (marketBaseData.transactionFeeSigner >= transactionFeeSignerMin) &&\n            (marketBaseData.feeTaker0 == owner)\n        ){\n            return true;\n        }\n\n        return false;\n    }\n\n    /*\n        This is just a convenient wrapper for both, creating and registering a market.\n        Remember you can always do this in two transactions and just use this contract\n        for registration.\n    */\n    function createMarket (\n        DigiOptionsLib.MarketBaseData memory marketBaseData,\n        bool testMarket,\n        FactsignerVerify.Signature memory signature\n    )\n        public // this should be external (see https://github.com/ethereum/solidity/issues/5479)\n        override\n        returns (bytes32 marketHash)\n    {\n        require (registerMarketTest(marketBaseData), 'register not possible');\n        marketHash = digiOptionsMarkets.createMarket(\n            marketBaseData,\n            testMarket,\n            signature\n        );\n        registerMarketIntern (\n            marketBaseData,\n            marketHash,\n            testMarket\n        );\n        return marketHash;\n    }\n\n    function registerMarket (\n        bytes32 marketHash,\n        bool testMarket\n    )\n        public\n    {\n        DigiOptionsLib.MarketBaseData memory marketBaseData = digiOptionsMarkets.getMarketBaseDataByMarketHash(marketHash);\n\n        /* check that the market exists */\n        assert(marketBaseData.expirationDatetime != 0);\n\n        require (registerMarketTest(marketBaseData), 'register not possible');\n        registerMarketIntern(\n            marketBaseData,\n            marketHash,\n            testMarket\n        );\n    }\n\n    function registerMarketIntern (\n        DigiOptionsLib.MarketBaseData memory marketBaseData,\n        bytes32 marketHash,\n        bool testMarket\n    )\n        internal\n    {\n        bytes32 baseMarketHash = DigiOptionsLib.calcBaseMarketHash(marketBaseData);\n\n        MarketBest storage marketBest = marketsBest[baseMarketHash];\n\n        if (marketBest.marketHash == 0) {\n            // does not yet exist\n\n            uint40 openTime = uint40((msg.sender == owner)? 0 : block.timestamp + openDelaySeconds);\n            marketsBest[baseMarketHash] = MarketBest(\n                {\n                marketHash: marketHash,\n                transactionFee0: marketBaseData.transactionFee0,\n                openTime: openTime\n                }\n            );\n\n            if (msg.sender == owner) {\n                isTestMarket[marketHash] = testMarket;\n            }\n\n            uint256 existingMarketsBit = (1 << uint256(marketBaseData.marketInterval)) << (marketBaseData.marketCategory * 8);\n            if (existingMarkets & existingMarketsBit == 0) {\n                existingMarkets = existingMarkets | existingMarketsBit;\n            }\n\n            uint8 marketIntervalForEventFilter;\n            if ((marketBaseData.config & uint8(FactsignerDefines.ConfigMask.ConfigIntervalTypeIsUsedMask) != 0)) {\n                /* interval used */\n                marketIntervalForEventFilter = marketBaseData.marketInterval;\n            } else {\n                /* interval unused */\n                marketIntervalForEventFilter = DigiOptionsLib.calcMarketInterval(marketBaseData.expirationDatetime);\n            }\n\n            // emit only once for each market (even if it will be replaced later)\n            emit MarketCreateLister(\n                baseMarketHash, // marketKey\n                ((marketBaseData.expirationDatetime/DigiOptionsLib.getDivider(marketIntervalForEventFilter)) << 8) + marketIntervalForEventFilter,\n                marketBaseData.expirationDatetime,\n                marketBaseData.marketInterval,\n                marketBaseData.marketCategory,\n                openTime,\n                marketBaseData.underlyingString\n            );\n            return;\n        }\n        if (\n            (marketBaseData.transactionFee0 > marketBest.transactionFee0) &&\n            (block.timestamp < marketBest.openTime)\n        ){\n            marketBest.marketHash = marketHash;\n            marketBest.transactionFee0 = marketBaseData.transactionFee0;\n        }\n    }\n\n    function setTestMarket (\n        bytes32 marketHash,\n        bool testMarket\n    )\n        public\n        onlyOwner\n    {\n        isTestMarket[marketHash] = testMarket;\n    }\n\n    /*\n    function setOpenDelaySeconds (\n        uint16 openDelaySeconds_\n    )\n        public\n        onlyOwner\n    {\n        if (openDelaySeconds_ > 0) {\n            openDelaySeconds = openDelaySeconds_;\n        }\n    }\n    */\n\n    /*\n    function setTransactionFeeTotalMax (\n        uint64 transactionFeeTotalMax_\n    )\n        public\n        onlyOwner\n    {\n        transactionFeeTotalMax = transactionFeeTotalMax_;\n    }\n    */\n\n    function setSigner (\n        address signerAddr,\n        uint256 value\n    )\n        public\n        onlyOwner\n    {\n        if (signerEntriesMap[signerAddr].exists){\n            // just modify value\n            signerEntriesMap[signerAddr].value = value;\n            return;\n        }\n\n        // add new entry at the head of the list\n        address addrTmp = signerAddrFirst;\n        signerEntriesMap[signerAddr] = SignerListEntry({\n            value: value,\n            addrNext: addrTmp,\n            exists: true\n        });\n        signerAddrFirst = signerAddr;\n        signerMapNumEntries = signerMapNumEntries + 1;\n    }\n}\n",
		"./DigiOptionsBaseInterface.sol": "/*\n freedex-protocol / User Driven Option Markets Contract used by https://www.digioptions.com\n\n Base data structures and the interface functions that\n are implemented by both contracts (DigiOptionsMarkets and\n DigioptionsMarketLister)\n\n Public repository:\n https://github.com/berlincode/digioptions-contracts.js\n\n elastic.code@gmail.com\n mail@digioptions.com\n\n SPDX-License-Identifier: MIT\n\n MIT License\n\n Copyright (c) digioptions.com (https://www.digioptions.com)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n*/\n\npragma solidity >=0.7.0;\npragma experimental ABIEncoderV2;\n\nimport \"factsigner/contracts/FactsignerDefines.sol\";\nimport \"factsigner/contracts/FactsignerVerify.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"./DigiOptionsLib.sol\";\n\nabstract contract DigiOptionsBaseInterface {\n\n    function getContractInfo (\n    )\n        external\n        virtual\n        returns (uint256[] memory contractInfoValues);\n\n    function getMarketDataByMarketHash (\n        address addr, // marketData.userState for this address\n        bytes32 marketHash\n    )\n        public\n        view\n        virtual\n        returns (DigiOptionsLib.MarketData memory marketData);\n\n    function getMarketDataListByMarketKeys (\n        address addr, // marketData.userState for this address\n        bytes32[] calldata marketKeys // marketsContract uses marketHash / marketListerContract uses baseMarketHash\n    )\n        external\n        view\n        virtual\n        returns (DigiOptionsLib.MarketData[] memory marketDataList);\n\n    // TODO implement createMarketTest\n\n    function createMarket (\n        DigiOptionsLib.MarketBaseData memory marketBaseData,\n        bool testMarket,\n        FactsignerVerify.Signature memory signature\n    )\n        public\n        virtual\n        returns (bytes32 marketHash);\n\n    function calcMarketInterval (\n        uint40 expirationDatetime\n    )\n        external\n        view\n        virtual\n        returns (uint8 interval);\n\n}\n",
		"factsigner/contracts/FactsignerDefines.sol": "/*\n Contract defines for https://www.factsigner.com\n\n Public repository:\n https://github.com/berlincode/factsigner\n\n Version 7.0.0\n\n SPDX-License-Identifier: MIT\n\n MIT License\n\n Copyright (c) factsigner.com (https://www.factsigner.com)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n*/\n\npragma solidity >=0.7.0;\n\nlibrary FactsignerDefines\n{\n    // TODO we use a enum here as a hack until\n    // https://github.com/ethereum/solidity/issues/1290 is solved\n    enum ConfigMask {\n        ConfigMaskDummy0,\n        ConfigMarketTypeIsStrikedMask, // = 1\n        ConfigMaskDummy2,\n        ConfigMaskDummy3,\n        ConfigIntervalTypeIsUsedMask // = 4\n    }\n\n    enum SettlementType {\n        FINAL, // = 0\n        PRELIMINARY_FIRST // = 1\n        //PRELIMINARY_MAX // = 65535\n    }\n\n    enum MarketInterval {\n        NONE, // = 0\n        // the following constants are just proposed assignments\n        YEARLY, // = 1\n        QUATERLY, // 2\n        MONTHLY, // = 3\n        WEEKLY, // = 4\n        DAILY, // = 5\n        HOURLY, // = 6\n        SHORT_TERM // = 7\n    }\n\n}\n",
		"factsigner/contracts/FactsignerVerify.sol": "/*\n Signature validation for https://www.factsigner.com\n\n Public repository:\n https://github.com/berlincode/factsigner\n\n Version 7.0.0\n\n SPDX-License-Identifier: MIT\n\n MIT License\n\n Copyright (c) factsigner.com (https://www.factsigner.com)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n*/\n\npragma solidity >=0.7.0;\n\nlibrary FactsignerVerify {\n\n    struct Signature {\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n    }\n\n    bytes constant factsignerPrefix = \"\\x19Factsigner Signed Message:\\n32\";\n    function verifyFactsignerMessage(\n        bytes32 message,\n        Signature memory signature\n    ) internal pure returns (address)\n    {\n        bytes32 prefixedHash = keccak256(\n            abi.encodePacked(\n                factsignerPrefix,\n                message\n            )\n        );\n        address signer = ecrecover(\n            prefixedHash,\n            signature.v,\n            signature.r,\n            signature.s\n        );\n        return signer;\n    }\n}\n",
		"@openzeppelin/contracts/math/SafeMath.sol": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n",
		"./DigiOptionsLib.sol": "/*\n\n Public repository:\n https://github.com/berlincode/digioptions-contracts.js\n\n elastic.code@gmail.com\n mail@digioptions.com\n\n SPDX-License-Identifier: MIT\n\n MIT License\n\n Copyright (c) digioptions.com (https://www.digioptions.com)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n*/\n\npragma solidity >=0.7.0;\n\nimport \"factsigner/contracts/FactsignerDefines.sol\";\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n//import \"@openzeppelin/contracts/math/SignedSafeMath.sol\";\n\n\nlibrary DigiOptionsLib {\n    using SafeMath for uint256;\n\n    /*\n        For future updgrade we want getContractInfo() to remain its signature('getContractInfo(uint256[]')\n        so we declared the return values as dynamic list. The meaning of each entry is defined via\n        follwing enum.\n    */\n    enum InfoValues { // rename InfoContract\n        CONTRACT_TYPE_IDX, // 0\n        VERSION_MARKET_LISTER_IDX, // 1\n        VERSION_MARKETS_IDX, // 2\n        DIGIOPTIONS_MARKETS_ADDR_IDX, // 3\n        BLOCK_NUMBER_CREATED_IDX, // 4\n        TIMESTAMP_MARKET_CREATED_IDX, // 5\n        OFFER_MAX_BLOCKS_INTO_FUTURE_IDX, // 6\n        ATOMIC_OPTION_PAYOUT_WEI_EXP_IDX, // 7\n        EXISTING_MARKETS_IDX, // 8\n\n        MAX // meta info\n    }\n\n    enum InfoLister {\n        VERSION_MARKET_LISTER_IDX, // 0\n        OWNER_IDX,\n        TRANSACTION_FEE_TOTAL_MAX_IDX,\n        TRANSACTION_FEE0_MIN_IDX,\n        TRANSACTION_FEE1_MIN_IDX,\n        TRANSACTION_FEE_SIGNER_MIN_IDX,\n        OPEN_DELAY_SECONDS_IDX,\n\n        MAX // meta info\n    }\n\n    enum ContractType {\n        UNKNOWN,\n        DIGIOPTIONSMARKETS, // == 1\n        DIGIOPTIONSMARKETLISTER // == 2\n    }\n\n    enum UserState {\n        NONE,\n        EXISTS,\n        PAYED_OUT\n    }\n\n    struct Signature {\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n    }\n\n    struct MarketBaseData {\n        /* constant core market data, part of marketHash calculation */\n\n        string underlyingString;\n        uint40 expirationDatetime; /* used for sorting contracts */\n        uint24 objectionPeriod; /* e.g. 3600 seconds */\n\n        uint8 config;\n        uint8 marketCategory;\n\n        uint8 baseUnitExp;\n        int8 ndigit;\n\n        address signerAddr; /* address used to check the signed result (e.g. of factsigner) */\n\n        uint8 marketInterval;\n        uint8 transactionFee0; /* fee in 1/100 per cent (payed by orderTaker) */\n        uint8 transactionFee1; /* fee in 1/100 per cent (payed by orderTaker) */\n        uint8 transactionFeeSigner; /* fee in 1/100 per cent (payed by orderTaker) */\n        address feeTaker0;\n        address feeTaker1;\n        int128[] strikes;\n    }\n\n    struct MarketState {\n        /* winningOptionID is only valid if settled == true */\n        uint128 fee; // total payed fee (for all fee takers)\n        uint16 winningOptionID;\n        bool settled;\n    }\n\n    struct MarketData {\n        MarketBaseData marketBaseData;\n        MarketState marketState;\n        bytes32 marketHash;\n        UserState userState;\n        bool testMarket; // only used by MarketLister\n    }\n\n\n// TODO remove long term? (and add 2-year?)\n// TODO remove uint8() conversion\n// TODO time offset between marketsContract and marketListerContract?\n\n    /* until const arrays are supported in solidity we use our custom function */\n    uint256 constant DIVIDER_ENTRY_BYTES = 6;\n    bytes constant DIVIDER_TABLE = \"\\\n\\x00\\x00\\x00\\x00\\x00\\x00\\\n\\x00\\x00\\x00\\xfa\\x7d\\x00\\\n\\x00\\x00\\x00\\x3b\\x53\\x80\\\n\\x00\\x00\\x00\\x0a\\x8c\\x00\\\n\\x00\\x00\\x00\\x01\\xfa\\x40\\\n\\x00\\x00\\x00\\x00\\x1c\\x20\\\n\\x00\\x00\\x00\\x00\\x00\\x00\\\n\";\n\n    function getDivider(\n        uint256 calculatedMarketInterval\n    )\n        internal\n        pure\n        returns (uint48)\n    {\n        bytes memory table = DIVIDER_TABLE;\n        uint offset = (calculatedMarketInterval + 1) * DIVIDER_ENTRY_BYTES;\n        uint48 value;\n        assembly {\n            value := mload(add(table, offset))\n        }\n\n        return value;\n    }\n\n\n    // TODO this is only 'view' and not internal because of block.timestamp - maybe change that\n    function calcMarketInterval (\n        uint40 expirationDatetime\n    )\n        internal\n        view\n        returns (uint8 interval)\n    {\n        uint8 marketInterval;\n        uint256 secondsUntilExpiration = uint256(expirationDatetime).sub(uint256(block.timestamp));\n        // TODO > or >= ?\n        require(secondsUntilExpiration < 730 * 24 * 60 * 60, \"too far in the future\");\n        if (secondsUntilExpiration > 45 * 24 * 60 * 60) // > 45 days\n            marketInterval = uint8(FactsignerDefines.MarketInterval.YEARLY);\n        else if (secondsUntilExpiration > 8 * 24 * 60 * 60) // > 8 days\n            marketInterval = uint8(FactsignerDefines.MarketInterval.MONTHLY);\n        else if (secondsUntilExpiration > 36 * 60 * 60) // > 36 hours\n            marketInterval = uint8(FactsignerDefines.MarketInterval.WEEKLY);\n        else if (secondsUntilExpiration > 2 * 60 * 60) // > 2 hours\n            marketInterval = uint8(FactsignerDefines.MarketInterval.DAILY);\n        else if (secondsUntilExpiration > 15 * 60) // > 15 min\n            marketInterval = uint8(FactsignerDefines.MarketInterval.HOURLY);\n        else\n            marketInterval = uint8(FactsignerDefines.MarketInterval.SHORT_TERM);\n\n        return marketInterval;\n    }\n\n    function calcFactHash (\n        DigiOptionsLib.MarketBaseData memory marketBaseData\n    )\n        internal\n        pure // this should be external (see https://github.com/ethereum/solidity/issues/5479)\n        returns (bytes32 factHash)\n    {\n        bytes memory data;\n        data = abi.encodePacked(\n            keccak256(abi.encodePacked(marketBaseData.underlyingString)), /* 'name' utf8 encoded */\n            marketBaseData.expirationDatetime, /* 'settlement' unix epoch seconds UTC */\n            marketBaseData.objectionPeriod, /* e.g. 3600 seconds */\n            marketBaseData.config,\n            marketBaseData.marketCategory,\n\n            marketBaseData.baseUnitExp, /* e.g. 18 -> baseUnit = 10**18 = 1000000000000000000 */\n            marketBaseData.ndigit /* 'ndigit' number of digits (may be negative) */\n        );\n        // if this is a named market we simply use strikes as factsigner's namedRanges\n        if ((marketBaseData.config & uint8(FactsignerDefines.ConfigMask.ConfigMarketTypeIsStrikedMask) == 0)) {\n            data = abi.encodePacked(\n                data,\n                marketBaseData.strikes\n            );\n        }\n        return keccak256(data);\n    }\n\n    function calcMarketHash (\n        DigiOptionsLib.MarketBaseData memory marketBaseData\n    )\n        internal\n        pure\n        returns (bytes32 marketHash)\n    {\n        bytes memory data;\n        data = abi.encodePacked(\n            // TODO from facthash?\n            keccak256(abi.encodePacked(marketBaseData.underlyingString)), /* 'name' utf8 encoded */\n            marketBaseData.expirationDatetime, /* 'settlement' unix epoch seconds UTC */\n            marketBaseData.objectionPeriod, /* e.g. 3600 seconds */\n            marketBaseData.config,\n            marketBaseData.marketCategory,\n\n            marketBaseData.baseUnitExp, /* e.g. 18 -> baseUnit = 10**18 = 1000000000000000000 */\n            marketBaseData.ndigit, /* 'ndigit' number of digits (may be negative) */\n\n            marketBaseData.marketInterval,\n            marketBaseData.feeTaker0,\n            marketBaseData.feeTaker1,\n            marketBaseData.signerAddr /* address used to check the signed result (e.g. of factsigner) */\n        );\n        data = abi.encodePacked(\n            data,\n            marketBaseData.transactionFee0,\n            marketBaseData.transactionFee1,\n            marketBaseData.transactionFeeSigner,\n            marketBaseData.strikes\n        );\n        return keccak256(data);\n    }\n\n    function calcBaseMarketHash (\n        MarketBaseData memory marketBaseData\n    )\n        internal\n        pure\n        returns (bytes32 baseMarketHash)\n    {\n        /* baseMarketHash is similar to marketHash but does not contain all elements. It's basically a factHash with added marketInterval */\n        bytes memory data;\n        data = abi.encodePacked(\n            keccak256(abi.encodePacked(marketBaseData.underlyingString)), /* 'name' utf8 encoded */\n            marketBaseData.expirationDatetime, /* 'settlement' unix epoch seconds UTC */\n            marketBaseData.objectionPeriod, /* e.g. 3600 seconds */\n            marketBaseData.config,\n            marketBaseData.marketCategory,\n\n            marketBaseData.baseUnitExp, /* e.g. 18 -> baseUnit = 10**18 = 1000000000000000000 */\n            marketBaseData.ndigit, /* 'ndigit' number of digits (may be negative) */\n\n            marketBaseData.marketInterval,\n\n            marketBaseData.signerAddr\n        );\n        // if this is a named market we simply use strikes as factsigner's namedRanges\n        if ((marketBaseData.config & uint8(FactsignerDefines.ConfigMask.ConfigMarketTypeIsStrikedMask) == 0)) {\n            data = abi.encodePacked(\n                data,\n                marketBaseData.strikes\n            );\n        }\n        return keccak256(data);\n\n    }\n\n\n    bytes constant OFFER_PREFIX = \"\\x19Ethereum Signed Message:\\n32\"; // TODO\n    function verifyOffer(\n        bytes32 message,\n        Signature memory signature\n    )\n        internal\n        pure\n        returns (address addr)\n    {\n        bytes32 prefixedHash = keccak256(\n            abi.encodePacked(\n                OFFER_PREFIX,\n                message\n            )\n        );\n        address signer = ecrecover(\n            prefixedHash,\n            signature.v,\n            signature.r,\n            signature.s\n        );\n        return signer;\n    }\n}\n",
		"./DigiOptionsMarkets.sol": "/*\n freedex-protocol / User Driven Option Markets Contract used by https://www.digioptions.com\n\n Designed to work with signatures from [www.factsigner.com](https://www.factsigner.com)\n\n Public repository:\n https://github.com/berlincode/digioptions-contracts.js\n\n elastic.code@gmail.com\n mail@digioptions.com\n\n SPDX-License-Identifier: MIT\n\n MIT License\n\n Copyright (c) digioptions.com (https://www.digioptions.com)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n*/\n\npragma solidity >=0.7.0;\npragma experimental ABIEncoderV2;\n\nimport \"./DigiOptionsBaseInterface.sol\";\nimport \"./DigiOptionsLib.sol\";\nimport \"./SafeCast.sol\";\nimport \"factsigner/contracts/FactsignerDefines.sol\";\nimport \"factsigner/contracts/FactsignerVerify.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/math/SignedSafeMath.sol\";\n\n\ncontract DigiOptionsMarkets is DigiOptionsBaseInterface {\n    using SafeCast for int256;\n    using SafeCast for uint256;\n    using SafeCast for int128;\n    using SafeCast for uint128;\n    using SafeMath for uint256;\n    using SignedSafeMath for int256;\n\n    uint256 constant private VERSION = (\n        (0 << 32) + /* major */\n        (53 << 16) + /* minor */\n        0 /* bugfix */\n    );\n    uint256 constant private OFFER_MAX_BLOCKS_INTO_FUTURE = 12; // increase for e.g. thundercore\n\n    // each atomic option is worth 10**9 = 1000000000 wei in case of win\n    uint256 constant private ATOMIC_OPTION_PAYOUT_WEI_EXP = 9;\n    int256 constant private ATOMIC_OPTION_PAYOUT_WEI = int256(uint256(10)**ATOMIC_OPTION_PAYOUT_WEI_EXP);\n\n    uint8 constant private RANGESTATE_NOT_USED = 0;\n    uint8 constant private RANGESTATE_TRADED = 1;\n    uint8 constant private RANGESTATE_PAYED_OUT = 2;\n\n    int256 constant private INT256_MAX = int256(~(uint256(1) << 255));\n\n    struct Position {\n        int128 value;\n        uint8 rangeState;\n    }\n\n    struct Market {\n        DigiOptionsLib.MarketState marketState;\n        DigiOptionsLib.MarketBaseData marketBaseData;\n        mapping(address => mapping(uint256 => Position)) positions; // position mapping for each user\n\n        mapping(bytes32 => uint256)  offersAccepted; // remember how many options from an offer are already taken\n    }\n\n    struct OrderOffer {\n        bytes32 marketHash;\n        uint16 optionID;\n        bool buy; // does the offer owner want to buy or sell options\n        uint256 pricePerOption;\n        uint256 size;\n        uint256 offerID;\n        uint256 blockExpires;\n        address offerOwner;\n    }\n\n    struct OrderOfferSigned {\n        OrderOffer orderOffer;\n        DigiOptionsLib.Signature signature;\n    }\n\n    /* variables */\n    uint256 private timestamp;\n    uint256 private blockNumber;\n    uint256 private existingMarkets; /* one bit for each marketCategory and marketInterval */\n\n    mapping(address => uint256) internal liquidityUser;\n    mapping(bytes32 => Market) internal markets;\n\n    mapping(address => uint32) internal userMarketsIdx;\n\n    event MarketCreate(\n        bytes32 marketKey, /* marketsContract stores marketHash ; marketListerContract stores baseMarketHash */\n        uint48 indexed expirationDatetimeFilter,\n        uint40 expirationDatetime,\n        uint8 indexed marketInterval,\n        uint8 indexed marketCategory,\n        string underlyingString\n    );\n    event MarketSettlement(\n        bytes32 marketHash\n    );\n    // this may result in liquidity change\n    event LiquidityAddWithdraw(address indexed addr, uint256 datetime, int256 amount);\n    event PositionChange(\n        // TODO optimize order for gas costs possible?\n        uint256 indexed buyer,\n        uint256 indexed seller,\n        bytes32 indexed marketHash,\n        uint256 datetime, // TODO we might remove this and use info from block\n        uint16 optionID,\n        uint256 pricePerOption,\n        uint256 size,\n        bytes32 offerHash\n    );\n\n    /* This is the constructor */\n    constructor ()\n    {\n        blockNumber = block.number;\n        timestamp = block.timestamp;\n    }\n\n    /* TODO re-enabled after 0x-tools support solc-0.6.0\n    // default fallback\n    receive ()\n        external\n        payable\n    {\n        liquidityAdd();\n    }\n    */\n\n    function getContractInfo (\n    )\n        external\n        override\n        virtual\n        returns (uint256[] memory contractInfoValues)\n    {\n        uint256[] memory infoValues = new uint[](uint256(DigiOptionsLib.InfoValues.MAX));\n\n        infoValues[uint256(DigiOptionsLib.InfoValues.CONTRACT_TYPE_IDX)] = uint256(DigiOptionsLib.ContractType.DIGIOPTIONSMARKETS);\n        infoValues[uint256(DigiOptionsLib.InfoValues.VERSION_MARKET_LISTER_IDX)] = 0; // versionMarketLister\n        infoValues[uint256(DigiOptionsLib.InfoValues.VERSION_MARKETS_IDX)] = VERSION; // versionMarkets\n        infoValues[uint256(DigiOptionsLib.InfoValues.DIGIOPTIONS_MARKETS_ADDR_IDX)] = uint256(uint160(address(this))); // digiOptionsMarketsAddr\n        infoValues[uint256(DigiOptionsLib.InfoValues.BLOCK_NUMBER_CREATED_IDX)] = blockNumber; // blockNumberCreated\n        infoValues[uint256(DigiOptionsLib.InfoValues.TIMESTAMP_MARKET_CREATED_IDX)] = timestamp; // timestampMarketsCreated\n        infoValues[uint256(DigiOptionsLib.InfoValues.OFFER_MAX_BLOCKS_INTO_FUTURE_IDX)] = OFFER_MAX_BLOCKS_INTO_FUTURE;\n        infoValues[uint256(DigiOptionsLib.InfoValues.ATOMIC_OPTION_PAYOUT_WEI_EXP_IDX)] = ATOMIC_OPTION_PAYOUT_WEI_EXP;\n        infoValues[uint256(DigiOptionsLib.InfoValues.EXISTING_MARKETS_IDX)] = existingMarkets;\n\n        return infoValues;\n    }\n\n    function liquidityGet()\n        public\n        view\n        returns (uint256 liquidity)\n    {\n        return liquidityUser[msg.sender];\n    }\n\n    function liquidityWithdraw (uint256 amount) external {\n        require (amount <= liquidityUser[msg.sender], \"Not enough liquidity.\");\n\n        /* Remember to reduce the liquidity BEFORE */\n        /* sending to prevent re-entrancy attacks */\n        liquidityUser[msg.sender] = liquidityUser[msg.sender].sub(amount);\n        payable(msg.sender).transfer(amount);\n        emit LiquidityAddWithdraw(msg.sender, block.timestamp, -int256(amount));\n    }\n\n    /* returns all relevant market data - if marketHash does not exist marketBaseData.expirationDatetime is 0*/\n    function getMarketDataByMarketHash (\n        address addr, // marketData.userState for this address\n        bytes32 marketHash\n    )\n        public\n        view\n        override\n        virtual\n        returns (DigiOptionsLib.MarketData memory marketData)\n    {\n        Market storage market = markets[marketHash];\n        DigiOptionsLib.MarketBaseData memory marketBaseData = market.marketBaseData;\n        DigiOptionsLib.MarketState memory marketState = market.marketState;\n\n        return DigiOptionsLib.MarketData({\n            marketBaseData: marketBaseData,\n            marketState: marketState,\n            marketHash: marketHash,\n            userState: getUserState(addr, market),\n            testMarket: false // only used by MarketLister\n        });\n    }\n\n    function getMarketBaseDataByMarketHash (bytes32 marketHash)\n        public\n        view\n        returns (DigiOptionsLib.MarketBaseData memory marketBaseData)\n    {\n        Market storage market = markets[marketHash];\n        return market.marketBaseData;\n    }\n\n    function getMarketDataListByMarketKeys (\n        address addr, // marketData.userState for this address\n        bytes32[] calldata marketKeys // marketsContract uses marketHash / marketListerContract uses baseMarketHash\n    )\n        external\n        view\n        override\n        virtual\n        returns (DigiOptionsLib.MarketData[] memory marketDataList)\n    {\n        marketDataList = new DigiOptionsLib.MarketData[](marketKeys.length);\n        uint256 idx;\n\n        for (idx= 0 ; idx < marketKeys.length ; idx++) {\n            marketDataList[idx] = getMarketDataByMarketHash(addr, marketKeys[idx]);\n        }\n        return marketDataList;\n    }\n\n    function calcMarketInterval (\n        uint40 expirationDatetime\n    )\n        external\n        view\n        override\n        virtual\n        returns (uint8 interval)\n    {\n        return DigiOptionsLib.calcMarketInterval(expirationDatetime);\n    }\n\n    function getUserState (\n        address addr,\n        Market storage market\n    )\n        internal\n        view\n        returns (DigiOptionsLib.UserState userState)\n    {\n        mapping(uint256 => Position) storage positions = market.positions[addr];\n\n        if (market.marketState.settled){\n            Position memory winningPosition = positions[market.marketState.winningOptionID];\n            if (\n                (winningPosition.rangeState == RANGESTATE_PAYED_OUT) ||\n                ((winningPosition.rangeState == RANGESTATE_TRADED) && (winningPosition.value == 0))  // TODO fixme == 0\n                ){\n                return DigiOptionsLib.UserState.PAYED_OUT;\n            }\n        }\n        // TODO for named markets one excess optionID is checked (which should not be a problem)\n        for (uint256 optionID = 0; optionID <= market.marketBaseData.strikes.length; optionID++) {\n            if (positions[optionID].rangeState > RANGESTATE_NOT_USED) {\n                return DigiOptionsLib.UserState.EXISTS;\n            }\n        }\n        return DigiOptionsLib.UserState.NONE;\n    }\n\n    function getLiquidityAndPositions (bytes32 marketHash)\n        external\n        view\n        returns (uint256 liquidity, Position[] memory positions, DigiOptionsLib.UserState userState)\n    {\n        Market storage market = markets[marketHash];\n        DigiOptionsLib.MarketBaseData memory marketBaseData = market.marketBaseData;\n\n        // return user's total contract liquidity and positions for selected market\n\n        // TODO for named markets one excess optionID is checked (which should not be a problem)\n        positions = new Position[](marketBaseData.strikes.length + 1);\n\n        for (uint256 optionID = 0; optionID <= marketBaseData.strikes.length; optionID++) {\n            positions[optionID] = market.positions[msg.sender][optionID];\n        }\n        return (\n            liquidityUser[msg.sender],\n            positions,\n            getUserState(msg.sender, market)\n        );\n    }\n\n    function liquidityAdd ()\n        public\n        payable\n    {\n        if (msg.value > 0) {\n            liquidityUser[msg.sender] = liquidityUser[msg.sender].add(msg.value);\n            emit LiquidityAddWithdraw(msg.sender, block.timestamp, int256(msg.value));\n        }\n    }\n\n    function liquidityAddFor (address user)\n        public\n        payable\n    {\n        if (msg.value > 0) {\n            liquidityUser[user] = liquidityUser[user].add(msg.value);\n            emit LiquidityAddWithdraw(user, block.timestamp, int256(msg.value));\n        }\n    }\n\n    function createMarket (\n        DigiOptionsLib.MarketBaseData memory marketBaseData,\n        bool testMarket,\n        FactsignerVerify.Signature memory signature\n    )\n        public // this should be external (see https://github.com/ethereum/solidity/issues/5479)\n        override\n        returns (bytes32 marketHash)\n    {\n        assert(marketBaseData.expirationDatetime != 0);\n\n        { // scope here to safe stack space\n        bytes32 factHash = DigiOptionsLib.calcFactHash(marketBaseData);\n        require(\n            FactsignerVerify.verifyFactsignerMessage(\n                factHash,\n                signature\n            ) == marketBaseData.signerAddr,\n            \"Signature invalid.\"\n        );\n\n        marketHash = DigiOptionsLib.calcMarketHash(marketBaseData);\n        }\n\n        /* Check that the market does not already exists */\n        if (markets[marketHash].marketBaseData.expirationDatetime != 0)\n            return marketHash;\n\n        assert(marketBaseData.baseUnitExp == 18); // TODO remove this in the future\n\n        assert(marketBaseData.marketCategory < 64); // limit marketCategory (for now)\n\n        //assert((uint256(marketBaseData.transactionFee0)).add(uint256(marketBaseData.transactionFee1)).add(uint256(marketBaseData.transactionFeeSigner)) <= 500);\n\n        uint256 optionID;\n        if ((marketBaseData.config & uint8(FactsignerDefines.ConfigMask.ConfigMarketTypeIsStrikedMask)) != 0) {\n            /* striked market */\n            /* check that we have at least one strike */\n            assert(marketBaseData.strikes.length > 0);\n            assert(marketBaseData.strikes.length < 32765); // our first optionID is 0\n\n            /* check strikes are ordered */\n            for (optionID = 1; optionID < marketBaseData.strikes.length; optionID++) {\n                assert(marketBaseData.strikes[optionID-1] < marketBaseData.strikes[optionID]);\n            }\n\n            /* check that the final settlement precision high enough for the supplied strikes */\n            assert(int16(uint16(marketBaseData.baseUnitExp)) >= marketBaseData.ndigit);\n            for (optionID = 0; optionID < marketBaseData.strikes.length; optionID++) {\n                assert((marketBaseData.strikes[optionID] % int256(10**uint256((int256(uint256(marketBaseData.baseUnitExp))-marketBaseData.ndigit)))) == 0);\n            }\n        } else {\n            /* named market */\n            /* check that we have at least two named ranges */\n            assert(marketBaseData.strikes.length > 1);\n            assert(marketBaseData.strikes.length <= 32765); // our first optionID is 0\n        }\n        assert(marketBaseData.marketCategory < 32); // limit marketCategory (for now)\n\n        uint256 existingMarketsBit = (1 << uint256(marketBaseData.marketInterval)) << (marketBaseData.marketCategory * 8);\n        if (existingMarkets & existingMarketsBit == 0) {\n            existingMarkets = existingMarkets | existingMarketsBit;\n        }\n\n        uint8 marketIntervalForEventFilter = DigiOptionsLib.calcMarketInterval(marketBaseData.expirationDatetime);\n        if ((marketBaseData.config & uint8(FactsignerDefines.ConfigMask.ConfigIntervalTypeIsUsedMask) != 0)) {\n            /* interval used */\n            assert(marketBaseData.marketInterval == marketIntervalForEventFilter);\n        } else {\n            /* interval unused */\n            assert(marketBaseData.marketInterval == uint8(FactsignerDefines.MarketInterval.NONE));\n        }\n\n        markets[marketHash].marketBaseData = marketBaseData;\n\n\n        emit MarketCreate(\n            marketHash, // marketKey\n            ((marketBaseData.expirationDatetime/DigiOptionsLib.getDivider(marketIntervalForEventFilter)) << 8) + marketIntervalForEventFilter,\n            marketBaseData.expirationDatetime,\n            marketBaseData.marketInterval,\n            marketBaseData.marketCategory,\n            marketBaseData.underlyingString\n        );\n        return marketHash;\n    }\n\n    function settlement (\n        bytes32 marketHash, /* market to settle */\n        FactsignerVerify.Signature memory signature,\n        int256 value,\n        address[] memory users,\n        bytes32[] memory offerHash\n    )\n        public // this should be external (see https://github.com/ethereum/solidity/issues/5479)\n    {\n        Market storage market = markets[marketHash];\n\n        /* anybody with access to the signed value (from signerAddr) can settle the market */\n\n        require(\n            FactsignerVerify.verifyFactsignerMessage(\n                keccak256(\n                    abi.encodePacked(\n                        DigiOptionsLib.calcFactHash(market.marketBaseData),\n                        value,\n                        uint16(FactsignerDefines.SettlementType.FINAL)\n                    )\n                ),\n                signature\n            ) == market.marketBaseData.signerAddr,\n            \"Signature invalid.\"\n        );\n\n        // just return if already settled\n        if (market.marketState.settled)\n            return;\n\n        uint256 winningOptionID;\n        uint256 optionID;\n        if ((market.marketBaseData.config & uint8(FactsignerDefines.ConfigMask.ConfigMarketTypeIsStrikedMask)) != 0) {\n            /* striked market */\n            winningOptionID = market.marketBaseData.strikes.length;\n            for (optionID = 0; optionID < market.marketBaseData.strikes.length; optionID++) {\n                if (value < market.marketBaseData.strikes[optionID]) {\n                    winningOptionID = optionID;\n                    break;\n                }\n            }\n        } else {\n            /* named market */\n            winningOptionID = 0; // default in case nothing matches\n            for (optionID = 0; optionID < market.marketBaseData.strikes.length; optionID++) {\n                if (value == market.marketBaseData.strikes[optionID]) {\n                    winningOptionID = optionID;\n                    break;\n                }\n            }\n        }\n        // TODO one transaction\n        market.marketState.winningOptionID = uint16(winningOptionID);\n        market.marketState.settled = true;\n\n        uint256 feeSum = uint256(market.marketBaseData.transactionFee0).add(uint256(market.marketBaseData.transactionFee1)).add(uint256(market.marketBaseData.transactionFeeSigner));\n        uint256 feePart = uint256(market.marketState.fee) / feeSum;\n        liquidityUser[market.marketBaseData.feeTaker0] = liquidityUser[market.marketBaseData.feeTaker0].add(feePart.mul(market.marketBaseData.transactionFee0));\n        liquidityUser[market.marketBaseData.feeTaker1] = liquidityUser[market.marketBaseData.feeTaker1].add(feePart.mul(market.marketBaseData.transactionFee1));\n        liquidityUser[market.marketBaseData.signerAddr] = liquidityUser[market.marketBaseData.signerAddr].add(feePart.mul(market.marketBaseData.transactionFeeSigner));\n\n        emit MarketSettlement(marketHash);\n\n        freeLiquidity(\n            marketHash,\n            users,\n            offerHash\n        );\n    }\n\n    function freeLiquidity(\n        bytes32 marketHash,\n        address[] memory users,\n        bytes32[] memory offerHash\n    )\n        public\n    {\n        Market storage market = markets[marketHash];\n\n        DigiOptionsLib.MarketState memory marketState = market.marketState;\n\n        // TODO fetch marketState once\n        uint16 winningOptionID = marketState.winningOptionID;\n        require(marketState.settled == true, \"Market not yet settled.\");\n\n        uint256 idx;\n        int256 minPosition;\n        for (idx = 0; idx < users.length; idx++) {\n\n            address user = users[idx];\n            //mapping(uint256 => Position) storage positions = market.positions[user];\n\n            if (getUserState(user, market) != DigiOptionsLib.UserState.PAYED_OUT) {\n\n                minPosition = getMinPosition(\n                    market,\n                    user\n                );\n\n                int256 pos = int256(market.positions[user][winningOptionID].value);\n                int256 size = pos.sub(minPosition);\n\n                market.positions[user][winningOptionID].rangeState = RANGESTATE_PAYED_OUT;\n\n                liquidityUser[user] = liquidityUser[user].add(size.mul(ATOMIC_OPTION_PAYOUT_WEI).castToUint());\n\n                // TODO a cheaper event would do too\n                if (pos >= 0) {\n                    emit PositionChange(\n                        //uint256(buyer) + uint256(market.userData[msg.sender].state),\n                        0, // indicates final payout\n                        uint256(uint160(user)),\n                        marketHash,\n                        block.timestamp,\n                        winningOptionID,\n                        uint256(ATOMIC_OPTION_PAYOUT_WEI),\n                        uint256(pos),\n                        0\n                    );\n                } else {\n                    emit PositionChange(\n                        //uint256(buyer) + uint256(market.userData[msg.sender].state),\n                        uint256(uint160(user)),\n                        0, // indicates final payout\n                        marketHash,\n                        block.timestamp,\n                        winningOptionID,\n                        uint256(ATOMIC_OPTION_PAYOUT_WEI),\n                        uint256(-pos),\n                        0\n                    );\n                }\n            }\n\n        }\n    }\n\n    function orderExecuteTest (\n        OrderOfferSigned memory orderOfferSigned,\n        uint256 sizeAccept // TODO rename to sizeAcceptMax?\n    )\n        public\n        view\n        returns (\n            uint256 sizeAcceptPossible,\n            bytes32 offerHash,\n            int256 liquidityOfferOwner, // only valid if sizeAcceptPossible > 0\n            int256 liquidityOfferTaker, // only valid if sizeAcceptPossible > 0\n            uint256 transactionFeeAmount // only valid if sizeAcceptPossible > 0\n        )\n    {\n\n        OrderOffer memory orderOffer = orderOfferSigned.orderOffer;\n        Market storage market = markets[orderOffer.marketHash];\n\n        offerHash = keccak256(\n            abi.encodePacked(\n                address(this), // this checks that the signature is valid only for this contract\n                orderOffer.marketHash,\n                orderOffer.optionID,\n                orderOffer.buy,\n                orderOffer.pricePerOption,\n                orderOffer.size,\n                orderOffer.offerID,\n                orderOffer.blockExpires,\n                orderOffer.offerOwner\n            )\n        );\n        if (!(\n                (DigiOptionsLib.verifyOffer(\n                    offerHash,\n                    orderOfferSigned.signature\n                ) == orderOffer.offerOwner)\n            )) {\n            sizeAccept = 0;\n            // TODO return immediately?\n        } else if (market.offersAccepted[offerHash].add(sizeAccept) > orderOffer.size) {\n            sizeAccept = orderOffer.size.sub(market.offersAccepted[offerHash]);\n        }\n\n        uint256 value = sizeAccept.mul(orderOffer.pricePerOption);\n\n        // TODO precalcuate sum of transactions fees\n        transactionFeeAmount = value.div(10000).mul(\n            uint256(market.marketBaseData.transactionFee0).add(uint256(market.marketBaseData.transactionFee1)).add(uint256(market.marketBaseData.transactionFeeSigner))\n        );\n\n        liquidityOfferOwner = getLiquidityAfterTrade(\n            market,\n            orderOffer.buy,\n            orderOffer,\n            orderOffer.offerOwner,\n            sizeAccept,\n            value\n        );\n        liquidityOfferTaker = getLiquidityAfterTrade(\n            market,\n            !orderOffer.buy,\n            orderOffer,\n            msg.sender,\n            sizeAccept,\n            value\n        ).sub(transactionFeeAmount.castToInt());\n\n        if (!(\n                (orderOffer.optionID <= market.marketBaseData.strikes.length) && // TODO depends on striked or named market?\n                (block.number <= orderOffer.blockExpires) &&\n                (block.number.add(OFFER_MAX_BLOCKS_INTO_FUTURE) >= orderOffer.blockExpires) &&\n                // offerTaker and offerOwner must not be the same (because liquidity is calculated seperately)\n                (orderOffer.offerOwner != msg.sender) &&\n                (liquidityOfferOwner >= int256(0)) &&\n                (liquidityOfferTaker >= int256(0))\n            )) {\n            sizeAccept = 0;\n        }\n        return (\n            sizeAccept,\n            offerHash,\n            liquidityOfferOwner, // only valid if sizeAcceptPossible > 0\n            liquidityOfferTaker, // only valid if sizeAcceptPossible > 0\n            transactionFeeAmount // only valid if sizeAcceptPossible > 0\n        );\n    }\n\n    function orderExecuteSingle (\n        OrderOfferSigned memory orderOfferSigned,\n        uint256 sizeAcceptMax /* maximum */\n    )\n        private\n        returns (uint256 sizeAcceptRemain)\n    {\n        OrderOffer memory orderOffer;\n\n        orderOffer = orderOfferSigned.orderOffer;\n        bytes32 offerHash;\n        uint256 sizeAcceptPossible;\n\n        Market storage market = markets[orderOffer.marketHash];\n\n        address buyer; // buys options / money giver\n        address seller; // sells options / money getter\n        if (orderOffer.buy) {\n            buyer = orderOffer.offerOwner;\n            seller = msg.sender;\n        } else {\n            buyer = msg.sender;\n            seller = orderOffer.offerOwner;\n        }\n\n        int256 liquidityOfferOwner; // only valid if sizeAcceptPossible > 0\n        int256 liquidityOfferTaker; // only valid if sizeAcceptPossible > 0\n        uint256 transactionFeeAmount; // only valid if sizeAcceptPossible > 0\n        (\n            sizeAcceptPossible,\n            offerHash,\n            liquidityOfferOwner, // only valid if sizeAcceptPossible > 0\n            liquidityOfferTaker, // only valid if sizeAcceptPossible > 0\n            transactionFeeAmount // only valid if sizeAcceptPossible > 0\n        ) = orderExecuteTest (\n            orderOfferSigned,\n            sizeAcceptMax\n        );\n        if (sizeAcceptPossible == 0) {\n            return sizeAcceptMax;\n        }\n\n        liquidityUser[orderOffer.offerOwner] = liquidityOfferOwner.castToUint();\n        liquidityUser[msg.sender] = liquidityOfferTaker.castToUint();\n        market.marketState.fee = uint256(market.marketState.fee).add(transactionFeeAmount).castToUint128();\n\n        {\n        // update positions\n        Position memory pos;\n        {\n            mapping(uint256 => Position) storage positions = market.positions[buyer];\n            pos = positions[orderOffer.optionID];\n            pos.rangeState = RANGESTATE_TRADED;\n            pos.value = int256(pos.value).add(int256(sizeAcceptPossible)).castToInt128();\n            positions[orderOffer.optionID] = pos;\n        }\n\n        {\n            mapping(uint256 => Position) storage positions = market.positions[seller];\n            pos = positions[orderOffer.optionID];\n            pos.value = int256(pos.value).sub(int256(sizeAcceptPossible)).castToInt128();\n            pos.rangeState = RANGESTATE_TRADED;\n            positions[orderOffer.optionID] = pos;\n        }\n        }\n\n        // remember that (some amount of) the offers is taken\n        market.offersAccepted[offerHash] = market.offersAccepted[offerHash].add(sizeAcceptPossible);\n\n        emit PositionChange(\n            //uint256(buyer) + uint256(market.userData[msg.sender].state),\n            uint256(uint160(buyer)),\n            uint256(uint160(seller)),\n            orderOffer.marketHash,\n            block.timestamp,\n            orderOffer.optionID,\n            orderOffer.pricePerOption,\n            sizeAcceptPossible,\n            offerHash\n        );\n\n        return sizeAcceptMax.sub(sizeAcceptPossible);\n    }\n\n    // OrderOfferSigned array should contain only sell orders or only buys orders for the same optionID and marketHash (not mixed)\n    function orderExecute (\n        OrderOfferSigned[] memory orderOfferSignedList,\n        uint256 sizeAcceptMax /* maximum for all supplied orderOfferSigned structs */\n    )\n        public // this should be external (see https://github.com/ethereum/solidity/issues/5479)\n    {\n        OrderOfferSigned memory orderOfferSigned;\n\n        for (uint256 orderOfferIdx=0; orderOfferIdx < orderOfferSignedList.length; orderOfferIdx++) {\n            orderOfferSigned = orderOfferSignedList[orderOfferIdx];\n\n            //Market storage market = markets[orderOfferSigned.orderOffer.marketHash];\n\n            sizeAcceptMax = orderExecuteSingle (\n                orderOfferSigned,\n                sizeAcceptMax\n            );\n        }\n    }\n\n    function getLiquidityAfterTrade(\n        Market storage market,\n        bool isBuyer,\n        OrderOffer memory orderOffer,\n        address userAddr,\n        uint256 sizeAccept,\n        uint256 value\n    )\n        internal\n        view\n        returns (int256 _liquidity)\n    {\n        int256 liquidity = liquidityUser[userAddr].castToInt();\n        int256 sizeAccept_;\n\n        if (! isBuyer) {\n            liquidity = liquidity.add(value.castToInt()); // seller gets money\n            sizeAccept_ = int256(0).sub(sizeAccept.castToInt());\n        } else {\n            liquidity = liquidity.sub(value.castToInt()); // buyer pays money\n            sizeAccept_ = sizeAccept.castToInt();\n        }\n\n        int256 minPositionBeforeTrade;\n        int256 minPositionAfterTrade;\n        (minPositionBeforeTrade, minPositionAfterTrade) = getMinPositionAfterTrade(\n            market,\n            userAddr,\n            orderOffer.optionID,\n            sizeAccept_\n        );\n\n        liquidity = liquidity.add((minPositionAfterTrade.sub(minPositionBeforeTrade)).mul(ATOMIC_OPTION_PAYOUT_WEI));\n\n        return liquidity;\n    }\n\n    function getMinPositionAfterTrade (\n        Market storage market,\n        address userAddr,\n        /* optional to calc the minimal position after a change */\n        uint16 optionID,\n        int256 positionChange\n    ) internal view\n        returns (int256 minPositionBeforeTrade_, int256 minPositionAfterTrade_)\n    {\n        int256 minPositionBeforeTrade = INT256_MAX;\n        int256 minPositionAfterTrade = INT256_MAX;\n\n        uint256 length = market.marketBaseData.strikes.length;\n        mapping(uint256 => Position) storage positions = market.positions[userAddr];\n        int256 position;\n        for (uint256 s = 0; s <= length; s++) {\n\n            position = positions[s].value;\n            if (position < minPositionBeforeTrade)\n                minPositionBeforeTrade = position;\n\n            if (s == optionID)\n                position = position.add(positionChange);\n\n            if (position < minPositionAfterTrade)\n                minPositionAfterTrade = position;\n        }\n        return (minPositionBeforeTrade, minPositionAfterTrade);\n    }\n\n    function getMinPosition (\n        Market storage market,\n        address userAddr\n    ) internal view\n        returns (int256 minPosition_)\n    {\n        int256 minPosition = INT256_MAX;\n\n        uint256 length = market.marketBaseData.strikes.length;\n        mapping(uint256 => Position) storage positions = market.positions[userAddr];\n        int256 position;\n        for (uint256 s = 0; s <= length; s++) {\n\n            position = positions[s].value;\n            if (position < minPosition)\n                minPosition = position;\n\n        }\n        return (minPosition);\n    }\n\n}\n",
		"./SafeCast.sol": "pragma solidity >=0.7.0;\n\n/*\n SPDX-License-Identifier: MIT\n*/\n\nlibrary SafeCast {\n    /**\n     * Cast unsigned a to signed a.\n     */\n    function castToInt(uint256 a) internal pure returns(int256) {\n        assert(a < (1 << 255));\n        return int(a);\n    }\n\n    /**\n     * Cast signed a to unsigned a.\n     */\n    function castToUint(int256 a) internal pure returns(uint256) {\n        assert(a >= 0);\n        return uint(a);\n    }\n\n    // TODO\n    function castToInt128(int256 a) internal pure returns(int128) {\n        assert(int128(a) == a);\n        return int128(a);\n    }\n\n    // TODO\n    function castToUint128(uint256 a) internal pure returns(uint128) {\n        assert(uint128(a) == a);\n        return uint128(a);\n    }\n}\n",
		"@openzeppelin/contracts/math/SignedSafeMath.sol": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\n/**\n * @title SignedSafeMath\n * @dev Signed math operations with safety checks that revert on error.\n */\nlibrary SignedSafeMath {\n    int256 constant private _INT256_MIN = -2**255;\n\n    /**\n     * @dev Returns the multiplication of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(int256 a, int256 b) internal pure returns (int256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        require(!(a == -1 && b == _INT256_MIN), \"SignedSafeMath: multiplication overflow\");\n\n        int256 c = a * b;\n        require(c / a == b, \"SignedSafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two signed integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(int256 a, int256 b) internal pure returns (int256) {\n        require(b != 0, \"SignedSafeMath: division by zero\");\n        require(!(b == -1 && a == _INT256_MIN), \"SignedSafeMath: division overflow\");\n\n        int256 c = a / b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a - b;\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \"SignedSafeMath: subtraction overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the addition of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a + b;\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \"SignedSafeMath: addition overflow\");\n\n        return c;\n    }\n}\n"
	},
	"compiler": {
		"name": "solc",
		"version": "0.7.6+commit.7338295f",
		"settings": {
			"remappings": [
				"factsigner=/home/ulf/digioptions/digioptions-contracts.js/node_modules/factsigner",
				"@openzeppelin/contracts=/home/ulf/digioptions/digioptions-contracts.js/node_modules/@openzeppelin/contracts"
			],
			"optimizer": {
				"enabled": true,
				"runs": 20000,
				"details": {
					"yul": true,
					"deduplicate": true,
					"cse": true,
					"constantOptimizer": true
				}
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap"
					]
				}
			}
		}
	},
	"chains": {}
}