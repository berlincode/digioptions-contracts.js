{
	"schemaVersion": "2.0.0",
	"contractName": "DigiOptionsMarketLister",
	"compilerOutput": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "contract DigiOptionsMarkets",
						"name": "addr",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "bytes32",
						"name": "marketKey",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "uint48",
						"name": "expirationDatetimeFilter",
						"type": "uint48"
					},
					{
						"indexed": false,
						"internalType": "uint40",
						"name": "expirationDatetime",
						"type": "uint40"
					},
					{
						"indexed": true,
						"internalType": "uint8",
						"name": "marketInterval",
						"type": "uint8"
					},
					{
						"indexed": true,
						"internalType": "uint8",
						"name": "marketCategory",
						"type": "uint8"
					},
					{
						"indexed": false,
						"internalType": "uint40",
						"name": "openTime",
						"type": "uint40"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "underlyingString",
						"type": "string"
					}
				],
				"name": "MarketCreateLister",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "uint40",
						"name": "expirationDatetime",
						"type": "uint40"
					}
				],
				"name": "calcMarketInterval",
				"outputs": [
					{
						"internalType": "uint8",
						"name": "interval",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "string",
								"name": "underlyingString",
								"type": "string"
							},
							{
								"internalType": "uint40",
								"name": "expirationDatetime",
								"type": "uint40"
							},
							{
								"internalType": "uint24",
								"name": "objectionPeriod",
								"type": "uint24"
							},
							{
								"internalType": "uint8",
								"name": "config",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "marketCategory",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "baseUnitExp",
								"type": "uint8"
							},
							{
								"internalType": "int8",
								"name": "ndigit",
								"type": "int8"
							},
							{
								"internalType": "address",
								"name": "signerAddr",
								"type": "address"
							},
							{
								"internalType": "uint8",
								"name": "marketInterval",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "transactionFee0",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "transactionFee1",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "transactionFeeSigner",
								"type": "uint8"
							},
							{
								"internalType": "address",
								"name": "feeTaker0",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "feeTaker1",
								"type": "address"
							},
							{
								"internalType": "int128[]",
								"name": "strikes",
								"type": "int128[]"
							}
						],
						"internalType": "struct DigiOptionsLib.MarketBaseData",
						"name": "marketBaseData",
						"type": "tuple"
					},
					{
						"internalType": "bool",
						"name": "testMarket",
						"type": "bool"
					},
					{
						"components": [
							{
								"internalType": "uint8",
								"name": "v",
								"type": "uint8"
							},
							{
								"internalType": "bytes32",
								"name": "r",
								"type": "bytes32"
							},
							{
								"internalType": "bytes32",
								"name": "s",
								"type": "bytes32"
							}
						],
						"internalType": "struct FactsignerVerify.Signature",
						"name": "signature",
						"type": "tuple"
					}
				],
				"name": "createMarket",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "marketHash",
						"type": "bytes32"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getContractInfo",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "contractInfoValues",
						"type": "uint256[]"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "addr",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "marketHash",
						"type": "bytes32"
					}
				],
				"name": "getMarketDataByMarketHash",
				"outputs": [
					{
						"components": [
							{
								"components": [
									{
										"internalType": "string",
										"name": "underlyingString",
										"type": "string"
									},
									{
										"internalType": "uint40",
										"name": "expirationDatetime",
										"type": "uint40"
									},
									{
										"internalType": "uint24",
										"name": "objectionPeriod",
										"type": "uint24"
									},
									{
										"internalType": "uint8",
										"name": "config",
										"type": "uint8"
									},
									{
										"internalType": "uint8",
										"name": "marketCategory",
										"type": "uint8"
									},
									{
										"internalType": "uint8",
										"name": "baseUnitExp",
										"type": "uint8"
									},
									{
										"internalType": "int8",
										"name": "ndigit",
										"type": "int8"
									},
									{
										"internalType": "address",
										"name": "signerAddr",
										"type": "address"
									},
									{
										"internalType": "uint8",
										"name": "marketInterval",
										"type": "uint8"
									},
									{
										"internalType": "uint8",
										"name": "transactionFee0",
										"type": "uint8"
									},
									{
										"internalType": "uint8",
										"name": "transactionFee1",
										"type": "uint8"
									},
									{
										"internalType": "uint8",
										"name": "transactionFeeSigner",
										"type": "uint8"
									},
									{
										"internalType": "address",
										"name": "feeTaker0",
										"type": "address"
									},
									{
										"internalType": "address",
										"name": "feeTaker1",
										"type": "address"
									},
									{
										"internalType": "int128[]",
										"name": "strikes",
										"type": "int128[]"
									}
								],
								"internalType": "struct DigiOptionsLib.MarketBaseData",
								"name": "marketBaseData",
								"type": "tuple"
							},
							{
								"components": [
									{
										"internalType": "uint128",
										"name": "fee",
										"type": "uint128"
									},
									{
										"internalType": "uint16",
										"name": "winningOptionID",
										"type": "uint16"
									},
									{
										"internalType": "bool",
										"name": "settled",
										"type": "bool"
									}
								],
								"internalType": "struct DigiOptionsLib.MarketState",
								"name": "marketState",
								"type": "tuple"
							},
							{
								"internalType": "bytes32",
								"name": "marketHash",
								"type": "bytes32"
							},
							{
								"internalType": "enum DigiOptionsLib.UserState",
								"name": "userState",
								"type": "uint8"
							},
							{
								"internalType": "bool",
								"name": "testMarket",
								"type": "bool"
							}
						],
						"internalType": "struct DigiOptionsLib.MarketData",
						"name": "marketData",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "addr",
						"type": "address"
					},
					{
						"internalType": "bytes32[]",
						"name": "marketKeys",
						"type": "bytes32[]"
					}
				],
				"name": "getMarketDataListByMarketKeys",
				"outputs": [
					{
						"components": [
							{
								"components": [
									{
										"internalType": "string",
										"name": "underlyingString",
										"type": "string"
									},
									{
										"internalType": "uint40",
										"name": "expirationDatetime",
										"type": "uint40"
									},
									{
										"internalType": "uint24",
										"name": "objectionPeriod",
										"type": "uint24"
									},
									{
										"internalType": "uint8",
										"name": "config",
										"type": "uint8"
									},
									{
										"internalType": "uint8",
										"name": "marketCategory",
										"type": "uint8"
									},
									{
										"internalType": "uint8",
										"name": "baseUnitExp",
										"type": "uint8"
									},
									{
										"internalType": "int8",
										"name": "ndigit",
										"type": "int8"
									},
									{
										"internalType": "address",
										"name": "signerAddr",
										"type": "address"
									},
									{
										"internalType": "uint8",
										"name": "marketInterval",
										"type": "uint8"
									},
									{
										"internalType": "uint8",
										"name": "transactionFee0",
										"type": "uint8"
									},
									{
										"internalType": "uint8",
										"name": "transactionFee1",
										"type": "uint8"
									},
									{
										"internalType": "uint8",
										"name": "transactionFeeSigner",
										"type": "uint8"
									},
									{
										"internalType": "address",
										"name": "feeTaker0",
										"type": "address"
									},
									{
										"internalType": "address",
										"name": "feeTaker1",
										"type": "address"
									},
									{
										"internalType": "int128[]",
										"name": "strikes",
										"type": "int128[]"
									}
								],
								"internalType": "struct DigiOptionsLib.MarketBaseData",
								"name": "marketBaseData",
								"type": "tuple"
							},
							{
								"components": [
									{
										"internalType": "uint128",
										"name": "fee",
										"type": "uint128"
									},
									{
										"internalType": "uint16",
										"name": "winningOptionID",
										"type": "uint16"
									},
									{
										"internalType": "bool",
										"name": "settled",
										"type": "bool"
									}
								],
								"internalType": "struct DigiOptionsLib.MarketState",
								"name": "marketState",
								"type": "tuple"
							},
							{
								"internalType": "bytes32",
								"name": "marketHash",
								"type": "bytes32"
							},
							{
								"internalType": "enum DigiOptionsLib.UserState",
								"name": "userState",
								"type": "uint8"
							},
							{
								"internalType": "bool",
								"name": "testMarket",
								"type": "bool"
							}
						],
						"internalType": "struct DigiOptionsLib.MarketData[]",
						"name": "marketDataList",
						"type": "tuple[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getMarketListerInfo",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "listerValues",
						"type": "uint256[]"
					},
					{
						"components": [
							{
								"internalType": "address",
								"name": "signerAddr",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "value",
								"type": "uint256"
							}
						],
						"internalType": "struct DigiOptionsMarketLister.SignerData[]",
						"name": "signerDataList",
						"type": "tuple[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "marketHash",
						"type": "bytes32"
					},
					{
						"internalType": "bool",
						"name": "testMarket",
						"type": "bool"
					}
				],
				"name": "registerMarket",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "string",
								"name": "underlyingString",
								"type": "string"
							},
							{
								"internalType": "uint40",
								"name": "expirationDatetime",
								"type": "uint40"
							},
							{
								"internalType": "uint24",
								"name": "objectionPeriod",
								"type": "uint24"
							},
							{
								"internalType": "uint8",
								"name": "config",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "marketCategory",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "baseUnitExp",
								"type": "uint8"
							},
							{
								"internalType": "int8",
								"name": "ndigit",
								"type": "int8"
							},
							{
								"internalType": "address",
								"name": "signerAddr",
								"type": "address"
							},
							{
								"internalType": "uint8",
								"name": "marketInterval",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "transactionFee0",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "transactionFee1",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "transactionFeeSigner",
								"type": "uint8"
							},
							{
								"internalType": "address",
								"name": "feeTaker0",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "feeTaker1",
								"type": "address"
							},
							{
								"internalType": "int128[]",
								"name": "strikes",
								"type": "int128[]"
							}
						],
						"internalType": "struct DigiOptionsLib.MarketBaseData",
						"name": "marketBaseData",
						"type": "tuple"
					}
				],
				"name": "registerMarketTest",
				"outputs": [
					{
						"internalType": "bool",
						"name": "registerPossible",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "signerAddr",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "setSigner",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "marketHash",
						"type": "bytes32"
					},
					{
						"internalType": "bool",
						"name": "testMarket",
						"type": "bool"
					}
				],
				"name": "setTestMarket",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"evm": {
			"bytecode": {
				"linkReferences": {},
				"object": "0x608060405260006006553480156200001657600080fd5b50604051620025d5380380620025d5833981016040819052620000399162000071565b6001805433600160a060020a0319918216179091554360005560028054909116600160a060020a0392909216919091179055620000a1565b60006020828403121562000083578081fd5b8151600160a060020a03811681146200009a578182fd5b9392505050565b61252480620000b16000396000f3fe608060405234801561001057600080fd5b50600436106100db576000357c010000000000000000000000000000000000000000000000000000000090048063711c2b94116100935780638677e7b9116100785780638677e7b91461019c578063b3889bb3146101af578063c70be146146101cf576100db565b8063711c2b94146101745780637cc1f86714610187576100db565b80632556d8d0116100c45780632556d8d01461011f57806352d026881461013f57806365e47b8c1461015f576100db565b8063095200ce146100e05780630f8f824414610109575b600080fd5b6100f36100ee366004611c4b565b6101ef565b6040516101009190612379565b60405180910390f35b61011161029e565b604051610100929190612142565b61013261012d366004611aef565b6104a5565b60405161010091906121c3565b61015261014d3660046118fd565b6105af565b60405161010091906120be565b61017261016d36600461197f565b610669565b005b610172610182366004611a52565b61080c565b61018f61089b565b604051610100919061212f565b6101726101aa366004611a52565b610a22565b6101c26101bd366004611a81565b610b59565b60405161010091906121b8565b6101e26101dd36600461197f565b610c73565b6040516101009190612354565b6002546040517f095200ce00000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff169063095200ce90610246908590600401612367565b60206040518083038186803b15801561025e57600080fd5b505afa158015610272573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102969190611c67565b90505b919050565b60408051600780825261010082019092526060918291906020820160e08036833701905050915062350000826000815181106102d657fe5b60209081029190910101526001805473ffffffffffffffffffffffffffffffffffffffff169083908151811061030857fe5b602090810291909101015260648260028151811061032257fe5b6020908102919091010152600a8260038151811061033c57fe5b6020908102919091010152600a8260048151811061035657fe5b6020908102919091010152600582818151811061036f57fe5b60209081029190910101526102588260068151811061038a57fe5b60209081029190910101526006548067ffffffffffffffff811180156103af57600080fd5b506040519080825280602002602001820160405280156103e957816020015b6103d66112ce565b8152602001906001900390816103ce5790505b5060045490925073ffffffffffffffffffffffffffffffffffffffff1660005b8281101561049e5760408051808201825273ffffffffffffffffffffffffffffffffffffffff84168082526000908152600560209081529290205491810191909152845185908390811061045957fe5b60209081029190910181019190915273ffffffffffffffffffffffffffffffffffffffff92831660009081526005909152604090206001908101549092169101610409565b5050509091565b60006104b084610b59565b6104ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e6906122da565b60405180910390fd5b6002546040517f2556d8d000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690632556d8d09061054990879087908790600401612311565b602060405180830381600087803b15801561056357600080fd5b505af1158015610577573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059b9190611a3a565b90506105a8848285610d65565b9392505050565b60608167ffffffffffffffff811180156105c857600080fd5b5060405190808252806020026020018201604052801561060257816020015b6105ef6112e5565b8152602001906001900390816105e75790505b50905060005b8281101561066157610642856007600087878681811061062457fe5b90506020020135815260200190815260200160002060000154610c73565b82828151811061064e57fe5b6020908102919091010152600101610608565b509392505050565b60015473ffffffffffffffffffffffffffffffffffffffff1633146106ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e69061220f565b73ffffffffffffffffffffffffffffffffffffffff821660009081526005602052604090206001015474010000000000000000000000000000000000000000900460ff16156107305773ffffffffffffffffffffffffffffffffffffffff82166000908152600560205260409020819055610808565b600480546040805160608101825284815273ffffffffffffffffffffffffffffffffffffffff92831660208083019182526001838501818152898716600081815260059094529590922093518455915192820180549151151574010000000000000000000000000000000000000000027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff949096167fffffffffffffffffffffffff00000000000000000000000000000000000000009283161793909316949094179091558354909216179091556006805490910190555b5050565b60015473ffffffffffffffffffffffffffffffffffffffff16331461085d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e69061220f565b60009182526008602052604090912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b606080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637cc1f8676040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b15801561092457600080fd5b505af1158015610938573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261097e91908101906119aa565b905060028160008151811061098f57fe5b602090810291909101015262350000816001815181106109ab57fe5b602090810291909101015260025473ffffffffffffffffffffffffffffffffffffffff16816003815181106109dc57fe5b6020908102919091010152600054816004815181106109f757fe5b602090810291909101015260035481600881518110610a1257fe5b6020908102919091010152905090565b610a2a611320565b6002546040517fee1f69eb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063ee1f69eb90610a809086906004016121c3565b60006040518083038186803b158015610a9857600080fd5b505afa158015610aac573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610af29190810190611abc565b9050806020015164ffffffffff1660001415610b0a57fe5b610b1381610b59565b610b49576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e6906122da565b610b54818484610d65565b505050565b60015460009073ffffffffffffffffffffffffffffffffffffffff16331415610b8457506001610299565b60e082015173ffffffffffffffffffffffffffffffffffffffff16600090815260056020526040902054610bba57506000610299565b6064610bf183610160015160ff16610beb85610140015160ff1686610120015160ff1661103690919063ffffffff16565b90611036565b11158015610c085750600a82610120015160ff1610155b8015610c1d5750600a82610140015160ff1610155b8015610c325750600582610160015160ff1610155b8015610c5e575060015461018083015173ffffffffffffffffffffffffffffffffffffffff9081169116145b15610c6b57506001610299565b506000919050565b610c7b6112e5565b6002546040517fc70be14600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063c70be14690610cd39086908690600401612098565b60006040518083038186803b158015610ceb57600080fd5b505afa158015610cff573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610d459190810190611ba0565b6000928352600860205260409092205460ff161515608083015250919050565b6000610d708461107e565b6000818152600760205260409020805491925090610fbf5760015460009073ffffffffffffffffffffffffffffffffffffffff163314610db4574261025801610db7565b60005b6040805160608101825287815261012089015160ff908116602080840191825264ffffffffff86811685870190815260008b81526007909352959091209351845590516001938401805495517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0090961691909316177fffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000ff16931661010002929092179091555490915073ffffffffffffffffffffffffffffffffffffffff16331415610eb557600085815260086020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168515151790555b6000866080015160080260ff1687610100015160ff1660019060020a029060020a029050806003541660001415610eef5760038054821790555b606087015160009060041615610f0b5750610100870151610f1b565b610f188860200151611162565b90505b876080015160ff1688610100015160ff168260ff166008610f3e8560ff1661121d565b65ffffffffffff168c6020015164ffffffffff1681610f5957fe5b0465ffffffffffff169060020a020165ffffffffffff167f3d4b4c0dc42d96da48d02a2693392bfa4fdbfb0bec570e48f5186f9f75fe8ecb888c60200151888e60000151604051610fad94939291906121cc565b60405180910390a45050505050610b54565b600181015461012086015160ff9182169116118015610fed57506001810154610100900464ffffffffff1642105b1561102f578381556101208501516001820180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff9092169190911790555b5050505050565b600082820183811015611075576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e6906122a3565b90505b92915050565b600060608260000151604051602001611097919061207c565b6040516020818303038152906040528051906020012083602001518460400151856060015186608001518760a001518860c001518961010001518a60e001516040516020016110ee99989796959493929190611f61565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00181529190526060840151909150600116611154576101c0830151604051611142918391602001612032565b60405160208183030381529060405290505b805160209091012092915050565b6000808061117764ffffffffff85164261124b565b90506303c2670081106111b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e69061226c565b623b53808111156111cb5760015b9150611216565b620a8c008111156111dd5760036111c4565b6201fa408111156111ef5760046111c4565b611c208111156112005760056111c4565b6103848111156112115760066111c4565b600791505b5092915050565b600060606040518060600160405280602a81526020016124c5602a9139600184016006020151915050919050565b600061107583836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250600081848411156112c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e691906121fc565b505050900390565b604080518082019091526000808252602082015290565b6040518060a001604052806112f8611320565b815260200161130561139e565b81526000602082018190526040820181905260609091015290565b604080516101e08101825260608082526000602083018190529282018390528082018390526080820183905260a0820183905260c0820183905260e08201839052610100820183905261012082018390526101408201839052610160820183905261018082018390526101a08201929092526101c081019190915290565b604080516060810182526000808252602082018190529181019190915290565b803561107881612440565b805161107881612440565b600082601f8301126113e4578081fd5b81356113f76113f2826123ae565b612387565b81815291506020808301908481018184028601820187101561141857600080fd5b60005b8481101561144057813561142e81612473565b8452928201929082019060010161141b565b505050505092915050565b600082601f83011261145b578081fd5b81516114696113f2826123ae565b81815291506020808301908481018184028601820187101561148a57600080fd5b60005b848110156114405781516114a081612473565b8452928201929082019060010161148d565b805161107881612465565b80516003811061107857600080fd5b803561107881612482565b805161107881612482565b600082601f8301126114f2578081fd5b81356115006113f2826123ce565b915080825283602082850101111561151757600080fd5b8060208401602084013760009082016020015292915050565b600082601f830112611540578081fd5b815161154e6113f2826123ce565b915080825283602082850101111561156557600080fd5b611216816020840160208601612410565b60006101e0808385031215611589578182fd5b61159281612387565b915050813567ffffffffffffffff808211156115ad57600080fd5b6115b9858386016114e2565b83526115c885602086016118d1565b60208401526115da85604086016118bb565b60408401526115ec85606086016118e7565b60608401526115fe85608086016118e7565b60808401526116108560a086016118e7565b60a08401526116228560c086016114cc565b60c08401526116348560e086016113be565b60e0840152610100915061164a858386016118e7565b82840152610120915061165f858386016118e7565b828401526101409150611674858386016118e7565b828401526101609150611689858386016118e7565b82840152610180915061169e858386016113be565b828401526101a091506116b3858386016113be565b828401526101c0915081840135818111156116cd57600080fd5b6116d9868287016113d4565b8385015250505092915050565b60006101e08083850312156116f9578182fd5b61170281612387565b915050815167ffffffffffffffff8082111561171d57600080fd5b61172985838601611530565b835261173885602086016118dc565b602084015261174a85604086016118c6565b604084015261175c85606086016118f2565b606084015261176e85608086016118f2565b60808401526117808560a086016118f2565b60a08401526117928560c086016114d7565b60c08401526117a48560e086016113c9565b60e084015261010091506117ba858386016118f2565b8284015261012091506117cf858386016118f2565b8284015261014091506117e4858386016118f2565b8284015261016091506117f9858386016118f2565b82840152610180915061180e858386016113c9565b828401526101a09150611823858386016113c9565b828401526101c09150818401518181111561183d57600080fd5b6116d98682870161144b565b60006060828403121561185a578081fd5b6118646060612387565b905081516fffffffffffffffffffffffffffffffff8116811461188657600080fd5b8152602082015161ffff8116811461189d57600080fd5b602082015260408201516118b081612465565b604082015292915050565b803561107881612491565b805161107881612491565b8035611078816124a2565b8051611078816124a2565b8035611078816124b5565b8051611078816124b5565b600080600060408486031215611911578283fd5b833561191c81612440565b9250602084013567ffffffffffffffff80821115611938578384fd5b818601915086601f83011261194b578384fd5b813581811115611959578485fd5b876020808302850101111561196c578485fd5b6020830194508093505050509250925092565b60008060408385031215611991578182fd5b823561199c81612440565b946020939093013593505050565b600060208083850312156119bc578182fd5b825167ffffffffffffffff8111156119d2578283fd5b8301601f810185136119e2578283fd5b80516119f06113f2826123ae565b8181528381019083850185840285018601891015611a0c578687fd5b8694505b83851015611a2e578051835260019490940193918501918501611a10565b50979650505050505050565b600060208284031215611a4b578081fd5b5051919050565b60008060408385031215611a64578182fd5b823591506020830135611a7681612465565b809150509250929050565b600060208284031215611a92578081fd5b813567ffffffffffffffff811115611aa8578182fd5b611ab484828501611576565b949350505050565b600060208284031215611acd578081fd5b815167ffffffffffffffff811115611ae3578182fd5b611ab4848285016116e6565b600080600083850360a0811215611b04578182fd5b843567ffffffffffffffff811115611b1a578283fd5b611b2687828801611576565b9450506020850135611b3781612465565b925060607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc082011215611b68578182fd5b50611b736060612387565b6040850135611b81816124b5565b8152606085013560208201526080909401356040850152509093909250565b600060208284031215611bb1578081fd5b815167ffffffffffffffff80821115611bc8578283fd5b9083019060e08286031215611bdb578283fd5b611be560a0612387565b825182811115611bf3578485fd5b611bff878286016116e6565b825250611c0f8660208501611849565b602082015260808301516040820152611c2b8660a085016114bd565b6060820152611c3d8660c085016114b2565b608082015295945050505050565b600060208284031215611c5c578081fd5b8135611075816124a2565b600060208284031215611c78578081fd5b8151611075816124b5565b73ffffffffffffffffffffffffffffffffffffffff169052565b73ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000029052565b6000815180845260208085019450808401835b83811015611cf8578151600f0b87529582019590820190600101611cd9565b509495945050505050565b6000815180845260208085019450808401835b83811015611cf857815187529582019590820190600101611d16565b60000b9052565b60008151808452611d51816020860160208601612410565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60006101e08251818552611d9982860182611d39565b9150506020830151611dae6020860182611f4f565b506040830151611dc16040860182611f46565b506060830151611dd46060860182611f5a565b506080830151611de76080860182611f5a565b5060a0830151611dfa60a0860182611f5a565b5060c0830151611e0d60c0860182611d32565b5060e0830151611e2060e0860182611c83565b5061010080840151611e3482870182611f5a565b505061012080840151611e4982870182611f5a565b505061014080840151611e5e82870182611f5a565b505061016080840151611e7382870182611f5a565b505061018080840151611e8882870182611c83565b50506101a080840151611e9d82870182611c83565b50506101c08084015185830382870152611eb78382611cc6565b9695505050505050565b6000815160e08452611ed660e0850182611d83565b905060208301516fffffffffffffffffffffffffffffffff815116602086015261ffff60208201511660408601526040810151151560608601525060408301516080850152606083015160038110611f2a57fe5b60a085015260809290920151151560c090930192909252919050565b62ffffff169052565b64ffffffffff169052565b60ff169052565b60008a82527b0100000000000000000000000000000000000000000000000000000064ffffffffff8b160260208301527d01000000000000000000000000000000000000000000000000000000000062ffffff8a160260258301527f01000000000000000000000000000000000000000000000000000000000000008060ff8a160260288401528060ff89160260298401528060ff881602602a8401528086830b02602b8401528060ff861602602c84015250612021602d830184611c9d565b506041019998505050505050505050565b6000835160206120458285838901612410565b845191840191818601845b8281101561206f578151600f0b85529383019390830190600101612050565b5092979650505050505050565b6000825161208e818460208701612410565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b6000602080830181845280855180835260408601915060408482028701019250838701855b8281101561206f577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc088860301845261211d858351611ec1565b945092850192908501906001016120e3565b6000602082526110756020830184611d03565b6000604080835261215581840186611d03565b838103602085810191909152855180835286820192820190855b818110156121aa578451805173ffffffffffffffffffffffffffffffffffffffff16845284015184840152938301939185019160010161216f565b509098975050505050505050565b901515815260200190565b90815260200190565b600085825264ffffffffff808616602084015280851660408401525060806060830152611eb76080830184611d39565b6000602082526110756020830184611d39565b60208082526022908201527f4f6e6c79206f776e65722063616e2063616c6c20746869732066756e6374696f60408201527f6e2e000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526015908201527f746f6f2066617220696e20746865206675747572650000000000000000000000604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526015908201527f7265676973746572206e6f7420706f737369626c650000000000000000000000604082015260600190565b600060a0825261232460a0830186611d83565b9050831515602083015260ff83511660408301526020830151606083015260408301516080830152949350505050565b6000602082526110756020830184611ec1565b64ffffffffff91909116815260200190565b60ff91909116815260200190565b60405181810167ffffffffffffffff811182821017156123a657600080fd5b604052919050565b600067ffffffffffffffff8211156123c4578081fd5b5060209081020190565b600067ffffffffffffffff8211156123e4578081fd5b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60005b8381101561242b578181015183820152602001612413565b8381111561243a576000848401525b50505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461246257600080fd5b50565b801515811461246257600080fd5b80600f0b811461246257600080fd5b8060000b811461246257600080fd5b62ffffff8116811461246257600080fd5b64ffffffffff8116811461246257600080fd5b60ff8116811461246257600080fdfe000000000000000000fa7d000000003b53800000000a8c0000000001fa40000000001c20000000000000a26469706673582212201c308d08c0530a0c7b78d3b7310d167e45973bc2355d95fdf976b8c20f5ddc4264736f6c63430007000033",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 PUSH1 0x6 SSTORE CALLVALUE DUP1 ISZERO PUSH3 0x16 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x25D5 CODESIZE SUB DUP1 PUSH3 0x25D5 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x39 SWAP2 PUSH3 0x71 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD CALLER PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB NOT SWAP2 DUP3 AND OR SWAP1 SWAP2 SSTORE NUMBER PUSH1 0x0 SSTORE PUSH1 0x2 DUP1 SLOAD SWAP1 SWAP2 AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH3 0xA1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x83 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND DUP2 EQ PUSH3 0x9A JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x2524 DUP1 PUSH3 0xB1 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xDB JUMPI PUSH1 0x0 CALLDATALOAD PUSH29 0x100000000000000000000000000000000000000000000000000000000 SWAP1 DIV DUP1 PUSH4 0x711C2B94 GT PUSH2 0x93 JUMPI DUP1 PUSH4 0x8677E7B9 GT PUSH2 0x78 JUMPI DUP1 PUSH4 0x8677E7B9 EQ PUSH2 0x19C JUMPI DUP1 PUSH4 0xB3889BB3 EQ PUSH2 0x1AF JUMPI DUP1 PUSH4 0xC70BE146 EQ PUSH2 0x1CF JUMPI PUSH2 0xDB JUMP JUMPDEST DUP1 PUSH4 0x711C2B94 EQ PUSH2 0x174 JUMPI DUP1 PUSH4 0x7CC1F867 EQ PUSH2 0x187 JUMPI PUSH2 0xDB JUMP JUMPDEST DUP1 PUSH4 0x2556D8D0 GT PUSH2 0xC4 JUMPI DUP1 PUSH4 0x2556D8D0 EQ PUSH2 0x11F JUMPI DUP1 PUSH4 0x52D02688 EQ PUSH2 0x13F JUMPI DUP1 PUSH4 0x65E47B8C EQ PUSH2 0x15F JUMPI PUSH2 0xDB JUMP JUMPDEST DUP1 PUSH4 0x95200CE EQ PUSH2 0xE0 JUMPI DUP1 PUSH4 0xF8F8244 EQ PUSH2 0x109 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF3 PUSH2 0xEE CALLDATASIZE PUSH1 0x4 PUSH2 0x1C4B JUMP JUMPDEST PUSH2 0x1EF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x100 SWAP2 SWAP1 PUSH2 0x2379 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x111 PUSH2 0x29E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x100 SWAP3 SWAP2 SWAP1 PUSH2 0x2142 JUMP JUMPDEST PUSH2 0x132 PUSH2 0x12D CALLDATASIZE PUSH1 0x4 PUSH2 0x1AEF JUMP JUMPDEST PUSH2 0x4A5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x100 SWAP2 SWAP1 PUSH2 0x21C3 JUMP JUMPDEST PUSH2 0x152 PUSH2 0x14D CALLDATASIZE PUSH1 0x4 PUSH2 0x18FD JUMP JUMPDEST PUSH2 0x5AF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x100 SWAP2 SWAP1 PUSH2 0x20BE JUMP JUMPDEST PUSH2 0x172 PUSH2 0x16D CALLDATASIZE PUSH1 0x4 PUSH2 0x197F JUMP JUMPDEST PUSH2 0x669 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x172 PUSH2 0x182 CALLDATASIZE PUSH1 0x4 PUSH2 0x1A52 JUMP JUMPDEST PUSH2 0x80C JUMP JUMPDEST PUSH2 0x18F PUSH2 0x89B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x100 SWAP2 SWAP1 PUSH2 0x212F JUMP JUMPDEST PUSH2 0x172 PUSH2 0x1AA CALLDATASIZE PUSH1 0x4 PUSH2 0x1A52 JUMP JUMPDEST PUSH2 0xA22 JUMP JUMPDEST PUSH2 0x1C2 PUSH2 0x1BD CALLDATASIZE PUSH1 0x4 PUSH2 0x1A81 JUMP JUMPDEST PUSH2 0xB59 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x100 SWAP2 SWAP1 PUSH2 0x21B8 JUMP JUMPDEST PUSH2 0x1E2 PUSH2 0x1DD CALLDATASIZE PUSH1 0x4 PUSH2 0x197F JUMP JUMPDEST PUSH2 0xC73 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x100 SWAP2 SWAP1 PUSH2 0x2354 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH32 0x95200CE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x95200CE SWAP1 PUSH2 0x246 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x2367 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x25E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x272 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x296 SWAP2 SWAP1 PUSH2 0x1C67 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x7 DUP1 DUP3 MSTORE PUSH2 0x100 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 DUP3 SWAP2 SWAP1 PUSH1 0x20 DUP3 ADD PUSH1 0xE0 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP2 POP PUSH3 0x350000 DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x2D6 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP4 SWAP1 DUP2 MLOAD DUP2 LT PUSH2 0x308 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x64 DUP3 PUSH1 0x2 DUP2 MLOAD DUP2 LT PUSH2 0x322 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0xA DUP3 PUSH1 0x3 DUP2 MLOAD DUP2 LT PUSH2 0x33C JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0xA DUP3 PUSH1 0x4 DUP2 MLOAD DUP2 LT PUSH2 0x356 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x5 DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x36F JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH2 0x258 DUP3 PUSH1 0x6 DUP2 MLOAD DUP2 LT PUSH2 0x38A JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x6 SLOAD DUP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x3AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3E9 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x3D6 PUSH2 0x12CE JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x3CE JUMPI SWAP1 POP JUMPDEST POP PUSH1 0x4 SLOAD SWAP1 SWAP3 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x49E JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND DUP1 DUP3 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE SWAP3 SWAP1 KECCAK256 SLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP5 MLOAD DUP6 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0x459 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 SWAP1 DUP2 ADD SLOAD SWAP1 SWAP3 AND SWAP2 ADD PUSH2 0x409 JUMP JUMPDEST POP POP POP SWAP1 SWAP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4B0 DUP5 PUSH2 0xB59 JUMP JUMPDEST PUSH2 0x4EF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4E6 SWAP1 PUSH2 0x22DA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH32 0x2556D8D000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0x2556D8D0 SWAP1 PUSH2 0x549 SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x2311 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x563 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x577 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x59B SWAP2 SWAP1 PUSH2 0x1A3A JUMP JUMPDEST SWAP1 POP PUSH2 0x5A8 DUP5 DUP3 DUP6 PUSH2 0xD65 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x5C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x602 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x5EF PUSH2 0x12E5 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x5E7 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x661 JUMPI PUSH2 0x642 DUP6 PUSH1 0x7 PUSH1 0x0 DUP8 DUP8 DUP7 DUP2 DUP2 LT PUSH2 0x624 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD PUSH2 0xC73 JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x64E JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x608 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x6BA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4E6 SWAP1 PUSH2 0x220F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH21 0x10000000000000000000000000000000000000000 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x730 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP2 SWAP1 SSTORE PUSH2 0x808 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE DUP5 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND PUSH1 0x20 DUP1 DUP4 ADD SWAP2 DUP3 MSTORE PUSH1 0x1 DUP4 DUP6 ADD DUP2 DUP2 MSTORE DUP10 DUP8 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 SWAP1 SWAP5 MSTORE SWAP6 SWAP1 SWAP3 KECCAK256 SWAP4 MLOAD DUP5 SSTORE SWAP2 MLOAD SWAP3 DUP3 ADD DUP1 SLOAD SWAP2 MLOAD ISZERO ISZERO PUSH21 0x10000000000000000000000000000000000000000 MUL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 SWAP1 SWAP7 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 SWAP3 DUP4 AND OR SWAP4 SWAP1 SWAP4 AND SWAP5 SWAP1 SWAP5 OR SWAP1 SWAP2 SSTORE DUP4 SLOAD SWAP1 SWAP3 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x6 DUP1 SLOAD SWAP1 SWAP2 ADD SWAP1 SSTORE JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x85D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4E6 SWAP1 PUSH2 0x220F JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x7CC1F867 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH29 0x100000000000000000000000000000000000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x924 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x938 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x97E SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x19AA JUMP JUMPDEST SWAP1 POP PUSH1 0x2 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x98F JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH3 0x350000 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x9AB JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH1 0x3 DUP2 MLOAD DUP2 LT PUSH2 0x9DC JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x0 SLOAD DUP2 PUSH1 0x4 DUP2 MLOAD DUP2 LT PUSH2 0x9F7 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x3 SLOAD DUP2 PUSH1 0x8 DUP2 MLOAD DUP2 LT PUSH2 0xA12 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xA2A PUSH2 0x1320 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH32 0xEE1F69EB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0xEE1F69EB SWAP1 PUSH2 0xA80 SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x21C3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA98 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xAAC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xAF2 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1ABC JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x20 ADD MLOAD PUSH5 0xFFFFFFFFFF AND PUSH1 0x0 EQ ISZERO PUSH2 0xB0A JUMPI INVALID JUMPDEST PUSH2 0xB13 DUP2 PUSH2 0xB59 JUMP JUMPDEST PUSH2 0xB49 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4E6 SWAP1 PUSH2 0x22DA JUMP JUMPDEST PUSH2 0xB54 DUP2 DUP5 DUP5 PUSH2 0xD65 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ ISZERO PUSH2 0xB84 JUMPI POP PUSH1 0x1 PUSH2 0x299 JUMP JUMPDEST PUSH1 0xE0 DUP3 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0xBBA JUMPI POP PUSH1 0x0 PUSH2 0x299 JUMP JUMPDEST PUSH1 0x64 PUSH2 0xBF1 DUP4 PUSH2 0x160 ADD MLOAD PUSH1 0xFF AND PUSH2 0xBEB DUP6 PUSH2 0x140 ADD MLOAD PUSH1 0xFF AND DUP7 PUSH2 0x120 ADD MLOAD PUSH1 0xFF AND PUSH2 0x1036 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 PUSH2 0x1036 JUMP JUMPDEST GT ISZERO DUP1 ISZERO PUSH2 0xC08 JUMPI POP PUSH1 0xA DUP3 PUSH2 0x120 ADD MLOAD PUSH1 0xFF AND LT ISZERO JUMPDEST DUP1 ISZERO PUSH2 0xC1D JUMPI POP PUSH1 0xA DUP3 PUSH2 0x140 ADD MLOAD PUSH1 0xFF AND LT ISZERO JUMPDEST DUP1 ISZERO PUSH2 0xC32 JUMPI POP PUSH1 0x5 DUP3 PUSH2 0x160 ADD MLOAD PUSH1 0xFF AND LT ISZERO JUMPDEST DUP1 ISZERO PUSH2 0xC5E JUMPI POP PUSH1 0x1 SLOAD PUSH2 0x180 DUP4 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ JUMPDEST ISZERO PUSH2 0xC6B JUMPI POP PUSH1 0x1 PUSH2 0x299 JUMP JUMPDEST POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xC7B PUSH2 0x12E5 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH32 0xC70BE14600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0xC70BE146 SWAP1 PUSH2 0xCD3 SWAP1 DUP7 SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x2098 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xCEB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xCFF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xD45 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1BA0 JUMP JUMPDEST PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 SWAP3 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x80 DUP4 ADD MSTORE POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD70 DUP5 PUSH2 0x107E JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD SWAP2 SWAP3 POP SWAP1 PUSH2 0xFBF JUMPI PUSH1 0x1 SLOAD PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0xDB4 JUMPI TIMESTAMP PUSH2 0x258 ADD PUSH2 0xDB7 JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE DUP8 DUP2 MSTORE PUSH2 0x120 DUP10 ADD MLOAD PUSH1 0xFF SWAP1 DUP2 AND PUSH1 0x20 DUP1 DUP5 ADD SWAP2 DUP3 MSTORE PUSH5 0xFFFFFFFFFF DUP7 DUP2 AND DUP6 DUP8 ADD SWAP1 DUP2 MSTORE PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x7 SWAP1 SWAP4 MSTORE SWAP6 SWAP1 SWAP2 KECCAK256 SWAP4 MLOAD DUP5 SSTORE SWAP1 MLOAD PUSH1 0x1 SWAP4 DUP5 ADD DUP1 SLOAD SWAP6 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 SWAP1 SWAP7 AND SWAP2 SWAP1 SWAP4 AND OR PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000FF AND SWAP4 AND PUSH2 0x100 MUL SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE SLOAD SWAP1 SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ ISZERO PUSH2 0xEB5 JUMPI PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP6 ISZERO ISZERO OR SWAP1 SSTORE JUMPDEST PUSH1 0x0 DUP7 PUSH1 0x80 ADD MLOAD PUSH1 0x8 MUL PUSH1 0xFF AND DUP8 PUSH2 0x100 ADD MLOAD PUSH1 0xFF AND PUSH1 0x1 SWAP1 PUSH1 0x2 EXP MUL SWAP1 PUSH1 0x2 EXP MUL SWAP1 POP DUP1 PUSH1 0x3 SLOAD AND PUSH1 0x0 EQ ISZERO PUSH2 0xEEF JUMPI PUSH1 0x3 DUP1 SLOAD DUP3 OR SWAP1 SSTORE JUMPDEST PUSH1 0x60 DUP8 ADD MLOAD PUSH1 0x0 SWAP1 PUSH1 0x4 AND ISZERO PUSH2 0xF0B JUMPI POP PUSH2 0x100 DUP8 ADD MLOAD PUSH2 0xF1B JUMP JUMPDEST PUSH2 0xF18 DUP9 PUSH1 0x20 ADD MLOAD PUSH2 0x1162 JUMP JUMPDEST SWAP1 POP JUMPDEST DUP8 PUSH1 0x80 ADD MLOAD PUSH1 0xFF AND DUP9 PUSH2 0x100 ADD MLOAD PUSH1 0xFF AND DUP3 PUSH1 0xFF AND PUSH1 0x8 PUSH2 0xF3E DUP6 PUSH1 0xFF AND PUSH2 0x121D JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF AND DUP13 PUSH1 0x20 ADD MLOAD PUSH5 0xFFFFFFFFFF AND DUP2 PUSH2 0xF59 JUMPI INVALID JUMPDEST DIV PUSH6 0xFFFFFFFFFFFF AND SWAP1 PUSH1 0x2 EXP MUL ADD PUSH6 0xFFFFFFFFFFFF AND PUSH32 0x3D4B4C0DC42D96DA48D02A2693392BFA4FDBFB0BEC570E48F5186F9F75FE8ECB DUP9 DUP13 PUSH1 0x20 ADD MLOAD DUP9 DUP15 PUSH1 0x0 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0xFAD SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x21CC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP PUSH2 0xB54 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SLOAD PUSH2 0x120 DUP7 ADD MLOAD PUSH1 0xFF SWAP2 DUP3 AND SWAP2 AND GT DUP1 ISZERO PUSH2 0xFED JUMPI POP PUSH1 0x1 DUP2 ADD SLOAD PUSH2 0x100 SWAP1 DIV PUSH5 0xFFFFFFFFFF AND TIMESTAMP LT JUMPDEST ISZERO PUSH2 0x102F JUMPI DUP4 DUP2 SSTORE PUSH2 0x120 DUP6 ADD MLOAD PUSH1 0x1 DUP3 ADD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0xFF SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x1075 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4E6 SWAP1 PUSH2 0x22A3 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 PUSH1 0x0 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1097 SWAP2 SWAP1 PUSH2 0x207C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP4 PUSH1 0x20 ADD MLOAD DUP5 PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0x60 ADD MLOAD DUP7 PUSH1 0x80 ADD MLOAD DUP8 PUSH1 0xA0 ADD MLOAD DUP9 PUSH1 0xC0 ADD MLOAD DUP10 PUSH2 0x100 ADD MLOAD DUP11 PUSH1 0xE0 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x10EE SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1F61 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x60 DUP5 ADD MLOAD SWAP1 SWAP2 POP PUSH1 0x1 AND PUSH2 0x1154 JUMPI PUSH2 0x1C0 DUP4 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x1142 SWAP2 DUP4 SWAP2 PUSH1 0x20 ADD PUSH2 0x2032 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP JUMPDEST DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH2 0x1177 PUSH5 0xFFFFFFFFFF DUP6 AND TIMESTAMP PUSH2 0x124B JUMP JUMPDEST SWAP1 POP PUSH4 0x3C26700 DUP2 LT PUSH2 0x11B6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4E6 SWAP1 PUSH2 0x226C JUMP JUMPDEST PUSH3 0x3B5380 DUP2 GT ISZERO PUSH2 0x11CB JUMPI PUSH1 0x1 JUMPDEST SWAP2 POP PUSH2 0x1216 JUMP JUMPDEST PUSH3 0xA8C00 DUP2 GT ISZERO PUSH2 0x11DD JUMPI PUSH1 0x3 PUSH2 0x11C4 JUMP JUMPDEST PUSH3 0x1FA40 DUP2 GT ISZERO PUSH2 0x11EF JUMPI PUSH1 0x4 PUSH2 0x11C4 JUMP JUMPDEST PUSH2 0x1C20 DUP2 GT ISZERO PUSH2 0x1200 JUMPI PUSH1 0x5 PUSH2 0x11C4 JUMP JUMPDEST PUSH2 0x384 DUP2 GT ISZERO PUSH2 0x1211 JUMPI PUSH1 0x6 PUSH2 0x11C4 JUMP JUMPDEST PUSH1 0x7 SWAP2 POP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2A DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x24C5 PUSH1 0x2A SWAP2 CODECOPY PUSH1 0x1 DUP5 ADD PUSH1 0x6 MUL ADD MLOAD SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1075 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1E DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 DUP2 MSTORE POP PUSH1 0x0 DUP2 DUP5 DUP5 GT ISZERO PUSH2 0x12C6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4E6 SWAP2 SWAP1 PUSH2 0x21FC JUMP JUMPDEST POP POP POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x12F8 PUSH2 0x1320 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1305 PUSH2 0x139E JUMP JUMPDEST DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x60 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0x1E0 DUP2 ADD DUP3 MSTORE PUSH1 0x60 DUP1 DUP3 MSTORE PUSH1 0x0 PUSH1 0x20 DUP4 ADD DUP2 SWAP1 MSTORE SWAP3 DUP3 ADD DUP4 SWAP1 MSTORE DUP1 DUP3 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 DUP3 ADD DUP4 SWAP1 MSTORE PUSH1 0xA0 DUP3 ADD DUP4 SWAP1 MSTORE PUSH1 0xC0 DUP3 ADD DUP4 SWAP1 MSTORE PUSH1 0xE0 DUP3 ADD DUP4 SWAP1 MSTORE PUSH2 0x100 DUP3 ADD DUP4 SWAP1 MSTORE PUSH2 0x120 DUP3 ADD DUP4 SWAP1 MSTORE PUSH2 0x140 DUP3 ADD DUP4 SWAP1 MSTORE PUSH2 0x160 DUP3 ADD DUP4 SWAP1 MSTORE PUSH2 0x180 DUP3 ADD DUP4 SWAP1 MSTORE PUSH2 0x1A0 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH2 0x1C0 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x1078 DUP2 PUSH2 0x2440 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x1078 DUP2 PUSH2 0x2440 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x13E4 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x13F7 PUSH2 0x13F2 DUP3 PUSH2 0x23AE JUMP JUMPDEST PUSH2 0x2387 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x1418 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x1440 JUMPI DUP2 CALLDATALOAD PUSH2 0x142E DUP2 PUSH2 0x2473 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x141B JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x145B JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1469 PUSH2 0x13F2 DUP3 PUSH2 0x23AE JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x148A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x1440 JUMPI DUP2 MLOAD PUSH2 0x14A0 DUP2 PUSH2 0x2473 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x148D JUMP JUMPDEST DUP1 MLOAD PUSH2 0x1078 DUP2 PUSH2 0x2465 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x3 DUP2 LT PUSH2 0x1078 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x1078 DUP2 PUSH2 0x2482 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x1078 DUP2 PUSH2 0x2482 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x14F2 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1500 PUSH2 0x13F2 DUP3 PUSH2 0x23CE JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1517 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1540 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x154E PUSH2 0x13F2 DUP3 PUSH2 0x23CE JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1565 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1216 DUP2 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x2410 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E0 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1589 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1592 DUP2 PUSH2 0x2387 JUMP JUMPDEST SWAP2 POP POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x15AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x15B9 DUP6 DUP4 DUP7 ADD PUSH2 0x14E2 JUMP JUMPDEST DUP4 MSTORE PUSH2 0x15C8 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x18D1 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x15DA DUP6 PUSH1 0x40 DUP7 ADD PUSH2 0x18BB JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x15EC DUP6 PUSH1 0x60 DUP7 ADD PUSH2 0x18E7 JUMP JUMPDEST PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x15FE DUP6 PUSH1 0x80 DUP7 ADD PUSH2 0x18E7 JUMP JUMPDEST PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x1610 DUP6 PUSH1 0xA0 DUP7 ADD PUSH2 0x18E7 JUMP JUMPDEST PUSH1 0xA0 DUP5 ADD MSTORE PUSH2 0x1622 DUP6 PUSH1 0xC0 DUP7 ADD PUSH2 0x14CC JUMP JUMPDEST PUSH1 0xC0 DUP5 ADD MSTORE PUSH2 0x1634 DUP6 PUSH1 0xE0 DUP7 ADD PUSH2 0x13BE JUMP JUMPDEST PUSH1 0xE0 DUP5 ADD MSTORE PUSH2 0x100 SWAP2 POP PUSH2 0x164A DUP6 DUP4 DUP7 ADD PUSH2 0x18E7 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE PUSH2 0x120 SWAP2 POP PUSH2 0x165F DUP6 DUP4 DUP7 ADD PUSH2 0x18E7 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE PUSH2 0x140 SWAP2 POP PUSH2 0x1674 DUP6 DUP4 DUP7 ADD PUSH2 0x18E7 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE PUSH2 0x160 SWAP2 POP PUSH2 0x1689 DUP6 DUP4 DUP7 ADD PUSH2 0x18E7 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE PUSH2 0x180 SWAP2 POP PUSH2 0x169E DUP6 DUP4 DUP7 ADD PUSH2 0x13BE JUMP JUMPDEST DUP3 DUP5 ADD MSTORE PUSH2 0x1A0 SWAP2 POP PUSH2 0x16B3 DUP6 DUP4 DUP7 ADD PUSH2 0x13BE JUMP JUMPDEST DUP3 DUP5 ADD MSTORE PUSH2 0x1C0 SWAP2 POP DUP2 DUP5 ADD CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x16CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x16D9 DUP7 DUP3 DUP8 ADD PUSH2 0x13D4 JUMP JUMPDEST DUP4 DUP6 ADD MSTORE POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E0 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x16F9 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1702 DUP2 PUSH2 0x2387 JUMP JUMPDEST SWAP2 POP POP DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x171D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1729 DUP6 DUP4 DUP7 ADD PUSH2 0x1530 JUMP JUMPDEST DUP4 MSTORE PUSH2 0x1738 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x18DC JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x174A DUP6 PUSH1 0x40 DUP7 ADD PUSH2 0x18C6 JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x175C DUP6 PUSH1 0x60 DUP7 ADD PUSH2 0x18F2 JUMP JUMPDEST PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x176E DUP6 PUSH1 0x80 DUP7 ADD PUSH2 0x18F2 JUMP JUMPDEST PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x1780 DUP6 PUSH1 0xA0 DUP7 ADD PUSH2 0x18F2 JUMP JUMPDEST PUSH1 0xA0 DUP5 ADD MSTORE PUSH2 0x1792 DUP6 PUSH1 0xC0 DUP7 ADD PUSH2 0x14D7 JUMP JUMPDEST PUSH1 0xC0 DUP5 ADD MSTORE PUSH2 0x17A4 DUP6 PUSH1 0xE0 DUP7 ADD PUSH2 0x13C9 JUMP JUMPDEST PUSH1 0xE0 DUP5 ADD MSTORE PUSH2 0x100 SWAP2 POP PUSH2 0x17BA DUP6 DUP4 DUP7 ADD PUSH2 0x18F2 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE PUSH2 0x120 SWAP2 POP PUSH2 0x17CF DUP6 DUP4 DUP7 ADD PUSH2 0x18F2 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE PUSH2 0x140 SWAP2 POP PUSH2 0x17E4 DUP6 DUP4 DUP7 ADD PUSH2 0x18F2 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE PUSH2 0x160 SWAP2 POP PUSH2 0x17F9 DUP6 DUP4 DUP7 ADD PUSH2 0x18F2 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE PUSH2 0x180 SWAP2 POP PUSH2 0x180E DUP6 DUP4 DUP7 ADD PUSH2 0x13C9 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE PUSH2 0x1A0 SWAP2 POP PUSH2 0x1823 DUP6 DUP4 DUP7 ADD PUSH2 0x13C9 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE PUSH2 0x1C0 SWAP2 POP DUP2 DUP5 ADD MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x183D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x16D9 DUP7 DUP3 DUP8 ADD PUSH2 0x144B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x185A JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x1864 PUSH1 0x60 PUSH2 0x2387 JUMP JUMPDEST SWAP1 POP DUP2 MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1886 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ PUSH2 0x189D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x18B0 DUP2 PUSH2 0x2465 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x1078 DUP2 PUSH2 0x2491 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x1078 DUP2 PUSH2 0x2491 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x1078 DUP2 PUSH2 0x24A2 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x1078 DUP2 PUSH2 0x24A2 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x1078 DUP2 PUSH2 0x24B5 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x1078 DUP2 PUSH2 0x24B5 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1911 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x191C DUP2 PUSH2 0x2440 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1938 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x194B JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x1959 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP8 PUSH1 0x20 DUP1 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0x196C JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP5 POP DUP1 SWAP4 POP POP POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1991 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x199C DUP2 PUSH2 0x2440 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x19BC JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x19D2 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x19E2 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x19F0 PUSH2 0x13F2 DUP3 PUSH2 0x23AE JUMP JUMPDEST DUP2 DUP2 MSTORE DUP4 DUP2 ADD SWAP1 DUP4 DUP6 ADD DUP6 DUP5 MUL DUP6 ADD DUP7 ADD DUP10 LT ISZERO PUSH2 0x1A0C JUMPI DUP7 DUP8 REVERT JUMPDEST DUP7 SWAP5 POP JUMPDEST DUP4 DUP6 LT ISZERO PUSH2 0x1A2E JUMPI DUP1 MLOAD DUP4 MSTORE PUSH1 0x1 SWAP5 SWAP1 SWAP5 ADD SWAP4 SWAP2 DUP6 ADD SWAP2 DUP6 ADD PUSH2 0x1A10 JUMP JUMPDEST POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1A4B JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1A64 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x1A76 DUP2 PUSH2 0x2465 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1A92 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1AA8 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1AB4 DUP5 DUP3 DUP6 ADD PUSH2 0x1576 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1ACD JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1AE3 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1AB4 DUP5 DUP3 DUP6 ADD PUSH2 0x16E6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP6 SUB PUSH1 0xA0 DUP2 SLT ISZERO PUSH2 0x1B04 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1B1A JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x1B26 DUP8 DUP3 DUP9 ADD PUSH2 0x1576 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x1B37 DUP2 PUSH2 0x2465 JUMP JUMPDEST SWAP3 POP PUSH1 0x60 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0 DUP3 ADD SLT ISZERO PUSH2 0x1B68 JUMPI DUP2 DUP3 REVERT JUMPDEST POP PUSH2 0x1B73 PUSH1 0x60 PUSH2 0x2387 JUMP JUMPDEST PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x1B81 DUP2 PUSH2 0x24B5 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x80 SWAP1 SWAP5 ADD CALLDATALOAD PUSH1 0x40 DUP6 ADD MSTORE POP SWAP1 SWAP4 SWAP1 SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1BB1 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1BC8 JUMPI DUP3 DUP4 REVERT JUMPDEST SWAP1 DUP4 ADD SWAP1 PUSH1 0xE0 DUP3 DUP7 SUB SLT ISZERO PUSH2 0x1BDB JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x1BE5 PUSH1 0xA0 PUSH2 0x2387 JUMP JUMPDEST DUP3 MLOAD DUP3 DUP2 GT ISZERO PUSH2 0x1BF3 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x1BFF DUP8 DUP3 DUP7 ADD PUSH2 0x16E6 JUMP JUMPDEST DUP3 MSTORE POP PUSH2 0x1C0F DUP7 PUSH1 0x20 DUP6 ADD PUSH2 0x1849 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x1C2B DUP7 PUSH1 0xA0 DUP6 ADD PUSH2 0x14BD JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x1C3D DUP7 PUSH1 0xC0 DUP6 ADD PUSH2 0x14B2 JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C5C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1075 DUP2 PUSH2 0x24A2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C78 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1075 DUP2 PUSH2 0x24B5 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH13 0x1000000000000000000000000 MUL SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1CF8 JUMPI DUP2 MLOAD PUSH1 0xF SIGNEXTEND DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1CD9 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1CF8 JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1D16 JUMP JUMPDEST PUSH1 0x0 SIGNEXTEND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x1D51 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x2410 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E0 DUP3 MLOAD DUP2 DUP6 MSTORE PUSH2 0x1D99 DUP3 DUP7 ADD DUP3 PUSH2 0x1D39 JUMP JUMPDEST SWAP2 POP POP PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x1DAE PUSH1 0x20 DUP7 ADD DUP3 PUSH2 0x1F4F JUMP JUMPDEST POP PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x1DC1 PUSH1 0x40 DUP7 ADD DUP3 PUSH2 0x1F46 JUMP JUMPDEST POP PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0x1DD4 PUSH1 0x60 DUP7 ADD DUP3 PUSH2 0x1F5A JUMP JUMPDEST POP PUSH1 0x80 DUP4 ADD MLOAD PUSH2 0x1DE7 PUSH1 0x80 DUP7 ADD DUP3 PUSH2 0x1F5A JUMP JUMPDEST POP PUSH1 0xA0 DUP4 ADD MLOAD PUSH2 0x1DFA PUSH1 0xA0 DUP7 ADD DUP3 PUSH2 0x1F5A JUMP JUMPDEST POP PUSH1 0xC0 DUP4 ADD MLOAD PUSH2 0x1E0D PUSH1 0xC0 DUP7 ADD DUP3 PUSH2 0x1D32 JUMP JUMPDEST POP PUSH1 0xE0 DUP4 ADD MLOAD PUSH2 0x1E20 PUSH1 0xE0 DUP7 ADD DUP3 PUSH2 0x1C83 JUMP JUMPDEST POP PUSH2 0x100 DUP1 DUP5 ADD MLOAD PUSH2 0x1E34 DUP3 DUP8 ADD DUP3 PUSH2 0x1F5A JUMP JUMPDEST POP POP PUSH2 0x120 DUP1 DUP5 ADD MLOAD PUSH2 0x1E49 DUP3 DUP8 ADD DUP3 PUSH2 0x1F5A JUMP JUMPDEST POP POP PUSH2 0x140 DUP1 DUP5 ADD MLOAD PUSH2 0x1E5E DUP3 DUP8 ADD DUP3 PUSH2 0x1F5A JUMP JUMPDEST POP POP PUSH2 0x160 DUP1 DUP5 ADD MLOAD PUSH2 0x1E73 DUP3 DUP8 ADD DUP3 PUSH2 0x1F5A JUMP JUMPDEST POP POP PUSH2 0x180 DUP1 DUP5 ADD MLOAD PUSH2 0x1E88 DUP3 DUP8 ADD DUP3 PUSH2 0x1C83 JUMP JUMPDEST POP POP PUSH2 0x1A0 DUP1 DUP5 ADD MLOAD PUSH2 0x1E9D DUP3 DUP8 ADD DUP3 PUSH2 0x1C83 JUMP JUMPDEST POP POP PUSH2 0x1C0 DUP1 DUP5 ADD MLOAD DUP6 DUP4 SUB DUP3 DUP8 ADD MSTORE PUSH2 0x1EB7 DUP4 DUP3 PUSH2 0x1CC6 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0xE0 DUP5 MSTORE PUSH2 0x1ED6 PUSH1 0xE0 DUP6 ADD DUP3 PUSH2 0x1D83 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP4 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 MLOAD AND PUSH1 0x20 DUP7 ADD MSTORE PUSH2 0xFFFF PUSH1 0x20 DUP3 ADD MLOAD AND PUSH1 0x40 DUP7 ADD MSTORE PUSH1 0x40 DUP2 ADD MLOAD ISZERO ISZERO PUSH1 0x60 DUP7 ADD MSTORE POP PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x3 DUP2 LT PUSH2 0x1F2A JUMPI INVALID JUMPDEST PUSH1 0xA0 DUP6 ADD MSTORE PUSH1 0x80 SWAP3 SWAP1 SWAP3 ADD MLOAD ISZERO ISZERO PUSH1 0xC0 SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0xFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH5 0xFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0xFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP11 DUP3 MSTORE PUSH28 0x1000000000000000000000000000000000000000000000000000000 PUSH5 0xFFFFFFFFFF DUP12 AND MUL PUSH1 0x20 DUP4 ADD MSTORE PUSH30 0x10000000000000000000000000000000000000000000000000000000000 PUSH3 0xFFFFFF DUP11 AND MUL PUSH1 0x25 DUP4 ADD MSTORE PUSH32 0x100000000000000000000000000000000000000000000000000000000000000 DUP1 PUSH1 0xFF DUP11 AND MUL PUSH1 0x28 DUP5 ADD MSTORE DUP1 PUSH1 0xFF DUP10 AND MUL PUSH1 0x29 DUP5 ADD MSTORE DUP1 PUSH1 0xFF DUP9 AND MUL PUSH1 0x2A DUP5 ADD MSTORE DUP1 DUP7 DUP4 SIGNEXTEND MUL PUSH1 0x2B DUP5 ADD MSTORE DUP1 PUSH1 0xFF DUP7 AND MUL PUSH1 0x2C DUP5 ADD MSTORE POP PUSH2 0x2021 PUSH1 0x2D DUP4 ADD DUP5 PUSH2 0x1C9D JUMP JUMPDEST POP PUSH1 0x41 ADD SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH1 0x20 PUSH2 0x2045 DUP3 DUP6 DUP4 DUP10 ADD PUSH2 0x2410 JUMP JUMPDEST DUP5 MLOAD SWAP2 DUP5 ADD SWAP2 DUP2 DUP7 ADD DUP5 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x206F JUMPI DUP2 MLOAD PUSH1 0xF SIGNEXTEND DUP6 MSTORE SWAP4 DUP4 ADD SWAP4 SWAP1 DUP4 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2050 JUMP JUMPDEST POP SWAP3 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x208E DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x2410 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 DUP7 ADD SWAP2 POP PUSH1 0x40 DUP5 DUP3 MUL DUP8 ADD ADD SWAP3 POP DUP4 DUP8 ADD DUP6 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x206F JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0 DUP9 DUP7 SUB ADD DUP5 MSTORE PUSH2 0x211D DUP6 DUP4 MLOAD PUSH2 0x1EC1 JUMP JUMPDEST SWAP5 POP SWAP3 DUP6 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x20E3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x1075 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1D03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP1 DUP4 MSTORE PUSH2 0x2155 DUP2 DUP5 ADD DUP7 PUSH2 0x1D03 JUMP JUMPDEST DUP4 DUP2 SUB PUSH1 0x20 DUP6 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP6 MLOAD DUP1 DUP4 MSTORE DUP7 DUP3 ADD SWAP3 DUP3 ADD SWAP1 DUP6 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x21AA JUMPI DUP5 MLOAD DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 MSTORE DUP5 ADD MLOAD DUP5 DUP5 ADD MSTORE SWAP4 DUP4 ADD SWAP4 SWAP2 DUP6 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x216F JUMP JUMPDEST POP SWAP1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP3 MSTORE PUSH5 0xFFFFFFFFFF DUP1 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE DUP1 DUP6 AND PUSH1 0x40 DUP5 ADD MSTORE POP PUSH1 0x80 PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x1EB7 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x1D39 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x1075 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1D39 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x22 SWAP1 DUP3 ADD MSTORE PUSH32 0x4F6E6C79206F776E65722063616E2063616C6C20746869732066756E6374696F PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6E2E000000000000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x15 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F6F2066617220696E20746865206675747572650000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1B SWAP1 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x15 SWAP1 DUP3 ADD MSTORE PUSH32 0x7265676973746572206E6F7420706F737369626C650000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 MSTORE PUSH2 0x2324 PUSH1 0xA0 DUP4 ADD DUP7 PUSH2 0x1D83 JUMP JUMPDEST SWAP1 POP DUP4 ISZERO ISZERO PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0xFF DUP4 MLOAD AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x80 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x1075 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1EC1 JUMP JUMPDEST PUSH5 0xFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0xFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x23A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x23C4 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x23E4 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x242B JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2413 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x243A JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x2462 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x2462 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0xF SIGNEXTEND DUP2 EQ PUSH2 0x2462 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x0 SIGNEXTEND DUP2 EQ PUSH2 0x2462 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0xFFFFFF DUP2 AND DUP2 EQ PUSH2 0x2462 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH5 0xFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x2462 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x2462 JUMPI PUSH1 0x0 DUP1 REVERT INVALID STOP STOP STOP STOP STOP STOP STOP STOP STOP STATICCALL PUSH30 0x3B53800000000A8C0000000001FA40000000001C200000000000 STOP LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SHR ADDRESS DUP14 ADDMOD 0xC0 MSTORE8 EXP 0xC PUSH28 0x78D3B7310D167E45973BC2355D95FDF976B8C20F5DDC4264736F6C63 NUMBER STOP SMOD STOP STOP CALLER ",
				"sourceMap": "1737:13205:2:-:0;;;3210:1;3172:39;;4008:163;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4075:5;:18;;4083:10;-1:-1:-1;;;;;;4075:18:2;;;;;;;4117:12;-1:-1:-1;4103:26:2;4139:18;:25;;;;;-1:-1:-1;;;;;4139:25:2;;;;;;;;;;1737:13205;;200:317:-1;;342:2;330:9;321:7;317:23;313:32;310:2;;;-1:-1;;348:12;310:2;110:13;;-1:-1;;;;;809:54;;961:62;;951:2;;-1:-1;;1027:12;951:2;400:101;304:213;-1:-1;;;304:213::o;:::-;1737:13205:2;;;;;;"
			},
			"deployedBytecode": {
				"immutableReferences": {},
				"linkReferences": {},
				"object": "",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xDB JUMPI PUSH1 0x0 CALLDATALOAD PUSH29 0x100000000000000000000000000000000000000000000000000000000 SWAP1 DIV DUP1 PUSH4 0x711C2B94 GT PUSH2 0x93 JUMPI DUP1 PUSH4 0x8677E7B9 GT PUSH2 0x78 JUMPI DUP1 PUSH4 0x8677E7B9 EQ PUSH2 0x19C JUMPI DUP1 PUSH4 0xB3889BB3 EQ PUSH2 0x1AF JUMPI DUP1 PUSH4 0xC70BE146 EQ PUSH2 0x1CF JUMPI PUSH2 0xDB JUMP JUMPDEST DUP1 PUSH4 0x711C2B94 EQ PUSH2 0x174 JUMPI DUP1 PUSH4 0x7CC1F867 EQ PUSH2 0x187 JUMPI PUSH2 0xDB JUMP JUMPDEST DUP1 PUSH4 0x2556D8D0 GT PUSH2 0xC4 JUMPI DUP1 PUSH4 0x2556D8D0 EQ PUSH2 0x11F JUMPI DUP1 PUSH4 0x52D02688 EQ PUSH2 0x13F JUMPI DUP1 PUSH4 0x65E47B8C EQ PUSH2 0x15F JUMPI PUSH2 0xDB JUMP JUMPDEST DUP1 PUSH4 0x95200CE EQ PUSH2 0xE0 JUMPI DUP1 PUSH4 0xF8F8244 EQ PUSH2 0x109 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF3 PUSH2 0xEE CALLDATASIZE PUSH1 0x4 PUSH2 0x1C4B JUMP JUMPDEST PUSH2 0x1EF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x100 SWAP2 SWAP1 PUSH2 0x2379 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x111 PUSH2 0x29E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x100 SWAP3 SWAP2 SWAP1 PUSH2 0x2142 JUMP JUMPDEST PUSH2 0x132 PUSH2 0x12D CALLDATASIZE PUSH1 0x4 PUSH2 0x1AEF JUMP JUMPDEST PUSH2 0x4A5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x100 SWAP2 SWAP1 PUSH2 0x21C3 JUMP JUMPDEST PUSH2 0x152 PUSH2 0x14D CALLDATASIZE PUSH1 0x4 PUSH2 0x18FD JUMP JUMPDEST PUSH2 0x5AF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x100 SWAP2 SWAP1 PUSH2 0x20BE JUMP JUMPDEST PUSH2 0x172 PUSH2 0x16D CALLDATASIZE PUSH1 0x4 PUSH2 0x197F JUMP JUMPDEST PUSH2 0x669 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x172 PUSH2 0x182 CALLDATASIZE PUSH1 0x4 PUSH2 0x1A52 JUMP JUMPDEST PUSH2 0x80C JUMP JUMPDEST PUSH2 0x18F PUSH2 0x89B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x100 SWAP2 SWAP1 PUSH2 0x212F JUMP JUMPDEST PUSH2 0x172 PUSH2 0x1AA CALLDATASIZE PUSH1 0x4 PUSH2 0x1A52 JUMP JUMPDEST PUSH2 0xA22 JUMP JUMPDEST PUSH2 0x1C2 PUSH2 0x1BD CALLDATASIZE PUSH1 0x4 PUSH2 0x1A81 JUMP JUMPDEST PUSH2 0xB59 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x100 SWAP2 SWAP1 PUSH2 0x21B8 JUMP JUMPDEST PUSH2 0x1E2 PUSH2 0x1DD CALLDATASIZE PUSH1 0x4 PUSH2 0x197F JUMP JUMPDEST PUSH2 0xC73 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x100 SWAP2 SWAP1 PUSH2 0x2354 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH32 0x95200CE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x95200CE SWAP1 PUSH2 0x246 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x2367 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x25E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x272 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x296 SWAP2 SWAP1 PUSH2 0x1C67 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x7 DUP1 DUP3 MSTORE PUSH2 0x100 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 DUP3 SWAP2 SWAP1 PUSH1 0x20 DUP3 ADD PUSH1 0xE0 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP2 POP PUSH3 0x350000 DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x2D6 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP4 SWAP1 DUP2 MLOAD DUP2 LT PUSH2 0x308 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x64 DUP3 PUSH1 0x2 DUP2 MLOAD DUP2 LT PUSH2 0x322 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0xA DUP3 PUSH1 0x3 DUP2 MLOAD DUP2 LT PUSH2 0x33C JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0xA DUP3 PUSH1 0x4 DUP2 MLOAD DUP2 LT PUSH2 0x356 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x5 DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x36F JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH2 0x258 DUP3 PUSH1 0x6 DUP2 MLOAD DUP2 LT PUSH2 0x38A JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x6 SLOAD DUP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x3AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3E9 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x3D6 PUSH2 0x12CE JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x3CE JUMPI SWAP1 POP JUMPDEST POP PUSH1 0x4 SLOAD SWAP1 SWAP3 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x49E JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND DUP1 DUP3 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE SWAP3 SWAP1 KECCAK256 SLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP5 MLOAD DUP6 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0x459 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 SWAP1 DUP2 ADD SLOAD SWAP1 SWAP3 AND SWAP2 ADD PUSH2 0x409 JUMP JUMPDEST POP POP POP SWAP1 SWAP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4B0 DUP5 PUSH2 0xB59 JUMP JUMPDEST PUSH2 0x4EF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4E6 SWAP1 PUSH2 0x22DA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH32 0x2556D8D000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0x2556D8D0 SWAP1 PUSH2 0x549 SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x2311 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x563 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x577 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x59B SWAP2 SWAP1 PUSH2 0x1A3A JUMP JUMPDEST SWAP1 POP PUSH2 0x5A8 DUP5 DUP3 DUP6 PUSH2 0xD65 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x5C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x602 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x5EF PUSH2 0x12E5 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x5E7 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x661 JUMPI PUSH2 0x642 DUP6 PUSH1 0x7 PUSH1 0x0 DUP8 DUP8 DUP7 DUP2 DUP2 LT PUSH2 0x624 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD PUSH2 0xC73 JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x64E JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x608 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x6BA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4E6 SWAP1 PUSH2 0x220F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH21 0x10000000000000000000000000000000000000000 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x730 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP2 SWAP1 SSTORE PUSH2 0x808 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE DUP5 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND PUSH1 0x20 DUP1 DUP4 ADD SWAP2 DUP3 MSTORE PUSH1 0x1 DUP4 DUP6 ADD DUP2 DUP2 MSTORE DUP10 DUP8 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 SWAP1 SWAP5 MSTORE SWAP6 SWAP1 SWAP3 KECCAK256 SWAP4 MLOAD DUP5 SSTORE SWAP2 MLOAD SWAP3 DUP3 ADD DUP1 SLOAD SWAP2 MLOAD ISZERO ISZERO PUSH21 0x10000000000000000000000000000000000000000 MUL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 SWAP1 SWAP7 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 SWAP3 DUP4 AND OR SWAP4 SWAP1 SWAP4 AND SWAP5 SWAP1 SWAP5 OR SWAP1 SWAP2 SSTORE DUP4 SLOAD SWAP1 SWAP3 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x6 DUP1 SLOAD SWAP1 SWAP2 ADD SWAP1 SSTORE JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x85D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4E6 SWAP1 PUSH2 0x220F JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x7CC1F867 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH29 0x100000000000000000000000000000000000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x924 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x938 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x97E SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x19AA JUMP JUMPDEST SWAP1 POP PUSH1 0x2 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x98F JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH3 0x350000 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x9AB JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH1 0x3 DUP2 MLOAD DUP2 LT PUSH2 0x9DC JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x0 SLOAD DUP2 PUSH1 0x4 DUP2 MLOAD DUP2 LT PUSH2 0x9F7 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x3 SLOAD DUP2 PUSH1 0x8 DUP2 MLOAD DUP2 LT PUSH2 0xA12 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xA2A PUSH2 0x1320 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH32 0xEE1F69EB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0xEE1F69EB SWAP1 PUSH2 0xA80 SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x21C3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA98 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xAAC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xAF2 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1ABC JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x20 ADD MLOAD PUSH5 0xFFFFFFFFFF AND PUSH1 0x0 EQ ISZERO PUSH2 0xB0A JUMPI INVALID JUMPDEST PUSH2 0xB13 DUP2 PUSH2 0xB59 JUMP JUMPDEST PUSH2 0xB49 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4E6 SWAP1 PUSH2 0x22DA JUMP JUMPDEST PUSH2 0xB54 DUP2 DUP5 DUP5 PUSH2 0xD65 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ ISZERO PUSH2 0xB84 JUMPI POP PUSH1 0x1 PUSH2 0x299 JUMP JUMPDEST PUSH1 0xE0 DUP3 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0xBBA JUMPI POP PUSH1 0x0 PUSH2 0x299 JUMP JUMPDEST PUSH1 0x64 PUSH2 0xBF1 DUP4 PUSH2 0x160 ADD MLOAD PUSH1 0xFF AND PUSH2 0xBEB DUP6 PUSH2 0x140 ADD MLOAD PUSH1 0xFF AND DUP7 PUSH2 0x120 ADD MLOAD PUSH1 0xFF AND PUSH2 0x1036 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 PUSH2 0x1036 JUMP JUMPDEST GT ISZERO DUP1 ISZERO PUSH2 0xC08 JUMPI POP PUSH1 0xA DUP3 PUSH2 0x120 ADD MLOAD PUSH1 0xFF AND LT ISZERO JUMPDEST DUP1 ISZERO PUSH2 0xC1D JUMPI POP PUSH1 0xA DUP3 PUSH2 0x140 ADD MLOAD PUSH1 0xFF AND LT ISZERO JUMPDEST DUP1 ISZERO PUSH2 0xC32 JUMPI POP PUSH1 0x5 DUP3 PUSH2 0x160 ADD MLOAD PUSH1 0xFF AND LT ISZERO JUMPDEST DUP1 ISZERO PUSH2 0xC5E JUMPI POP PUSH1 0x1 SLOAD PUSH2 0x180 DUP4 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ JUMPDEST ISZERO PUSH2 0xC6B JUMPI POP PUSH1 0x1 PUSH2 0x299 JUMP JUMPDEST POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xC7B PUSH2 0x12E5 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH32 0xC70BE14600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0xC70BE146 SWAP1 PUSH2 0xCD3 SWAP1 DUP7 SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x2098 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xCEB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xCFF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xD45 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1BA0 JUMP JUMPDEST PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 SWAP3 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x80 DUP4 ADD MSTORE POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD70 DUP5 PUSH2 0x107E JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD SWAP2 SWAP3 POP SWAP1 PUSH2 0xFBF JUMPI PUSH1 0x1 SLOAD PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0xDB4 JUMPI TIMESTAMP PUSH2 0x258 ADD PUSH2 0xDB7 JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE DUP8 DUP2 MSTORE PUSH2 0x120 DUP10 ADD MLOAD PUSH1 0xFF SWAP1 DUP2 AND PUSH1 0x20 DUP1 DUP5 ADD SWAP2 DUP3 MSTORE PUSH5 0xFFFFFFFFFF DUP7 DUP2 AND DUP6 DUP8 ADD SWAP1 DUP2 MSTORE PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x7 SWAP1 SWAP4 MSTORE SWAP6 SWAP1 SWAP2 KECCAK256 SWAP4 MLOAD DUP5 SSTORE SWAP1 MLOAD PUSH1 0x1 SWAP4 DUP5 ADD DUP1 SLOAD SWAP6 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 SWAP1 SWAP7 AND SWAP2 SWAP1 SWAP4 AND OR PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000FF AND SWAP4 AND PUSH2 0x100 MUL SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE SLOAD SWAP1 SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ ISZERO PUSH2 0xEB5 JUMPI PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP6 ISZERO ISZERO OR SWAP1 SSTORE JUMPDEST PUSH1 0x0 DUP7 PUSH1 0x80 ADD MLOAD PUSH1 0x8 MUL PUSH1 0xFF AND DUP8 PUSH2 0x100 ADD MLOAD PUSH1 0xFF AND PUSH1 0x1 SWAP1 PUSH1 0x2 EXP MUL SWAP1 PUSH1 0x2 EXP MUL SWAP1 POP DUP1 PUSH1 0x3 SLOAD AND PUSH1 0x0 EQ ISZERO PUSH2 0xEEF JUMPI PUSH1 0x3 DUP1 SLOAD DUP3 OR SWAP1 SSTORE JUMPDEST PUSH1 0x60 DUP8 ADD MLOAD PUSH1 0x0 SWAP1 PUSH1 0x4 AND ISZERO PUSH2 0xF0B JUMPI POP PUSH2 0x100 DUP8 ADD MLOAD PUSH2 0xF1B JUMP JUMPDEST PUSH2 0xF18 DUP9 PUSH1 0x20 ADD MLOAD PUSH2 0x1162 JUMP JUMPDEST SWAP1 POP JUMPDEST DUP8 PUSH1 0x80 ADD MLOAD PUSH1 0xFF AND DUP9 PUSH2 0x100 ADD MLOAD PUSH1 0xFF AND DUP3 PUSH1 0xFF AND PUSH1 0x8 PUSH2 0xF3E DUP6 PUSH1 0xFF AND PUSH2 0x121D JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF AND DUP13 PUSH1 0x20 ADD MLOAD PUSH5 0xFFFFFFFFFF AND DUP2 PUSH2 0xF59 JUMPI INVALID JUMPDEST DIV PUSH6 0xFFFFFFFFFFFF AND SWAP1 PUSH1 0x2 EXP MUL ADD PUSH6 0xFFFFFFFFFFFF AND PUSH32 0x3D4B4C0DC42D96DA48D02A2693392BFA4FDBFB0BEC570E48F5186F9F75FE8ECB DUP9 DUP13 PUSH1 0x20 ADD MLOAD DUP9 DUP15 PUSH1 0x0 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0xFAD SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x21CC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP PUSH2 0xB54 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SLOAD PUSH2 0x120 DUP7 ADD MLOAD PUSH1 0xFF SWAP2 DUP3 AND SWAP2 AND GT DUP1 ISZERO PUSH2 0xFED JUMPI POP PUSH1 0x1 DUP2 ADD SLOAD PUSH2 0x100 SWAP1 DIV PUSH5 0xFFFFFFFFFF AND TIMESTAMP LT JUMPDEST ISZERO PUSH2 0x102F JUMPI DUP4 DUP2 SSTORE PUSH2 0x120 DUP6 ADD MLOAD PUSH1 0x1 DUP3 ADD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0xFF SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x1075 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4E6 SWAP1 PUSH2 0x22A3 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 PUSH1 0x0 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1097 SWAP2 SWAP1 PUSH2 0x207C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP4 PUSH1 0x20 ADD MLOAD DUP5 PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0x60 ADD MLOAD DUP7 PUSH1 0x80 ADD MLOAD DUP8 PUSH1 0xA0 ADD MLOAD DUP9 PUSH1 0xC0 ADD MLOAD DUP10 PUSH2 0x100 ADD MLOAD DUP11 PUSH1 0xE0 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x10EE SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1F61 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x60 DUP5 ADD MLOAD SWAP1 SWAP2 POP PUSH1 0x1 AND PUSH2 0x1154 JUMPI PUSH2 0x1C0 DUP4 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x1142 SWAP2 DUP4 SWAP2 PUSH1 0x20 ADD PUSH2 0x2032 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP JUMPDEST DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH2 0x1177 PUSH5 0xFFFFFFFFFF DUP6 AND TIMESTAMP PUSH2 0x124B JUMP JUMPDEST SWAP1 POP PUSH4 0x3C26700 DUP2 LT PUSH2 0x11B6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4E6 SWAP1 PUSH2 0x226C JUMP JUMPDEST PUSH3 0x3B5380 DUP2 GT ISZERO PUSH2 0x11CB JUMPI PUSH1 0x1 JUMPDEST SWAP2 POP PUSH2 0x1216 JUMP JUMPDEST PUSH3 0xA8C00 DUP2 GT ISZERO PUSH2 0x11DD JUMPI PUSH1 0x3 PUSH2 0x11C4 JUMP JUMPDEST PUSH3 0x1FA40 DUP2 GT ISZERO PUSH2 0x11EF JUMPI PUSH1 0x4 PUSH2 0x11C4 JUMP JUMPDEST PUSH2 0x1C20 DUP2 GT ISZERO PUSH2 0x1200 JUMPI PUSH1 0x5 PUSH2 0x11C4 JUMP JUMPDEST PUSH2 0x384 DUP2 GT ISZERO PUSH2 0x1211 JUMPI PUSH1 0x6 PUSH2 0x11C4 JUMP JUMPDEST PUSH1 0x7 SWAP2 POP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2A DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x24C5 PUSH1 0x2A SWAP2 CODECOPY PUSH1 0x1 DUP5 ADD PUSH1 0x6 MUL ADD MLOAD SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1075 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1E DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 DUP2 MSTORE POP PUSH1 0x0 DUP2 DUP5 DUP5 GT ISZERO PUSH2 0x12C6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4E6 SWAP2 SWAP1 PUSH2 0x21FC JUMP JUMPDEST POP POP POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x12F8 PUSH2 0x1320 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1305 PUSH2 0x139E JUMP JUMPDEST DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x60 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0x1E0 DUP2 ADD DUP3 MSTORE PUSH1 0x60 DUP1 DUP3 MSTORE PUSH1 0x0 PUSH1 0x20 DUP4 ADD DUP2 SWAP1 MSTORE SWAP3 DUP3 ADD DUP4 SWAP1 MSTORE DUP1 DUP3 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 DUP3 ADD DUP4 SWAP1 MSTORE PUSH1 0xA0 DUP3 ADD DUP4 SWAP1 MSTORE PUSH1 0xC0 DUP3 ADD DUP4 SWAP1 MSTORE PUSH1 0xE0 DUP3 ADD DUP4 SWAP1 MSTORE PUSH2 0x100 DUP3 ADD DUP4 SWAP1 MSTORE PUSH2 0x120 DUP3 ADD DUP4 SWAP1 MSTORE PUSH2 0x140 DUP3 ADD DUP4 SWAP1 MSTORE PUSH2 0x160 DUP3 ADD DUP4 SWAP1 MSTORE PUSH2 0x180 DUP3 ADD DUP4 SWAP1 MSTORE PUSH2 0x1A0 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH2 0x1C0 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x1078 DUP2 PUSH2 0x2440 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x1078 DUP2 PUSH2 0x2440 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x13E4 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x13F7 PUSH2 0x13F2 DUP3 PUSH2 0x23AE JUMP JUMPDEST PUSH2 0x2387 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x1418 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x1440 JUMPI DUP2 CALLDATALOAD PUSH2 0x142E DUP2 PUSH2 0x2473 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x141B JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x145B JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1469 PUSH2 0x13F2 DUP3 PUSH2 0x23AE JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x148A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x1440 JUMPI DUP2 MLOAD PUSH2 0x14A0 DUP2 PUSH2 0x2473 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x148D JUMP JUMPDEST DUP1 MLOAD PUSH2 0x1078 DUP2 PUSH2 0x2465 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x3 DUP2 LT PUSH2 0x1078 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x1078 DUP2 PUSH2 0x2482 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x1078 DUP2 PUSH2 0x2482 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x14F2 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1500 PUSH2 0x13F2 DUP3 PUSH2 0x23CE JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1517 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1540 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x154E PUSH2 0x13F2 DUP3 PUSH2 0x23CE JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1565 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1216 DUP2 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x2410 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E0 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1589 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1592 DUP2 PUSH2 0x2387 JUMP JUMPDEST SWAP2 POP POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x15AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x15B9 DUP6 DUP4 DUP7 ADD PUSH2 0x14E2 JUMP JUMPDEST DUP4 MSTORE PUSH2 0x15C8 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x18D1 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x15DA DUP6 PUSH1 0x40 DUP7 ADD PUSH2 0x18BB JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x15EC DUP6 PUSH1 0x60 DUP7 ADD PUSH2 0x18E7 JUMP JUMPDEST PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x15FE DUP6 PUSH1 0x80 DUP7 ADD PUSH2 0x18E7 JUMP JUMPDEST PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x1610 DUP6 PUSH1 0xA0 DUP7 ADD PUSH2 0x18E7 JUMP JUMPDEST PUSH1 0xA0 DUP5 ADD MSTORE PUSH2 0x1622 DUP6 PUSH1 0xC0 DUP7 ADD PUSH2 0x14CC JUMP JUMPDEST PUSH1 0xC0 DUP5 ADD MSTORE PUSH2 0x1634 DUP6 PUSH1 0xE0 DUP7 ADD PUSH2 0x13BE JUMP JUMPDEST PUSH1 0xE0 DUP5 ADD MSTORE PUSH2 0x100 SWAP2 POP PUSH2 0x164A DUP6 DUP4 DUP7 ADD PUSH2 0x18E7 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE PUSH2 0x120 SWAP2 POP PUSH2 0x165F DUP6 DUP4 DUP7 ADD PUSH2 0x18E7 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE PUSH2 0x140 SWAP2 POP PUSH2 0x1674 DUP6 DUP4 DUP7 ADD PUSH2 0x18E7 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE PUSH2 0x160 SWAP2 POP PUSH2 0x1689 DUP6 DUP4 DUP7 ADD PUSH2 0x18E7 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE PUSH2 0x180 SWAP2 POP PUSH2 0x169E DUP6 DUP4 DUP7 ADD PUSH2 0x13BE JUMP JUMPDEST DUP3 DUP5 ADD MSTORE PUSH2 0x1A0 SWAP2 POP PUSH2 0x16B3 DUP6 DUP4 DUP7 ADD PUSH2 0x13BE JUMP JUMPDEST DUP3 DUP5 ADD MSTORE PUSH2 0x1C0 SWAP2 POP DUP2 DUP5 ADD CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x16CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x16D9 DUP7 DUP3 DUP8 ADD PUSH2 0x13D4 JUMP JUMPDEST DUP4 DUP6 ADD MSTORE POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E0 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x16F9 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1702 DUP2 PUSH2 0x2387 JUMP JUMPDEST SWAP2 POP POP DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x171D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1729 DUP6 DUP4 DUP7 ADD PUSH2 0x1530 JUMP JUMPDEST DUP4 MSTORE PUSH2 0x1738 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x18DC JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x174A DUP6 PUSH1 0x40 DUP7 ADD PUSH2 0x18C6 JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x175C DUP6 PUSH1 0x60 DUP7 ADD PUSH2 0x18F2 JUMP JUMPDEST PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x176E DUP6 PUSH1 0x80 DUP7 ADD PUSH2 0x18F2 JUMP JUMPDEST PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x1780 DUP6 PUSH1 0xA0 DUP7 ADD PUSH2 0x18F2 JUMP JUMPDEST PUSH1 0xA0 DUP5 ADD MSTORE PUSH2 0x1792 DUP6 PUSH1 0xC0 DUP7 ADD PUSH2 0x14D7 JUMP JUMPDEST PUSH1 0xC0 DUP5 ADD MSTORE PUSH2 0x17A4 DUP6 PUSH1 0xE0 DUP7 ADD PUSH2 0x13C9 JUMP JUMPDEST PUSH1 0xE0 DUP5 ADD MSTORE PUSH2 0x100 SWAP2 POP PUSH2 0x17BA DUP6 DUP4 DUP7 ADD PUSH2 0x18F2 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE PUSH2 0x120 SWAP2 POP PUSH2 0x17CF DUP6 DUP4 DUP7 ADD PUSH2 0x18F2 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE PUSH2 0x140 SWAP2 POP PUSH2 0x17E4 DUP6 DUP4 DUP7 ADD PUSH2 0x18F2 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE PUSH2 0x160 SWAP2 POP PUSH2 0x17F9 DUP6 DUP4 DUP7 ADD PUSH2 0x18F2 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE PUSH2 0x180 SWAP2 POP PUSH2 0x180E DUP6 DUP4 DUP7 ADD PUSH2 0x13C9 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE PUSH2 0x1A0 SWAP2 POP PUSH2 0x1823 DUP6 DUP4 DUP7 ADD PUSH2 0x13C9 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE PUSH2 0x1C0 SWAP2 POP DUP2 DUP5 ADD MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x183D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x16D9 DUP7 DUP3 DUP8 ADD PUSH2 0x144B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x185A JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x1864 PUSH1 0x60 PUSH2 0x2387 JUMP JUMPDEST SWAP1 POP DUP2 MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1886 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ PUSH2 0x189D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x18B0 DUP2 PUSH2 0x2465 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x1078 DUP2 PUSH2 0x2491 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x1078 DUP2 PUSH2 0x2491 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x1078 DUP2 PUSH2 0x24A2 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x1078 DUP2 PUSH2 0x24A2 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x1078 DUP2 PUSH2 0x24B5 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x1078 DUP2 PUSH2 0x24B5 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1911 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x191C DUP2 PUSH2 0x2440 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1938 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x194B JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x1959 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP8 PUSH1 0x20 DUP1 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0x196C JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP5 POP DUP1 SWAP4 POP POP POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1991 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x199C DUP2 PUSH2 0x2440 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x19BC JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x19D2 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x19E2 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x19F0 PUSH2 0x13F2 DUP3 PUSH2 0x23AE JUMP JUMPDEST DUP2 DUP2 MSTORE DUP4 DUP2 ADD SWAP1 DUP4 DUP6 ADD DUP6 DUP5 MUL DUP6 ADD DUP7 ADD DUP10 LT ISZERO PUSH2 0x1A0C JUMPI DUP7 DUP8 REVERT JUMPDEST DUP7 SWAP5 POP JUMPDEST DUP4 DUP6 LT ISZERO PUSH2 0x1A2E JUMPI DUP1 MLOAD DUP4 MSTORE PUSH1 0x1 SWAP5 SWAP1 SWAP5 ADD SWAP4 SWAP2 DUP6 ADD SWAP2 DUP6 ADD PUSH2 0x1A10 JUMP JUMPDEST POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1A4B JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1A64 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x1A76 DUP2 PUSH2 0x2465 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1A92 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1AA8 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1AB4 DUP5 DUP3 DUP6 ADD PUSH2 0x1576 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1ACD JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1AE3 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1AB4 DUP5 DUP3 DUP6 ADD PUSH2 0x16E6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP6 SUB PUSH1 0xA0 DUP2 SLT ISZERO PUSH2 0x1B04 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1B1A JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x1B26 DUP8 DUP3 DUP9 ADD PUSH2 0x1576 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x1B37 DUP2 PUSH2 0x2465 JUMP JUMPDEST SWAP3 POP PUSH1 0x60 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0 DUP3 ADD SLT ISZERO PUSH2 0x1B68 JUMPI DUP2 DUP3 REVERT JUMPDEST POP PUSH2 0x1B73 PUSH1 0x60 PUSH2 0x2387 JUMP JUMPDEST PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x1B81 DUP2 PUSH2 0x24B5 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x80 SWAP1 SWAP5 ADD CALLDATALOAD PUSH1 0x40 DUP6 ADD MSTORE POP SWAP1 SWAP4 SWAP1 SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1BB1 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1BC8 JUMPI DUP3 DUP4 REVERT JUMPDEST SWAP1 DUP4 ADD SWAP1 PUSH1 0xE0 DUP3 DUP7 SUB SLT ISZERO PUSH2 0x1BDB JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x1BE5 PUSH1 0xA0 PUSH2 0x2387 JUMP JUMPDEST DUP3 MLOAD DUP3 DUP2 GT ISZERO PUSH2 0x1BF3 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x1BFF DUP8 DUP3 DUP7 ADD PUSH2 0x16E6 JUMP JUMPDEST DUP3 MSTORE POP PUSH2 0x1C0F DUP7 PUSH1 0x20 DUP6 ADD PUSH2 0x1849 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x1C2B DUP7 PUSH1 0xA0 DUP6 ADD PUSH2 0x14BD JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x1C3D DUP7 PUSH1 0xC0 DUP6 ADD PUSH2 0x14B2 JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C5C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1075 DUP2 PUSH2 0x24A2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C78 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1075 DUP2 PUSH2 0x24B5 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH13 0x1000000000000000000000000 MUL SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1CF8 JUMPI DUP2 MLOAD PUSH1 0xF SIGNEXTEND DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1CD9 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1CF8 JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1D16 JUMP JUMPDEST PUSH1 0x0 SIGNEXTEND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x1D51 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x2410 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E0 DUP3 MLOAD DUP2 DUP6 MSTORE PUSH2 0x1D99 DUP3 DUP7 ADD DUP3 PUSH2 0x1D39 JUMP JUMPDEST SWAP2 POP POP PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x1DAE PUSH1 0x20 DUP7 ADD DUP3 PUSH2 0x1F4F JUMP JUMPDEST POP PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x1DC1 PUSH1 0x40 DUP7 ADD DUP3 PUSH2 0x1F46 JUMP JUMPDEST POP PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0x1DD4 PUSH1 0x60 DUP7 ADD DUP3 PUSH2 0x1F5A JUMP JUMPDEST POP PUSH1 0x80 DUP4 ADD MLOAD PUSH2 0x1DE7 PUSH1 0x80 DUP7 ADD DUP3 PUSH2 0x1F5A JUMP JUMPDEST POP PUSH1 0xA0 DUP4 ADD MLOAD PUSH2 0x1DFA PUSH1 0xA0 DUP7 ADD DUP3 PUSH2 0x1F5A JUMP JUMPDEST POP PUSH1 0xC0 DUP4 ADD MLOAD PUSH2 0x1E0D PUSH1 0xC0 DUP7 ADD DUP3 PUSH2 0x1D32 JUMP JUMPDEST POP PUSH1 0xE0 DUP4 ADD MLOAD PUSH2 0x1E20 PUSH1 0xE0 DUP7 ADD DUP3 PUSH2 0x1C83 JUMP JUMPDEST POP PUSH2 0x100 DUP1 DUP5 ADD MLOAD PUSH2 0x1E34 DUP3 DUP8 ADD DUP3 PUSH2 0x1F5A JUMP JUMPDEST POP POP PUSH2 0x120 DUP1 DUP5 ADD MLOAD PUSH2 0x1E49 DUP3 DUP8 ADD DUP3 PUSH2 0x1F5A JUMP JUMPDEST POP POP PUSH2 0x140 DUP1 DUP5 ADD MLOAD PUSH2 0x1E5E DUP3 DUP8 ADD DUP3 PUSH2 0x1F5A JUMP JUMPDEST POP POP PUSH2 0x160 DUP1 DUP5 ADD MLOAD PUSH2 0x1E73 DUP3 DUP8 ADD DUP3 PUSH2 0x1F5A JUMP JUMPDEST POP POP PUSH2 0x180 DUP1 DUP5 ADD MLOAD PUSH2 0x1E88 DUP3 DUP8 ADD DUP3 PUSH2 0x1C83 JUMP JUMPDEST POP POP PUSH2 0x1A0 DUP1 DUP5 ADD MLOAD PUSH2 0x1E9D DUP3 DUP8 ADD DUP3 PUSH2 0x1C83 JUMP JUMPDEST POP POP PUSH2 0x1C0 DUP1 DUP5 ADD MLOAD DUP6 DUP4 SUB DUP3 DUP8 ADD MSTORE PUSH2 0x1EB7 DUP4 DUP3 PUSH2 0x1CC6 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0xE0 DUP5 MSTORE PUSH2 0x1ED6 PUSH1 0xE0 DUP6 ADD DUP3 PUSH2 0x1D83 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP4 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 MLOAD AND PUSH1 0x20 DUP7 ADD MSTORE PUSH2 0xFFFF PUSH1 0x20 DUP3 ADD MLOAD AND PUSH1 0x40 DUP7 ADD MSTORE PUSH1 0x40 DUP2 ADD MLOAD ISZERO ISZERO PUSH1 0x60 DUP7 ADD MSTORE POP PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x3 DUP2 LT PUSH2 0x1F2A JUMPI INVALID JUMPDEST PUSH1 0xA0 DUP6 ADD MSTORE PUSH1 0x80 SWAP3 SWAP1 SWAP3 ADD MLOAD ISZERO ISZERO PUSH1 0xC0 SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0xFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH5 0xFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0xFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP11 DUP3 MSTORE PUSH28 0x1000000000000000000000000000000000000000000000000000000 PUSH5 0xFFFFFFFFFF DUP12 AND MUL PUSH1 0x20 DUP4 ADD MSTORE PUSH30 0x10000000000000000000000000000000000000000000000000000000000 PUSH3 0xFFFFFF DUP11 AND MUL PUSH1 0x25 DUP4 ADD MSTORE PUSH32 0x100000000000000000000000000000000000000000000000000000000000000 DUP1 PUSH1 0xFF DUP11 AND MUL PUSH1 0x28 DUP5 ADD MSTORE DUP1 PUSH1 0xFF DUP10 AND MUL PUSH1 0x29 DUP5 ADD MSTORE DUP1 PUSH1 0xFF DUP9 AND MUL PUSH1 0x2A DUP5 ADD MSTORE DUP1 DUP7 DUP4 SIGNEXTEND MUL PUSH1 0x2B DUP5 ADD MSTORE DUP1 PUSH1 0xFF DUP7 AND MUL PUSH1 0x2C DUP5 ADD MSTORE POP PUSH2 0x2021 PUSH1 0x2D DUP4 ADD DUP5 PUSH2 0x1C9D JUMP JUMPDEST POP PUSH1 0x41 ADD SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH1 0x20 PUSH2 0x2045 DUP3 DUP6 DUP4 DUP10 ADD PUSH2 0x2410 JUMP JUMPDEST DUP5 MLOAD SWAP2 DUP5 ADD SWAP2 DUP2 DUP7 ADD DUP5 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x206F JUMPI DUP2 MLOAD PUSH1 0xF SIGNEXTEND DUP6 MSTORE SWAP4 DUP4 ADD SWAP4 SWAP1 DUP4 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2050 JUMP JUMPDEST POP SWAP3 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x208E DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x2410 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 DUP7 ADD SWAP2 POP PUSH1 0x40 DUP5 DUP3 MUL DUP8 ADD ADD SWAP3 POP DUP4 DUP8 ADD DUP6 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x206F JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0 DUP9 DUP7 SUB ADD DUP5 MSTORE PUSH2 0x211D DUP6 DUP4 MLOAD PUSH2 0x1EC1 JUMP JUMPDEST SWAP5 POP SWAP3 DUP6 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x20E3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x1075 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1D03 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP1 DUP4 MSTORE PUSH2 0x2155 DUP2 DUP5 ADD DUP7 PUSH2 0x1D03 JUMP JUMPDEST DUP4 DUP2 SUB PUSH1 0x20 DUP6 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP6 MLOAD DUP1 DUP4 MSTORE DUP7 DUP3 ADD SWAP3 DUP3 ADD SWAP1 DUP6 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x21AA JUMPI DUP5 MLOAD DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 MSTORE DUP5 ADD MLOAD DUP5 DUP5 ADD MSTORE SWAP4 DUP4 ADD SWAP4 SWAP2 DUP6 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x216F JUMP JUMPDEST POP SWAP1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP3 MSTORE PUSH5 0xFFFFFFFFFF DUP1 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE DUP1 DUP6 AND PUSH1 0x40 DUP5 ADD MSTORE POP PUSH1 0x80 PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x1EB7 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x1D39 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x1075 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1D39 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x22 SWAP1 DUP3 ADD MSTORE PUSH32 0x4F6E6C79206F776E65722063616E2063616C6C20746869732066756E6374696F PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6E2E000000000000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x15 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F6F2066617220696E20746865206675747572650000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1B SWAP1 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x15 SWAP1 DUP3 ADD MSTORE PUSH32 0x7265676973746572206E6F7420706F737369626C650000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 MSTORE PUSH2 0x2324 PUSH1 0xA0 DUP4 ADD DUP7 PUSH2 0x1D83 JUMP JUMPDEST SWAP1 POP DUP4 ISZERO ISZERO PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0xFF DUP4 MLOAD AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x80 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x1075 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1EC1 JUMP JUMPDEST PUSH5 0xFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0xFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x23A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x23C4 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x23E4 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x242B JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2413 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x243A JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x2462 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x2462 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0xF SIGNEXTEND DUP2 EQ PUSH2 0x2462 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x0 SIGNEXTEND DUP2 EQ PUSH2 0x2462 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0xFFFFFF DUP2 AND DUP2 EQ PUSH2 0x2462 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH5 0xFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x2462 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x2462 JUMPI PUSH1 0x0 DUP1 REVERT INVALID STOP STOP STOP STOP STOP STOP STOP STOP STOP STATICCALL PUSH30 0x3B53800000000A8C0000000001FA40000000001C200000000000 STOP LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SHR ADDRESS DUP14 ADDMOD 0xC0 MSTORE8 EXP 0xC PUSH28 0x78D3B7310D167E45973BC2355D95FDF976B8C20F5DDC4264736F6C63 NUMBER STOP SMOD STOP STOP CALLER ",
				"sourceMap": "1737:13205:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8291:251;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5653:1506;;;:::i;:::-;;;;;;;;:::i;9989:692::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;7612:673::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;14313:627::-;;;;;;:::i;:::-;;:::i;:::-;;13698:174;;;;;;:::i;:::-;;:::i;4324:1323::-;;;:::i;:::-;;;;;;;:::i;10687:530::-;;;;;;:::i;:::-;;:::i;8714:1055::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;7165:441::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;8291:251::-;8478:18;;:57;;;;;8441:14;;8478:18;;;:37;;:57;;8516:18;;8478:57;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;8471:64;;8291:251;;;;:::o;5653:1506::-;5832:50;;;5851:29;5832:50;;;;;;;;;5736:29;;;;5832:50;;;;;;;;;;;-1:-1:-1;;5817:65:2;-1:-1:-1;2273:66:2;5817:65;5914:51;5893:74;;;;;;;;;;;;;;;;;:84;6056:5;;;;;;5987:12;;:58;;;;;;;;;;;;;;;;;:75;2714:3;6072:12;6093:55;6072:78;;;;;;;;;;;;;;;;;:103;2777:2;6185:12;6206:50;6185:73;;;;;;;;;;;;;;;;;:94;2839:2;6289:12;6310:50;6289:73;;;;;;;;;;;;;;;;;:94;2906:1;6393:12;2906:1;6393:79;;;;;;;;;;;;;;;;;:105;2965:3;6508:12;6529:48;6508:71;;;;;;;;;;;;;;;;;:99;6639:19;;;6685:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;-1:-1:-1;6745:15:2;;6668:45;;-1:-1:-1;6745:15:2;;6724:18;6791:314;6810:10;6804:3;:16;6791:314;;;6866:125;;;;;;;;;;;;;;-1:-1:-1;6942:28:2;;;:16;6866:125;6942:28;;;;;;:34;6866:125;;;;;;;6844:19;;:14;;6859:3;;6844:19;;;;;;;;;;;;;;;;:147;;;;7057:28;;;;;;;;:16;:28;;;;;;:37;;;;;;;;;6823:5;6791:314;;;7115:37;;;5653:1506;;:::o;9989:692::-;10288:18;10331:34;10350:14;10331:18;:34::i;:::-;10322:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;10414:18;;:116;;;;;:18;;;;;:31;;:116;;10459:14;;10487:10;;10511:9;;10414:116;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;10401:129;;10540:107;10575:14;10603:10;10627;10540:20;:107::i;:::-;9989:692;;;;;:::o;7612:673::-;7918:49;8032:10;8000:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;7983:67;;8060:11;8082:166;8096:23;;;8082:166;;;8165:72;8191:4;8197:11;:28;8209:10;;8220:3;8209:15;;;;;;;;;;;;;8197:28;;;;;;;;;;;:39;;;8165:25;:72::i;:::-;8143:14;8158:3;8143:19;;;;;;;;;;;;;;;;;:94;8122:5;;8082:166;;;8257:21;7612:673;;;;;:::o;14313:627::-;3573:5;;;;3559:10;:19;3551:66;;;;;;;;;;;;:::i;:::-;14441:28:::1;::::0;::::1;;::::0;;;:16:::1;:28;::::0;;;;:35:::1;;::::0;;;::::1;;;14437:160;;;14524:28;::::0;::::1;;::::0;;;:16:::1;:28;::::0;;;;:42;;;14580:7:::1;;14437:160;14674:15;::::0;;14730:110:::1;::::0;;::::1;::::0;::::1;::::0;;;;;14674:15:::1;::::0;;::::1;14730:110;::::0;;::::1;::::0;;;14674:15;14730:110;;;;;;14699:28;;::::1;14656:15;14699:28:::0;;;:16:::1;:28:::0;;;;;;;:141;;;;;;;;::::1;::::0;;;;::::1;;::::0;::::1;::::0;;;;::::1;::::0;;;::::1;;::::0;;;::::1;::::0;;;::::1;::::0;;;14850:28;;;;::::1;;::::0;;;14910:19:::1;::::0;;:23;;::::1;14888:45:::0;;3627:1:::1;14313:627:::0;;:::o;13698:174::-;3573:5;;;;3559:10;:19;3551:66;;;;;;;;;;;;:::i;:::-;13828:24:::1;::::0;;;:12:::1;:24;::::0;;;;;:37;;;::::1;::::0;::::1;;::::0;;;::::1;::::0;;13698:174::o;4324:1323::-;4417:35;4468:27;4498:18;;;;;;;;;;;:34;;;:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4468:66;-1:-1:-1;4634:51:2;4559:10;4578:43;4559:64;;;;;;;;;;;;;;;;;:127;2273:66;4700:10;4719:51;4700:72;;;;;;;;;;;;;;;;;:82;4994:18;;;;4900:10;4919:54;4900:75;;;;;;;;;;;;;;;;;:114;5122:11;;5048:10;5067:50;5048:71;;;;;;;;;;;;;;;;;:85;5587:15;;5517:10;5536:46;5517:67;;;;;;;;;;;;;;;;;:85;5630:10;-1:-1:-1;4324:1323:2;:::o;10687:530::-;10800:51;;:::i;:::-;10854:18;;:60;;;;;:18;;;;;:48;;:60;;10903:10;;10854:60;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;10800:114;;10975:14;:33;;;:38;;11012:1;10975:38;;10968:46;;;;11034:34;11053:14;11034:18;:34::i;:::-;11025:69;;;;;;;;;;;;:::i;:::-;11104:106;11138:14;11166:10;11190;11104:20;:106::i;:::-;10687:530;;;:::o;8714:1055::-;8925:5;;8855:21;;8925:5;;8911:10;:19;8907:106;;;-1:-1:-1;8994:4:2;8987:11;;8907:106;9066:25;;;;9049:43;;;;;;:16;:43;;;;;:49;9027:156;;-1:-1:-1;9163:5:2;9156:12;;9027:156;2714:3;9260:136;9359:14;:35;;;9351:44;;9260:86;9314:14;:30;;;9306:39;;9269:14;:30;;;9261:39;;9260:45;;:86;;;;:::i;:::-;:90;;:136::i;:::-;:162;;9259:234;;;;;2777:2;9440:14;:30;;;:52;;;;9259:234;:304;;;;;2839:2;9510:14;:30;;;:52;;;;9259:304;:384;;;;;2906:1;9580:14;:35;;;:62;;;;9259:384;:435;;;;-1:-1:-1;9688:5:2;;9660:24;;;;9688:5;9660:33;;;9688:5;;9660:33;9259:435;9242:498;;;-1:-1:-1;9725:4:2;9718:11;;9242:498;-1:-1:-1;9757:5:2;8714:1055;;;:::o;7165:441::-;7376:43;;:::i;:::-;7448:18;;:62;;;;;:18;;;;;:44;;:62;;7493:4;;7499:10;;7448:62;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7575:24;;;;:12;:24;;;;;;;;;7551:48;;:21;;;:48;-1:-1:-1;7435:75:2;7165:441;-1:-1:-1;7165:441:2:o;11223:2469::-;11405:22;11430:49;11464:14;11430:33;:49::i;:::-;11490:29;11522:27;;;:11;:27;;;;;11564:21;;11405:74;;-1:-1:-1;11522:27:2;11560:1842;;11681:5;;11641:15;;11681:5;;11667:10;:19;11666:61;;11693:15;2965:3;11693:34;11666:61;;;11689:1;11666:61;11772:201;;;;;;;;;;;11875:30;;;;11772:201;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;11742:27:2;;;:11;:27;;;;;;;:231;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;11742:231:2;;;;;;;;12006:5;11772:201;;-1:-1:-1;12006:5:2;;11992:10;:19;11988:95;;;12031:24;;;;:12;:24;;;;;:37;;;;;;;;;;11988:95;12097:26;12176:14;:29;;;12208:1;12176:33;12126:84;;12140:14;:29;;;12132:38;;12127:1;:43;;;;12126:84;;;;12097:113;;12246:18;12228:15;;:36;12268:1;12228:41;12224:134;;;12307:15;;;:36;;12289:54;;12224:134;12425:21;;;;12372:34;;12455:57;12425:88;:93;12420:406;;-1:-1:-1;12606:29:2;;;;12420:406;;;12743:68;12777:14;:33;;;12743;:68::i;:::-;12712:99;;12420:406;13253:14;:29;;;12927:444;;13206:14;:29;;;12927:444;;13109:28;13008:129;;13104:1;13044:55;13070:28;13044:55;;:25;:55::i;:::-;13010:89;;:14;:33;;;:89;;;;;;;;13009:96;;;;;;13008:129;12927:444;;;12963:14;13155;:33;;;13300:8;13326:14;:31;;;12927:444;;;;;;;;;:::i;:::-;;;;;;;;13385:7;;;;;;;11560:1842;13462:26;;;;13429:30;;;;13462:26;;;;13429:59;;;13428:116;;;;-1:-1:-1;13524:19:2;;;;;;;;;13506:15;:37;13428:116;13411:275;;;13568:34;;;13645:30;;;;13616:26;;;:59;;;;;;;;;;;;;;13411:275;11223:2469;;;;;:::o;874:176:7:-;932:7;963:5;;;986:6;;;;978:46;;;;;;;;;;;;:::i;:::-;1042:1;-1:-1:-1;874:176:7;;;;;:::o;8751:1331:1:-;8879:22;9058:17;9149:14;:31;;;9132:49;;;;;;;;:::i;:::-;;;;;;;;;;;;;9122:60;;;;;;9222:14;:33;;;9311:14;:30;;;9379:14;:21;;;9414:14;:29;;;9458:14;:26;;;9555:14;:21;;;9641:14;:29;;;9685:14;:25;;;9092:628;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;9822:21;;;;9092:628;;-1:-1:-1;9852:58:1;9822:89;9817:226;;9996:22;;;;9940:92;;;;9974:4;;9940:92;;;:::i;:::-;;;;;;;;;;;;;9933:99;;9817:226;10059:15;;;;;;;;8751:1331;-1:-1:-1;;8751:1331:1:o;5018:1240::-;5135:14;;;5228:57;:27;;;5268:15;5228:31;:57::i;:::-;5195:90;;5354:18;5329:22;:43;5321:77;;;;;;;;;;;;:::i;:::-;5437:17;5412:22;:42;5408:811;;;5504:39;5498:46;5481:63;;5408:811;;;5588:16;5563:22;:41;5559:660;;;5653:40;5647:47;;5559:660;5738:12;5713:22;:37;5709:510;;;5801:39;5795:46;;5709:510;5885:11;5860:22;:36;5856:363;;;5946:38;5940:45;;5856:363;6029:7;6004:22;:32;6000:219;;;6085:39;6079:46;;6000:219;6175:43;6152:67;;6000:219;-1:-1:-1;6237:14:1;5018:1240;-1:-1:-1;;5018:1240:1:o;4540:375::-;4655:6;4677:18;4698:13;;;;;;;;;;;;;;;;;4763:1;4736:28;;4309:1;4735:52;4857:18;4851:25;;-1:-1:-1;;4540:375:1;;;:::o;1321:134:7:-;1379:7;1405:43;1409:1;1412;1405:43;;;;;;;;;;;;;;;;;1832:7;1867:12;1859:6;;;;1851:29;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;1902:5:7;;;1746:187::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;5:130::-;72:20;;97:33;72:20;97:33;:::i;142:134::-;220:13;;238:33;220:13;238:33;:::i;678:704::-;;794:3;787:4;779:6;775:17;771:27;761:2;;-1:-1;;802:12;761:2;849:6;836:20;871:79;886:63;942:6;886:63;:::i;:::-;871:79;:::i;:::-;978:21;;;862:88;-1:-1;1022:4;1035:14;;;;1010:17;;;1124;;;1115:27;;;;1112:36;-1:-1;1109:2;;;1161:1;;1151:12;1109:2;1186:1;1171:205;1196:6;1193:1;1190:13;1171:205;;;3670:6;3657:20;3682:32;3708:5;3682:32;:::i;:::-;1264:49;;1327:14;;;;1355;;;;1218:1;1211:9;1171:205;;;1175:14;;;;;754:628;;;;:::o;1407:719::-;;1534:3;1527:4;1519:6;1515:17;1511:27;1501:2;;-1:-1;;1542:12;1501:2;1582:6;1576:13;1604:79;1619:63;1675:6;1619:63;:::i;1604:79::-;1711:21;;;1595:88;-1:-1;1755:4;1768:14;;;;1743:17;;;1857;;;1848:27;;;;1845:36;-1:-1;1842:2;;;1894:1;;1884:12;1842:2;1919:1;1904:216;1929:6;1926:1;1923:13;1904:216;;;3809:6;3803:13;3821:32;3847:5;3821:32;:::i;:::-;1997:60;;2071:14;;;;2099;;;;1951:1;1944:9;1904:216;;3013:128;3088:13;;3106:30;3088:13;3106:30;:::i;3426:158::-;3516:13;;58193:1;58183:12;;58173:2;;58209:1;;58199:12;3865:124;3929:20;;3954:30;3929:20;3954:30;:::i;3996:128::-;4071:13;;4089:30;4071:13;4089:30;:::i;4132:442::-;;4234:3;4227:4;4219:6;4215:17;4211:27;4201:2;;-1:-1;;4242:12;4201:2;4289:6;4276:20;4311:65;4326:49;4368:6;4326:49;:::i;4311:65::-;4302:74;;4396:6;4389:5;4382:21;4500:3;4432:4;4491:6;4424;4482:16;;4479:25;4476:2;;;4517:1;;4507:12;4476:2;55905:6;4432:4;4424:6;4420:17;4432:4;4458:5;4454:16;55882:30;55961:1;55943:16;;;4432:4;55943:16;55936:27;4458:5;4194:380;-1:-1;;4194:380::o;4583:444::-;;4696:3;4689:4;4681:6;4677:17;4673:27;4663:2;;-1:-1;;4704:12;4663:2;4744:6;4738:13;4766:65;4781:49;4823:6;4781:49;:::i;4766:65::-;4757:74;;4851:6;4844:5;4837:21;4955:3;4887:4;4946:6;4879;4937:16;;4934:25;4931:2;;;4972:1;;4962:12;4931:2;4982:39;5014:6;4887:4;4913:5;4909:16;4887:4;4879:6;4875:17;4982:39;:::i;5078:2686::-;;5198:6;;5186:9;5181:3;5177:19;5173:32;5170:2;;;-1:-1;;5208:12;5170:2;5236:22;5198:6;5236:22;:::i;:::-;5227:31;;;5333:17;5320:31;5371:18;;5363:6;5360:30;5357:2;;;5348:1;;5393:12;5357:2;5438:59;5493:3;5484:6;5473:9;5469:22;5438:59;:::i;:::-;5420:16;5413:85;5606:48;5650:3;5573:2;5630:9;5626:22;5606:48;:::i;:::-;5573:2;5592:5;5588:16;5581:74;5760:48;5804:3;5727:2;5784:9;5780:22;5760:48;:::i;:::-;5727:2;5746:5;5742:16;5735:74;5905:47;5948:3;5872:2;5928:9;5924:22;5905:47;:::i;:::-;5872:2;5891:5;5887:16;5880:73;6058:47;6101:3;6024;6081:9;6077:22;6058:47;:::i;:::-;6024:3;6044:5;6040:16;6033:73;6208:47;6251:3;6174;6231:9;6227:22;6208:47;:::i;:::-;6174:3;6194:5;6190:16;6183:73;6353:46;6395:3;6319;6375:9;6371:22;6353:46;:::i;:::-;6319:3;6339:5;6335:16;6328:72;6501:49;6546:3;6467;6526:9;6522:22;6501:49;:::i;:::-;6467:3;6487:5;6483:16;6476:75;6622:3;;;6658:47;6701:3;6622;6681:9;6677:22;6658:47;:::i;:::-;6622:3;6642:5;6638:18;6631:75;6778:3;;;6814:47;6857:3;6778;6837:9;6833:22;6814:47;:::i;:::-;6778:3;6798:5;6794:18;6787:75;6934:3;;;6970:47;7013:3;6934;6993:9;6989:22;6970:47;:::i;:::-;6934:3;6954:5;6950:18;6943:75;7095:3;;;7131:47;7174:3;7095;7154:9;7150:22;7131:47;:::i;:::-;7095:3;7115:5;7111:18;7104:75;7245:3;;;7281:49;7326:3;7245;7306:9;7302:22;7281:49;:::i;:::-;7245:3;7265:5;7261:18;7254:77;7397:3;;;7433:49;7478:3;7397;7458:9;7454:22;7433:49;:::i;:::-;7397:3;7417:5;7413:18;7406:77;7575:3;;;;7564:9;7560:19;7547:33;5371:18;7592:6;7589:30;7586:2;;;5348:1;;7622:12;7586:2;7669:73;7738:3;7729:6;7718:9;7714:22;7669:73;:::i;:::-;7575:3;7653:5;7649:18;7642:101;;;;5164:2600;;;;:::o;7814:2848::-;;7945:6;;7933:9;7928:3;7924:19;7920:32;7917:2;;;-1:-1;;7955:12;7917:2;7983:22;7945:6;7983:22;:::i;:::-;7974:31;;;8073:17;8067:24;8111:18;;8103:6;8100:30;8097:2;;;8088:1;;8133:12;8097:2;8178:70;8244:3;8235:6;8224:9;8220:22;8178:70;:::i;:::-;8160:16;8153:96;8357:59;8412:3;8324:2;8392:9;8388:22;8357:59;:::i;:::-;8324:2;8343:5;8339:16;8332:85;8522:59;8577:3;8489:2;8557:9;8553:22;8522:59;:::i;:::-;8489:2;8508:5;8504:16;8497:85;8678:58;8732:3;8645:2;8712:9;8708:22;8678:58;:::i;:::-;8645:2;8664:5;8660:16;8653:84;8842:58;8896:3;8808;8876:9;8872:22;8842:58;:::i;:::-;8808:3;8828:5;8824:16;8817:84;9003:58;9057:3;8969;9037:9;9033:22;9003:58;:::i;:::-;8969:3;8989:5;8985:16;8978:84;9159:57;9212:3;9125;9192:9;9188:22;9159:57;:::i;:::-;9125:3;9145:5;9141:16;9134:83;9318:60;9374:3;9284;9354:9;9350:22;9318:60;:::i;:::-;9284:3;9304:5;9300:16;9293:86;9450:3;;;9486:58;9540:3;9450;9520:9;9516:22;9486:58;:::i;:::-;9450:3;9470:5;9466:18;9459:86;9617:3;;;9653:58;9707:3;9617;9687:9;9683:22;9653:58;:::i;:::-;9617:3;9637:5;9633:18;9626:86;9784:3;;;9820:58;9874:3;9784;9854:9;9850:22;9820:58;:::i;:::-;9784:3;9804:5;9800:18;9793:86;9956:3;;;9992:58;10046:3;9956;10026:9;10022:22;9992:58;:::i;:::-;9956:3;9976:5;9972:18;9965:86;10117:3;;;10153:60;10209:3;10117;10189:9;10185:22;10153:60;:::i;:::-;10117:3;10137:5;10133:18;10126:88;10280:3;;;10316:60;10372:3;10280;10352:9;10348:22;10316:60;:::i;:::-;10280:3;10300:5;10296:18;10289:88;10462:3;;;;10451:9;10447:19;10441:26;8111:18;10479:6;10476:30;10473:2;;;8088:1;;10509:12;10473:2;10556:84;10636:3;10627:6;10616:9;10612:22;10556:84;:::i;11906:667::-;;12034:4;12022:9;12017:3;12013:19;12009:30;12006:2;;;-1:-1;;12042:12;12006:2;12070:20;12034:4;12070:20;:::i;:::-;12061:29;;13313:6;13307:13;55063:34;58552:5;55052:46;58527:5;58524:35;58514:2;;58573:1;;58563:12;58514:2;12146:86;;12304:2;12368:22;;13447:13;55182:6;55171:18;;58647:34;;58637:2;;-1:-1;;58685:12;58637:2;12304;12319:16;;12312:85;12461:2;12523:22;;3088:13;3106:30;3088:13;3106:30;:::i;:::-;12461:2;12476:16;;12469:83;12480:5;12000:573;-1:-1;;12000:573::o;13509:128::-;13575:20;;13600:32;13575:20;13600:32;:::i;13644:132::-;13721:13;;13739:32;13721:13;13739:32;:::i;14061:128::-;14127:20;;14152:32;14127:20;14152:32;:::i;14196:132::-;14273:13;;14291:32;14273:13;14291:32;:::i;14335:126::-;14400:20;;14425:31;14400:20;14425:31;:::i;14468:130::-;14544:13;;14562:31;14544:13;14562:31;:::i;14605:522::-;;;;14761:2;14749:9;14740:7;14736:23;14732:32;14729:2;;;-1:-1;;14767:12;14729:2;85:6;72:20;97:33;124:5;97:33;:::i;:::-;14819:63;-1:-1;14947:2;14932:18;;14919:32;14971:18;14960:30;;;14957:2;;;-1:-1;;14993:12;14957:2;15094:6;15083:9;15079:22;;;431:3;424:4;416:6;412:17;408:27;398:2;;-1:-1;;439:12;398:2;482:6;469:20;14971:18;501:6;498:30;495:2;;;-1:-1;;531:12;495:2;626:3;14947:2;;610:6;606:17;567:6;592:32;;589:41;586:2;;;-1:-1;;633:12;586:2;14947;567:6;563:17;15013:98;;;;;;;;14723:404;;;;;:::o;15134:366::-;;;15255:2;15243:9;15234:7;15230:23;15226:32;15223:2;;;-1:-1;;15261:12;15223:2;85:6;72:20;97:33;124:5;97:33;:::i;:::-;15313:63;15413:2;15452:22;;;;3215:20;;-1:-1;;;15217:283::o;15880:392::-;;16020:2;;16008:9;15999:7;15995:23;15991:32;15988:2;;;-1:-1;;16026:12;15988:2;16077:17;16071:24;16115:18;16107:6;16104:30;16101:2;;;-1:-1;;16137:12;16101:2;16224:22;;2273:4;2261:17;;2257:27;-1:-1;2247:2;;-1:-1;;2288:12;2247:2;2328:6;2322:13;2350:80;2365:64;2422:6;2365:64;:::i;2350:80::-;2458:21;;;2515:14;;;;2490:17;;;2604;;;2595:27;;;;2592:36;-1:-1;2589:2;;;-1:-1;;2631:12;2589:2;-1:-1;2657:10;;2651:217;2676:6;2673:1;2670:13;2651:217;;;13998:13;;2744:61;;2698:1;2691:9;;;;;2819:14;;;;2847;;2651:217;;;-1:-1;16157:99;15982:290;-1:-1;;;;;;;15982:290::o;16279:263::-;;16394:2;16382:9;16373:7;16369:23;16365:32;16362:2;;;-1:-1;;16400:12;16362:2;-1:-1;3363:13;;16356:186;-1:-1;16356:186::o;16549:360::-;;;16667:2;16655:9;16646:7;16642:23;16638:32;16635:2;;;-1:-1;;16673:12;16635:2;3228:6;3215:20;16725:63;;16825:2;16865:9;16861:22;2946:20;2971:30;2995:5;2971:30;:::i;:::-;16833:60;;;;16629:280;;;;;:::o;16916:389::-;;17051:2;17039:9;17030:7;17026:23;17022:32;17019:2;;;-1:-1;;17057:12;17019:2;17115:17;17102:31;17153:18;17145:6;17142:30;17139:2;;;-1:-1;;17175:12;17139:2;17205:84;17281:7;17272:6;17261:9;17257:22;17205:84;:::i;:::-;17195:94;17013:292;-1:-1;;;;17013:292::o;17312:404::-;;17458:2;17446:9;17437:7;17433:23;17429:32;17426:2;;;-1:-1;;17464:12;17426:2;17515:17;17509:24;17553:18;17545:6;17542:30;17539:2;;;-1:-1;;17575:12;17539:2;17605:95;17692:7;17683:6;17672:9;17668:22;17605:95;:::i;17723:688::-;;;;17904:9;17895:7;17891:23;17916:3;17891:23;17887:33;17884:2;;;-1:-1;;17923:12;17884:2;17981:17;17968:31;18019:18;18011:6;18008:30;18005:2;;;-1:-1;;18041:12;18005:2;18071:84;18147:7;18138:6;18127:9;18123:22;18071:84;:::i;:::-;18061:94;;;18192:2;18232:9;18228:22;2946:20;2971:30;2995:5;2971:30;:::i;:::-;18200:60;-1:-1;12736:4;12715:19;;;12711:30;12708:2;;;-1:-1;;12744:12;12708:2;;12772:20;12736:4;12772:20;:::i;:::-;18297:2;18367:9;18363:22;14400:20;14425:31;14450:5;14425:31;:::i;:::-;12846:73;;12736:4;13031:22;;3215:20;18192:2;12992:16;;12985:75;13172:22;;;;3215:20;18297:2;13133:16;;13126:75;-1:-1;17878:533;;;;-1:-1;17878:533::o;18418:396::-;;18560:2;18548:9;18539:7;18535:23;18531:32;18528:2;;;-1:-1;;18566:12;18528:2;18617:17;18611:24;18655:18;;18647:6;18644:30;18641:2;;;-1:-1;;18677:12;18641:2;18766:22;;;;10835:4;10814:19;;;10810:30;10807:2;;;-1:-1;;10843:12;10807:2;10871:20;10886:4;10871:20;:::i;:::-;10957:17;10951:24;18655:18;10987:6;10984:30;10981:2;;;-1:-1;;11017:12;10981:2;11062:91;11149:3;11140:6;11129:9;11125:22;11062:91;:::i;:::-;11044:16;11037:117;;11255:88;11339:3;18560:2;11319:9;11315:22;11255:88;:::i;:::-;18560:2;11241:5;11237:16;11230:114;11411:3;11481:9;11477:22;3363:13;11438:4;11431:5;11427:16;11420:86;11606:72;11674:3;10886:4;11654:9;11650:22;11606:72;:::i;:::-;11599:4;11592:5;11588:16;11581:98;11780:57;11833:3;11746;11813:9;11809:22;11780:57;:::i;:::-;11411:3;11762:16;;11755:83;11766:5;18522:292;-1:-1;;;;;18522:292::o;18821:239::-;;18924:2;18912:9;18903:7;18899:23;18895:32;18892:2;;;-1:-1;;18930:12;18892:2;14140:6;14127:20;14152:32;14178:5;14152:32;:::i;19067:259::-;;19180:2;19168:9;19159:7;19155:23;19151:32;19148:2;;;-1:-1;;19186:12;19148:2;14550:6;14544:13;14562:31;14587:5;14562:31;:::i;20447:103::-;55274:42;55263:54;20508:37;;20502:48::o;20677:152::-;55274:42;55263:54;57589:28;57578:40;20766:58;;20760:69::o;20865:662::-;;21045:5;51502:12;52919:6;52914:3;52907:19;52956:4;;52951:3;52947:14;21057:82;;52956:4;21209:5;50829:14;-1:-1;21248:257;21273:6;21270:1;21267:13;21248:257;;;21334:13;;54877:2;54866:21;26359:36;;19483:14;;;;52374;;;;21295:1;21288:9;21248:257;;;-1:-1;21511:10;;20977:550;-1:-1;;;;;20977:550::o;24495:690::-;;24688:5;51502:12;52919:6;52914:3;52907:19;52956:4;;52951:3;52947:14;24700:93;;52956:4;24864:5;50829:14;-1:-1;24903:260;24928:6;24925:1;24922:13;24903:260;;;24989:13;;25466:37;;20419:14;;;;52374;;;;24950:1;24943:9;24903:260;;26522:94;-1:-1;54958:20;26577:34;;26571:45::o;26770:327::-;;26905:5;51502:12;52919:6;52914:3;52907:19;26989:52;27034:6;52956:4;52951:3;52947:14;52956:4;27015:5;27011:16;26989:52;:::i;:::-;57002:2;56982:14;56998:7;56978:28;27053:39;;;;52956:4;27053:39;;26852:245;-1:-1;;26852:245::o;29284:2796::-;;29437:6;29523:16;29517:23;29437:6;29560:14;29553:38;29606:73;29437:6;29432:3;29428:16;29660:12;29606:73;:::i;:::-;29598:81;;;29778:4;29771:5;29767:16;29761:23;29790:61;29778:4;29840:3;29836:14;29822:12;29790:61;:::i;:::-;;29941:4;29934:5;29930:16;29924:23;29953:61;29941:4;30003:3;29999:14;29985:12;29953:61;:::i;:::-;;30095:4;30088:5;30084:16;30078:23;30107:59;30095:4;30155:3;30151:14;30137:12;30107:59;:::i;:::-;;30255:4;30248:5;30244:16;30238:23;30267:59;30255:4;30315:3;30311:14;30297:12;30267:59;:::i;:::-;;30412:4;30405:5;30401:16;30395:23;30424:59;30412:4;30472:3;30468:14;30454:12;30424:59;:::i;:::-;;30564:4;30557:5;30553:16;30547:23;30576:57;30564:4;30622:3;30618:14;30604:12;30576:57;:::i;:::-;;30718:4;30711:5;30707:16;30701:23;30730:63;30718:4;30782:3;30778:14;30764:12;30730:63;:::i;:::-;;30882:6;;30875:5;30871:18;30865:25;30896:61;30882:6;30944:3;30940:16;30926:12;30896:61;:::i;:::-;;;31047:6;;31040:5;31036:18;31030:25;31061:61;31047:6;31109:3;31105:16;31091:12;31061:61;:::i;:::-;;;31212:6;;31205:5;31201:18;31195:25;31226:61;31212:6;31274:3;31270:16;31256:12;31226:61;:::i;:::-;;;31382:6;;31375:5;31371:18;31365:25;31396:61;31382:6;31444:3;31440:16;31426:12;31396:61;:::i;:::-;;;31541:6;;31534:5;31530:18;31524:25;31555:65;31541:6;31607:3;31603:16;31589:12;31555:65;:::i;:::-;;;31704:6;;31697:5;31693:18;31687:25;31718:65;31704:6;31770:3;31766:16;31752:12;31718:65;:::i;:::-;;;31865:6;;31858:5;31854:18;31848:25;31921:3;31915:4;31911:14;31865:6;31897:3;31893:16;31886:40;31941:101;32037:4;32023:12;31941:101;:::i;:::-;32064:11;29410:2670;-1:-1;;;;;;29410:2670::o;35058:1163::-;;35285:16;35279:23;35203:4;35322:14;35315:38;35368:115;35203:4;35198:3;35194:14;35464:12;35368:115;:::i;:::-;35360:123;;35575:4;35568:5;35564:16;35558:23;55063:34;37770:16;37764:23;55052:46;35575:4;35695:3;35691:14;39541:37;55182:6;35575:4;37939:5;37935:16;37929:23;55171:18;38004:14;35695:3;38004:14;39649:36;38004:14;38094:5;38090:16;38084:23;54563:13;54556:21;38155:14;35695:3;38155:14;25248:34;;38004:14;35784:5;35780:16;35774:23;35860:4;35855:3;35851:14;25466:37;38155:14;35943:5;35939:16;35933:23;57717:1;57710:5;57707:12;57697:2;;57723:9;57697:2;36029:4;36020:14;;26228:60;35860:4;36109:16;;;;36103:23;54563:13;54556:21;36183:4;36174:14;;;25248:34;;;;36205:11;35176:1045;-1:-1;35176:1045::o;39697:100::-;55401:8;55390:20;39756:36;;39750:47::o;40069:100::-;55573:12;55562:24;40128:36;;40122:47::o;40448:97::-;55669:4;55658:16;40505:35;;40499:46::o;40817:1306::-;;25496:5;25473:3;25466:37;57101:58;55573:12;40428:5;55562:24;57090:70;41240:2;41235:3;41231:12;40380:56;57260:62;55401:8;39939:5;55390:20;57249:74;41340:11;41235:3;41340:11;39891:56;57423:66;;55669:4;40797:5;55658:16;57412:78;41448:11;41235:3;41448:11;40751:54;57423:66;55669:4;40797:5;55658:16;57412:78;41554:11;41235:3;41554:11;40751:54;57423:66;55669:4;40797:5;55658:16;57412:78;41660:11;41235:3;41660:11;40751:54;57423:66;54972:5;-1:-1;54958:20;57412:78;41766:11;41235:3;41766:11;26706:52;57423:66;55669:4;40797:5;55658:16;57412:78;41870:11;41235:3;41870:11;40751:54;;41998:75;41976:11;41235:3;41976:11;42060:6;41998:75;:::i;:::-;-1:-1;42086:12;;;41131:992;-1:-1;;;;;;;;;41131:992::o;42130:488::-;;25954:5;51502:12;26098:4;26065:52;26110:6;26105:3;26098:4;26091:5;26087:16;26065:52;:::i;:::-;51502:12;;26129:16;;;;50829:14;;;-1:-1;22003:265;22028:6;22025:1;22022:13;22003:265;;;22089:13;;54877:2;54866:21;26359:36;;19483:14;;;;52374;;;;22050:1;22043:9;22003:265;;;-1:-1;42603:10;;42340:278;-1:-1;;;;;;;42340:278::o;42625:275::-;;25954:5;51502:12;26065:52;26110:6;26105:3;26098:4;26091:5;26087:16;26065:52;:::i;:::-;26129:16;;;;;42761:139;-1:-1;;42761:139::o;42907:333::-;55274:42;55263:54;;;;20508:37;;43226:2;43211:18;;25466:37;43062:2;43047:18;;43033:207::o;43247:478::-;;43478:2;;43467:9;43463:18;43478:2;43499:17;43492:47;43553:162;22653:5;51502:12;52919:6;52914:3;52907:19;52947:14;43467:9;52947:14;22665:120;;52947:14;43478:2;22842:6;22838:17;43467:9;22829:27;;22817:39;;43478:2;22954:5;50829:14;-1:-1;22993:411;23018:6;23015:1;23012:13;22993:411;;;23070:20;43467:9;23074:4;23070:20;;23065:3;23058:33;19861:100;19957:3;23125:6;23119:13;19861:100;:::i;:::-;23139:126;-1:-1;23383:14;;;;52374;;;;23040:1;23033:9;22993:411;;43732:370;;43909:2;43930:17;43923:47;43984:108;43909:2;43898:9;43894:18;44078:6;43984:108;:::i;44109:737::-;;44418:2;;44439:17;44432:47;44493:108;44418:2;44407:9;44403:18;44587:6;44493:108;:::i;:::-;44639:20;;;44634:2;44619:18;;;44612:48;;;;51502:12;;52907:19;;;50829:14;;;;52947;;;-1:-1;24093:341;24118:6;24115:1;24112:13;24093:341;;;24179:13;;39205:23;;55274:42;55263:54;20508:37;;39366:16;;39360:23;39437:14;;;25466:37;52374:14;;;;20237;;;;24140:1;24133:9;24093:341;;;-1:-1;44666:170;;44389:457;-1:-1;;;;;;;;44389:457::o;44853:210::-;54563:13;;54556:21;25248:34;;44974:2;44959:18;;44945:118::o;45070:222::-;25466:37;;;45197:2;45182:18;;45168:124::o;45299:636::-;;25496:5;25473:3;25466:37;55573:12;;40157:5;55562:24;45689:2;45678:9;45674:18;40128:36;55573:12;40157:5;55562:24;45770:2;45759:9;45755:18;40128:36;;45526:3;45807:2;45796:9;45792:18;45785:48;45847:78;45526:3;45515:9;45511:19;45911:6;45847:78;:::i;45942:310::-;;46089:2;46110:17;46103:47;46164:78;46089:2;46078:9;46074:18;46228:6;46164:78;:::i;46259:416::-;46459:2;46473:47;;;28050:2;46444:18;;;52907:19;28086:34;52947:14;;;28066:55;28155:4;28141:12;;;28134:26;28179:12;;;46430:245::o;46682:416::-;46882:2;46896:47;;;28430:2;46867:18;;;52907:19;28466:23;52947:14;;;28446:44;28509:12;;;46853:245::o;47105:416::-;47305:2;47319:47;;;28760:2;47290:18;;;52907:19;28796:29;52947:14;;;28776:50;28845:12;;;47276:245::o;47528:416::-;47728:2;47742:47;;;29096:2;47713:18;;;52907:19;29132:23;52947:14;;;29112:44;29175:12;;;47699:245::o;47951:713::-;;48244:3;48266:17;48259:47;48320:120;48244:3;48233:9;48229:19;48426:6;48320:120;:::i;:::-;48312:128;;25275:5;54563:13;54556:21;48513:2;48502:9;48498:18;25248:34;55669:4;38491:16;38485:23;55658:16;48650:2;48639:9;48635:18;40505:35;48513:2;38642:5;38638:16;38632:23;38709:14;48639:9;38709:14;25466:37;48650:2;38793:5;38789:16;38783:23;38860:14;48639:9;38860:14;25466:37;48215:449;;;;;;:::o;48671:378::-;;48852:2;48873:17;48866:47;48927:112;48852:2;48841:9;48837:18;49025:6;48927:112;:::i;49056:218::-;55573:12;55562:24;;;;40128:36;;49181:2;49166:18;;49152:122::o;49281:214::-;55669:4;55658:16;;;;40505:35;;49404:2;49389:18;;49375:120::o;49502:256::-;49564:2;49558:9;49590:17;;;49665:18;49650:34;;49686:22;;;49647:62;49644:2;;;49722:1;;49712:12;49644:2;49564;49731:22;49542:216;;-1:-1;49542:216::o;49765:303::-;;49923:18;49915:6;49912:30;49909:2;;;-1:-1;;49945:12;49909:2;-1:-1;49990:4;49978:17;;;50043:15;;49846:222::o;50386:322::-;;50530:18;50522:6;50519:30;50516:2;;;-1:-1;;50552:12;50516:2;-1:-1;50629:4;50606:17;50625:9;50602:33;50693:4;50683:15;;50453:255::o;55978:268::-;56043:1;56050:101;56064:6;56061:1;56058:13;56050:101;;;56131:11;;;56125:18;56112:11;;;56105:39;56086:2;56079:10;56050:101;;;56166:6;56163:1;56160:13;56157:2;;;56043:1;56222:6;56217:3;56213:16;56206:27;56157:2;;56027:219;;;:::o;57746:117::-;55274:42;57833:5;55263:54;57808:5;57805:35;57795:2;;57854:1;;57844:12;57795:2;57789:74;:::o;57870:111::-;57951:5;54563:13;54556:21;57929:5;57926:32;57916:2;;57972:1;;57962:12;58225:115;58310:5;54877:2;54866:21;58286:5;58283:34;58273:2;;58331:1;;58321:12;58347:111;54972:5;-1:-1;54958:20;58406:5;58403:32;58393:2;;-1:-1;;58439:12;58711:115;55401:8;58796:5;55390:20;58772:5;58769:34;58759:2;;58817:1;;58807:12;58957:115;55573:12;59042:5;55562:24;59018:5;59015:34;59005:2;;59063:1;;59053:12;59079:113;55669:4;59162:5;55658:16;59139:5;59136:33;59126:2;;59183:1;;59173:12"
			}
		}
	},
	"sourceTreeHashHex": "0xe35e9fdf90ffa7705587be45256ebf17cec88d1d5a2f5fa3ff1dba65d79ca417",
	"sources": {
		"./DigiOptionsMarketLister.sol": {
			"id": 2
		},
		"./DigiOptionsBaseInterface.sol": {
			"id": 0
		},
		"factsigner/contracts/FactsignerDefines.sol": {
			"id": 9
		},
		"factsigner/contracts/FactsignerVerify.sol": {
			"id": 10
		},
		"@openzeppelin/contracts/math/SafeMath.sol": {
			"id": 7
		},
		"./DigiOptionsLib.sol": {
			"id": 1
		},
		"./DigiOptionsMarkets.sol": {
			"id": 3
		},
		"./SafeCast.sol": {
			"id": 6
		},
		"@openzeppelin/contracts/math/SignedSafeMath.sol": {
			"id": 8
		}
	},
	"sourceCodes": {
		"./DigiOptionsMarketLister.sol": "/*\n freedex-protocol / User Driven Option Markets Contract used by https://www.digioptions.com\n\n Designed to work with signatures from [www.factsigner.com](https://www.factsigner.com)\n\n Public repository:\n https://github.com/berlincode/digioptions-contracts.js\n\n elastic.code@gmail.com\n mail@digioptions.com\n\n SPDX-License-Identifier: MIT\n\n MIT License\n\n Copyright (c) digioptions.com (https://www.digioptions.com)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n*/\n\npragma solidity ^0.7.0;\npragma experimental ABIEncoderV2;\n\nimport \"./DigiOptionsBaseInterface.sol\";\nimport \"./DigiOptionsMarkets.sol\";\nimport \"./DigiOptionsLib.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/math/SignedSafeMath.sol\";\n\n\ncontract DigiOptionsMarketLister is DigiOptionsBaseInterface {\n    using SafeMath for uint256;\n    using SignedSafeMath for int256;\n\n    /*\n        we use a simple linked list - since the SignerListEntry is part of a map\n        the value remains directly accessible by the signer's address \n    */\n    struct SignerListEntry {\n        uint256 value;\n        address addrNext;\n        bool exists;\n    }\n\n    struct SignerData {\n        address signerAddr;\n        uint256 value;\n    }\n\n    uint256 constant private VERSION = (\n        (0 << 32) + /* major */\n        (53 << 16) + /* minor */\n        0 /* bugfix */\n    );\n\n    /* constants which are set during construction */\n    uint256 private blockNumber;\n    address private owner;\n    DigiOptionsMarkets private digiOptionsMarkets;\n\n    uint256 private existingMarkets; /* one bit for each marketCategory and marketInterval */\n\n    /* control variables/constants */\n    uint256 constant private transactionFeeTotalMax = 100; // 1.0%\n    uint256 constant private transactionFee0Min = 10; // 0.1%\n    uint256 constant private transactionFee1Min = 10; // 0.1%\n    uint256 constant private transactionFeeSignerMin = 5; // 0.05%\n    uint16 constant private openDelaySeconds = 600;\n\n    address internal signerAddrFirst; /* the first signer (if exists) */\n    mapping(address => SignerListEntry) private signerEntriesMap; // stores which signing addresses are allowed to register\n    uint256 private signerMapNumEntries = 0;\n\n    /* variables */\n    struct MarketBest {\n        bytes32 marketHash;\n        uint8 transactionFee0;\n        uint40 openTime;\n    }\n    mapping(bytes32 => MarketBest) internal marketsBest; // mapping from baseMarketHash\n    mapping(bytes32 => bool) internal isTestMarket; // mapping from marketHash\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Only owner can call this function.\");\n        _;\n    }\n\n    event MarketCreateLister(\n        bytes32 marketKey, /* marketsContract stores marketHash ; marketListerContract stores baseMarketHash */\n        uint48 indexed expirationDatetimeFilter,\n        uint40 expirationDatetime,\n        uint8 indexed marketInterval,\n        uint8 indexed marketCategory,\n        uint40 openTime,\n        string underlyingString\n    );\n\n    constructor (DigiOptionsMarkets addr)\n        public\n    {\n        owner = msg.sender;\n        blockNumber = block.number;\n        digiOptionsMarkets = addr;\n    }\n\n    /* TODO re-enabled after 0x-tools support solc-0.6.0\n    // default fallback\n    receive () external payable {\n        revert();\n    }\n    */\n\n    function getContractInfo (\n    )\n        external\n        override\n\tvirtual\n        returns (uint256[] memory contractInfoValues)\n    {\n        uint256[] memory infoValues = digiOptionsMarkets.getContractInfo();\n\n        {\n            infoValues[uint256(DigiOptionsLib.InfoValues.CONTRACT_TYPE_IDX)] = uint256(DigiOptionsLib.ContractType.DIGIOPTIONSMARKETLISTER);\n            infoValues[uint256(DigiOptionsLib.InfoValues.VERSION_MARKET_LISTER_IDX)] = VERSION;\n            //infoValues[uint256(DigiOptionsLib.InfoValues.VERSION_MARKETS_IDX)] // keep versionMarkets\n            infoValues[uint256(DigiOptionsLib.InfoValues.DIGIOPTIONS_MARKETS_ADDR_IDX)] = uint256(address(digiOptionsMarkets));\n        }\n        {\n            infoValues[uint256(DigiOptionsLib.InfoValues.BLOCK_NUMBER_CREATED_IDX)] = blockNumber;\n            //infoValues[uint256(DigiOptionsLib.InfoValues.TIMESTAMP_MARKET_CREATED_IDX)] // keep timestampMarketsCreated\n            //infoValues[uint256(DigiOptionsLib.InfoValues.OFFER_MAX_BLOCKS_INTO_FUTURE_IDX)] // keep offerMaxBlocksInto_future\n            //infoValues[uint256(DigiOptionsLib.InfoValues.PAYOUT_PER_NANO_OPTION_EXP_IDX)] // keep payoutPerNanoOption\n            infoValues[uint256(DigiOptionsLib.InfoValues.EXISTING_MARKETS_IDX)] = existingMarkets;\n        }\n\n        return infoValues;\n    }\n\n    function getMarketListerInfo(\n    )\n        external\n        view\n        returns (uint256[] memory listerValues, SignerData[] memory signerDataList)\n    {\n        listerValues = new uint[](uint256(DigiOptionsLib.InfoLister.MAX));\n\n        listerValues[uint256(DigiOptionsLib.InfoLister.VERSION_MARKET_LISTER_IDX)] = VERSION;\n        listerValues[uint256(DigiOptionsLib.InfoLister.OWNER_IDX)] = uint256(owner);\n        listerValues[uint256(DigiOptionsLib.InfoLister.TRANSACTION_FEE_TOTAL_MAX_IDX)] = transactionFeeTotalMax;\n        listerValues[uint256(DigiOptionsLib.InfoLister.TRANSACTION_FEE0_MIN_IDX)] = transactionFee0Min;\n        listerValues[uint256(DigiOptionsLib.InfoLister.TRANSACTION_FEE1_MIN_IDX)] = transactionFee1Min;\n        listerValues[uint256(DigiOptionsLib.InfoLister.TRANSACTION_FEE_SIGNER_MIN_IDX)] = transactionFeeSignerMin;\n        listerValues[uint256(DigiOptionsLib.InfoLister.OPEN_DELAY_SECONDS_IDX)] = uint256(openDelaySeconds);\n\n        uint256 numEntries = signerMapNumEntries;\n        signerDataList = new SignerData[](numEntries);\n\n        address signerAddr = signerAddrFirst;\n        uint256 idx;\n        for (idx=0 ; idx < numEntries ; idx++){\n\n            signerDataList[idx] = SignerData({\n                signerAddr: signerAddr,\n                value: signerEntriesMap[signerAddr].value\n            });\n            // move on with next entry\n            signerAddr = signerEntriesMap[signerAddr].addrNext;\n        }\n\n        return (listerValues, signerDataList);\n    }\n\n    function getMarketDataByMarketHash (\n        address addr, // marketData.userState for this address\n        bytes32 marketHash\n    )\n        public\n        view\n        override\n        virtual\n        returns (DigiOptionsLib.MarketData memory marketData)\n    {\n        marketData = digiOptionsMarkets.getMarketDataByMarketHash(addr, marketHash);\n        // override testMarket\n        marketData.testMarket = isTestMarket[marketHash];\n    }\n\n    function getMarketDataListByMarketKeys (\n        address addr, // marketData.userState for this address\n        bytes32[] calldata marketKeys // marketsContract uses marketHash / marketListerContract uses baseMarketHash\n    )\n        external\n        view\n        override\n        virtual\n        returns (DigiOptionsLib.MarketData[] memory marketDataList)\n    {\n        marketDataList = new DigiOptionsLib.MarketData[](marketKeys.length);\n        uint256 idx;\n\n        for (idx= 0 ; idx < marketKeys.length ; idx++) {\n            marketDataList[idx] = getMarketDataByMarketHash(addr, marketsBest[marketKeys[idx]].marketHash);\n        }\n        return marketDataList;\n    }\n\n    function calcMarketInterval (\n        uint40 expirationDatetime\n    )\n        external\n        view\n        override\n        virtual\n        returns (uint8 interval)\n    {\n        return digiOptionsMarkets.calcMarketInterval(expirationDatetime);\n    }\n\n    /*\n    check, if a market might be possible to register (it does not need to be created for this\n    and it is not checked if creating is possible at all)\n    */\n    function registerMarketTest (\n        DigiOptionsLib.MarketBaseData memory marketBaseData\n    )\n        public\n        view\n        returns (bool registerPossible)\n    {\n\n        {\n            if (msg.sender == owner){\n                // always allow owner\n                return true;\n            }\n\n            if (\n                (signerEntriesMap[marketBaseData.signerAddr].value == 0) // TODO check bits!\n            ){\n                return false;\n            }\n        }\n\n        /* check fees and feeTaker0 */\n        if (\n            ((uint256(marketBaseData.transactionFee0)).add(uint256(marketBaseData.transactionFee1)).add(uint256(marketBaseData.transactionFeeSigner)) <= transactionFeeTotalMax) &&\n            (marketBaseData.transactionFee0 >= transactionFee0Min) &&\n            (marketBaseData.transactionFee1 >= transactionFee1Min) &&\n            (marketBaseData.transactionFeeSigner >= transactionFeeSignerMin) &&\n            (marketBaseData.feeTaker0 == owner)\n        ){\n            return true;\n        }\n\n        return false;\n    }\n\n    /*\n        This is just a convenient wrapper for both, creating and registering a market.\n        Remember you can always do this in two transactions and just use this contract\n        for registration.\n    */\n    function createMarket (\n        DigiOptionsLib.MarketBaseData memory marketBaseData,\n        bool testMarket,\n        FactsignerVerify.Signature memory signature\n    )\n        public // this should be external (see https://github.com/ethereum/solidity/issues/5479)\n        override\n        returns (bytes32 marketHash)\n    {\n        require (registerMarketTest(marketBaseData), 'register not possible');\n        marketHash = digiOptionsMarkets.createMarket(\n            marketBaseData,\n            testMarket,\n            signature\n        );\n        registerMarketIntern (\n            marketBaseData,\n            marketHash,\n            testMarket\n        );\n        return marketHash;\n    }\n\n    function registerMarket (\n        bytes32 marketHash,\n        bool testMarket\n    )\n        public\n    {\n        DigiOptionsLib.MarketBaseData memory marketBaseData = digiOptionsMarkets.getMarketBaseDataByMarketHash(marketHash);\n\n        /* check that the market exists */\n        assert(marketBaseData.expirationDatetime != 0);\n\n        require (registerMarketTest(marketBaseData), 'register not possible');\n        registerMarketIntern(\n            marketBaseData,\n            marketHash,\n            testMarket\n        );\n    }\n\n    function registerMarketIntern (\n        DigiOptionsLib.MarketBaseData memory marketBaseData,\n        bytes32 marketHash,\n        bool testMarket\n    )\n        internal\n    {\n        bytes32 baseMarketHash = DigiOptionsLib.calcBaseMarketHash(marketBaseData);\n\n        MarketBest storage marketBest = marketsBest[baseMarketHash];\n\n        if (marketBest.marketHash == 0) {\n            // does not yet exist\n\n            uint40 openTime = uint40((msg.sender == owner)? 0 : block.timestamp + openDelaySeconds);\n            marketsBest[baseMarketHash] = MarketBest(\n                {\n                marketHash: marketHash,\n                transactionFee0: marketBaseData.transactionFee0,\n                openTime: openTime\n                }\n            );\n\n            if (msg.sender == owner) {\n                isTestMarket[marketHash] = testMarket;\n            }\n\n            uint256 existingMarketsBit = (1 << uint256(marketBaseData.marketInterval)) << (marketBaseData.marketCategory * 8);\n            if (existingMarkets & existingMarketsBit == 0) {\n                existingMarkets = existingMarkets | existingMarketsBit;\n            }\n\n            uint8 marketIntervalForEventFilter;\n            if ((marketBaseData.config & uint8(FactsignerDefines.ConfigMask.ConfigIntervalTypeIsUsedMask) != 0)) {\n                /* interval used */\n                marketIntervalForEventFilter = marketBaseData.marketInterval;\n            } else {\n                /* interval unused */\n                marketIntervalForEventFilter = DigiOptionsLib.calcMarketInterval(marketBaseData.expirationDatetime);\n            }\n\n            // emit only once for each market (even if it will be replaced later)\n            emit MarketCreateLister(\n                baseMarketHash, // marketKey\n                ((marketBaseData.expirationDatetime/DigiOptionsLib.getDivider(marketIntervalForEventFilter)) << 8) + marketIntervalForEventFilter,\n                marketBaseData.expirationDatetime,\n                marketBaseData.marketInterval,\n                marketBaseData.marketCategory,\n                openTime,\n                marketBaseData.underlyingString\n            );\n            return;\n        }\n        if (\n            (marketBaseData.transactionFee0 > marketBest.transactionFee0) &&\n            (block.timestamp < marketBest.openTime)\n        ){\n            marketBest.marketHash = marketHash;\n            marketBest.transactionFee0 = marketBaseData.transactionFee0;\n        }\n    }\n\n    function setTestMarket (\n        bytes32 marketHash,\n        bool testMarket\n    )\n        public\n        onlyOwner\n    {\n        isTestMarket[marketHash] = testMarket;\n    }\n\n    /*\n    function setOpenDelaySeconds (\n        uint16 openDelaySeconds_\n    )\n        public\n        onlyOwner\n    {\n        if (openDelaySeconds_ > 0) {\n            openDelaySeconds = openDelaySeconds_;\n        }\n    }\n    */\n\n    /*\n    function setTransactionFeeTotalMax (\n        uint64 transactionFeeTotalMax_\n    )\n        public\n        onlyOwner\n    {\n        transactionFeeTotalMax = transactionFeeTotalMax_;\n    }\n    */\n\n    function setSigner (\n        address signerAddr,\n        uint256 value\n    )\n        public\n        onlyOwner\n    {\n        if (signerEntriesMap[signerAddr].exists){\n            // just modify value\n            signerEntriesMap[signerAddr].value = value;\n            return;\n        }\n\n        // add new entry at the head of the list\n        address addrTmp = signerAddrFirst;\n        signerEntriesMap[signerAddr] = SignerListEntry({\n            value: value,\n            addrNext: addrTmp,\n            exists: true\n        });\n        signerAddrFirst = signerAddr;\n        signerMapNumEntries = signerMapNumEntries + 1;\n    }\n}\n",
		"./DigiOptionsBaseInterface.sol": "/*\n freedex-protocol / User Driven Option Markets Contract used by https://www.digioptions.com\n\n Base data structures and the interface functions that\n are implemented by both contracts (DigiOptionsMarkets and\n DigioptionsMarketLister)\n\n Public repository:\n https://github.com/berlincode/digioptions-contracts.js\n\n elastic.code@gmail.com\n mail@digioptions.com\n\n SPDX-License-Identifier: MIT\n\n MIT License\n\n Copyright (c) digioptions.com (https://www.digioptions.com)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n*/\n\npragma solidity ^0.7.0;\npragma experimental ABIEncoderV2;\n\nimport \"factsigner/contracts/FactsignerDefines.sol\";\nimport \"factsigner/contracts/FactsignerVerify.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"./DigiOptionsLib.sol\";\n\nabstract contract DigiOptionsBaseInterface {\n\n    function getContractInfo (\n    )\n        external\n        virtual\n        returns (uint256[] memory contractInfoValues);\n\n    function getMarketDataByMarketHash (\n        address addr, // marketData.userState for this address\n        bytes32 marketHash\n    )\n        public\n        view\n        virtual\n        returns (DigiOptionsLib.MarketData memory marketData);\n\n    function getMarketDataListByMarketKeys (\n        address addr, // marketData.userState for this address\n        bytes32[] calldata marketKeys // marketsContract uses marketHash / marketListerContract uses baseMarketHash\n    )\n        external\n        view\n        virtual\n        returns (DigiOptionsLib.MarketData[] memory marketDataList);\n\n    // TODO implement createMarketTest\n\n    function createMarket (\n        DigiOptionsLib.MarketBaseData memory marketBaseData,\n        bool testMarket,\n        FactsignerVerify.Signature memory signature\n    )\n        public\n        virtual\n        returns (bytes32 marketHash);\n\n    function calcMarketInterval (\n        uint40 expirationDatetime\n    )\n        external\n        view\n        virtual\n        returns (uint8 interval);\n\n}\n",
		"factsigner/contracts/FactsignerDefines.sol": "/*\n Contract defines for https://www.factsigner.com\n\n Public repository:\n https://github.com/berlincode/factsigner\n\n Version 7.0.0\n\n SPDX-License-Identifier: MIT\n\n MIT License\n\n Copyright (c) factsigner.com (https://www.factsigner.com)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n*/\n\npragma solidity ^0.7.0;\n\nlibrary FactsignerDefines\n{\n    // TODO we use a enum here as a hack until\n    // https://github.com/ethereum/solidity/issues/1290 is solved\n    enum ConfigMask {\n        ConfigMaskDummy0,\n        ConfigMarketTypeIsStrikedMask, // = 1\n        ConfigMaskDummy2,\n        ConfigMaskDummy3,\n        ConfigIntervalTypeIsUsedMask // = 4\n    }\n\n    enum SettlementType {\n        FINAL, // = 0\n        PRELIMINARY_FIRST // = 1\n        //PRELIMINARY_MAX // = 65535\n    }\n\n    enum MarketInterval {\n        NONE, // = 0\n        // the following constants are just proposed assignments\n        YEARLY, // = 1\n        QUATERLY, // 2\n        MONTHLY, // = 3\n        WEEKLY, // = 4\n        DAILY, // = 5\n        HOURLY, // = 6\n        SHORT_TERM // = 7\n    }\n\n}\n",
		"factsigner/contracts/FactsignerVerify.sol": "/*\n Signature validation for https://www.factsigner.com\n\n Public repository:\n https://github.com/berlincode/factsigner\n\n Version 7.0.0\n\n SPDX-License-Identifier: MIT\n\n MIT License\n\n Copyright (c) factsigner.com (https://www.factsigner.com)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n*/\n\npragma solidity ^0.7.0;\n\nlibrary FactsignerVerify {\n\n    struct Signature {\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n    }\n\n    bytes constant factsignerPrefix = \"\\x19Factsigner Signed Message:\\n32\";\n    function verifyFactsignerMessage(\n        bytes32 message,\n        Signature memory signature\n    ) internal pure returns (address)\n    {\n        bytes32 prefixedHash = keccak256(\n            abi.encodePacked(\n                factsignerPrefix,\n                message\n            )\n        );\n        address signer = ecrecover(\n            prefixedHash,\n            signature.v,\n            signature.r,\n            signature.s\n        );\n        return signer;\n    }\n}\n",
		"@openzeppelin/contracts/math/SafeMath.sol": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n",
		"./DigiOptionsLib.sol": "/*\n\n Public repository:\n https://github.com/berlincode/digioptions-contracts.js\n\n elastic.code@gmail.com\n mail@digioptions.com\n\n SPDX-License-Identifier: MIT\n\n MIT License\n\n Copyright (c) digioptions.com (https://www.digioptions.com)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n*/\n\npragma solidity ^0.7.0;\n\nimport \"factsigner/contracts/FactsignerDefines.sol\";\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n//import \"@openzeppelin/contracts/math/SignedSafeMath.sol\";\n\n\nlibrary DigiOptionsLib {\n    using SafeMath for uint256;\n\n    /*\n        For future updgrade we want getContractInfo() to remain its signature('getContractInfo(uint256[]')\n        so we declared the return values as dynamic list. The meaning of each entry is defined via\n        follwing enum.\n    */\n    enum InfoValues { // rename InfoContract\n        CONTRACT_TYPE_IDX, // 0\n        VERSION_MARKET_LISTER_IDX, // 1\n        VERSION_MARKETS_IDX, // 2\n        DIGIOPTIONS_MARKETS_ADDR_IDX, // 3\n        BLOCK_NUMBER_CREATED_IDX, // 4\n        TIMESTAMP_MARKET_CREATED_IDX, // 5\n        OFFER_MAX_BLOCKS_INTO_FUTURE_IDX, // 6\n        ATOMIC_OPTION_PAYOUT_WEI_EXP_IDX, // 7\n        EXISTING_MARKETS_IDX, // 8\n\n        MAX // meta info\n    }\n\n    enum InfoLister {\n        VERSION_MARKET_LISTER_IDX, // 0\n        OWNER_IDX,\n        TRANSACTION_FEE_TOTAL_MAX_IDX,\n        TRANSACTION_FEE0_MIN_IDX,\n        TRANSACTION_FEE1_MIN_IDX,\n        TRANSACTION_FEE_SIGNER_MIN_IDX,\n        OPEN_DELAY_SECONDS_IDX,\n\n        MAX // meta info\n    }\n\n    enum ContractType {\n        UNKNOWN,\n        DIGIOPTIONSMARKETS, // == 1\n        DIGIOPTIONSMARKETLISTER // == 2\n    }\n\n    enum UserState {\n        NONE,\n        EXISTS,\n        PAYED_OUT\n    }\n\n    struct Signature {\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n    }\n\n    struct MarketBaseData {\n        /* constant core market data, part of marketHash calculation */\n\n        string underlyingString;\n        uint40 expirationDatetime; /* used for sorting contracts */\n        uint24 objectionPeriod; /* e.g. 3600 seconds */\n\n        uint8 config;\n        uint8 marketCategory;\n\n        uint8 baseUnitExp;\n        int8 ndigit;\n\n        address signerAddr; /* address used to check the signed result (e.g. of factsigner) */\n\n        uint8 marketInterval;\n        uint8 transactionFee0; /* fee in 1/100 per cent (payed by orderTaker) */\n        uint8 transactionFee1; /* fee in 1/100 per cent (payed by orderTaker) */\n        uint8 transactionFeeSigner; /* fee in 1/100 per cent (payed by orderTaker) */\n        address feeTaker0;\n        address feeTaker1;\n        int128[] strikes;\n    }\n\n    struct MarketState {\n        /* winningOptionID is only valid if settled == true */\n        uint128 fee; // total payed fee (for all fee takers)\n        uint16 winningOptionID;\n        bool settled;\n    }\n\n    struct MarketData {\n        MarketBaseData marketBaseData;\n        MarketState marketState;\n        bytes32 marketHash;\n        UserState userState;\n        bool testMarket; // only used by MarketLister\n    }\n\n\n// TODO remove long term? (and add 2-year?)\n// TODO remove uint8() conversion\n// TODO time offset between marketsContract and marketListerContract?\n\n    /* until const arrays are supported in solidity we use our custom function */\n    uint256 constant DIVIDER_ENTRY_BYTES = 6;\n    bytes constant DIVIDER_TABLE = \"\\\n\\x00\\x00\\x00\\x00\\x00\\x00\\\n\\x00\\x00\\x00\\xfa\\x7d\\x00\\\n\\x00\\x00\\x00\\x3b\\x53\\x80\\\n\\x00\\x00\\x00\\x0a\\x8c\\x00\\\n\\x00\\x00\\x00\\x01\\xfa\\x40\\\n\\x00\\x00\\x00\\x00\\x1c\\x20\\\n\\x00\\x00\\x00\\x00\\x00\\x00\\\n\";\n\n    function getDivider(\n        uint256 calculatedMarketInterval\n    )\n        internal\n        pure\n        returns (uint48)\n    {\n        bytes memory table = DIVIDER_TABLE;\n        uint offset = (calculatedMarketInterval + 1) * DIVIDER_ENTRY_BYTES;\n        uint48 value;\n        assembly {\n            value := mload(add(table, offset))\n        }\n\n        return value;\n    }\n\n\n    // TODO this is only 'view' and not internal because of block.timestamp - maybe change that\n    function calcMarketInterval (\n        uint40 expirationDatetime\n    )\n        internal\n        view\n        returns (uint8 interval)\n    {\n        uint8 marketInterval;\n        uint256 secondsUntilExpiration = uint256(expirationDatetime).sub(uint256(block.timestamp));\n        // TODO > or >= ?\n        require(secondsUntilExpiration < 730 * 24 * 60 * 60, \"too far in the future\");\n        if (secondsUntilExpiration > 45 * 24 * 60 * 60) // > 45 days\n            marketInterval = uint8(FactsignerDefines.MarketInterval.YEARLY);\n        else if (secondsUntilExpiration > 8 * 24 * 60 * 60) // > 8 days\n            marketInterval = uint8(FactsignerDefines.MarketInterval.MONTHLY);\n        else if (secondsUntilExpiration > 36 * 60 * 60) // > 36 hours\n            marketInterval = uint8(FactsignerDefines.MarketInterval.WEEKLY);\n        else if (secondsUntilExpiration > 2 * 60 * 60) // > 2 hours\n            marketInterval = uint8(FactsignerDefines.MarketInterval.DAILY);\n        else if (secondsUntilExpiration > 15 * 60) // > 15 min\n            marketInterval = uint8(FactsignerDefines.MarketInterval.HOURLY);\n        else\n            marketInterval = uint8(FactsignerDefines.MarketInterval.SHORT_TERM);\n\n        return marketInterval;\n    }\n\n    function calcFactHash (\n        DigiOptionsLib.MarketBaseData memory marketBaseData\n    )\n        internal\n        pure // this should be external (see https://github.com/ethereum/solidity/issues/5479)\n        returns (bytes32 factHash)\n    {\n        bytes memory data;\n        data = abi.encodePacked(\n            keccak256(abi.encodePacked(marketBaseData.underlyingString)), /* 'name' utf8 encoded */\n            marketBaseData.expirationDatetime, /* 'settlement' unix epoch seconds UTC */\n            marketBaseData.objectionPeriod, /* e.g. 3600 seconds */\n            marketBaseData.config,\n            marketBaseData.marketCategory,\n\n            marketBaseData.baseUnitExp, /* e.g. 18 -> baseUnit = 10**18 = 1000000000000000000 */\n            marketBaseData.ndigit /* 'ndigit' number of digits (may be negative) */\n        );\n        // if this is a named market we simply use strikes as factsigner's namedRanges\n        if ((marketBaseData.config & uint8(FactsignerDefines.ConfigMask.ConfigMarketTypeIsStrikedMask) == 0)) {\n            data = abi.encodePacked(\n                data,\n                marketBaseData.strikes\n            );\n        }\n        return keccak256(data);\n    }\n\n    function calcMarketHash (\n        DigiOptionsLib.MarketBaseData memory marketBaseData\n    )\n        internal\n        pure\n        returns (bytes32 marketHash)\n    {\n        bytes memory data;\n        data = abi.encodePacked(\n            // TODO from facthash?\n            keccak256(abi.encodePacked(marketBaseData.underlyingString)), /* 'name' utf8 encoded */\n            marketBaseData.expirationDatetime, /* 'settlement' unix epoch seconds UTC */\n            marketBaseData.objectionPeriod, /* e.g. 3600 seconds */\n            marketBaseData.config,\n            marketBaseData.marketCategory,\n\n            marketBaseData.baseUnitExp, /* e.g. 18 -> baseUnit = 10**18 = 1000000000000000000 */\n            marketBaseData.ndigit, /* 'ndigit' number of digits (may be negative) */\n\n            marketBaseData.marketInterval,\n            marketBaseData.feeTaker0,\n            marketBaseData.feeTaker1,\n            marketBaseData.signerAddr /* address used to check the signed result (e.g. of factsigner) */\n        );\n        data = abi.encodePacked(\n            data,\n            marketBaseData.transactionFee0,\n            marketBaseData.transactionFee1,\n            marketBaseData.transactionFeeSigner,\n            marketBaseData.strikes\n        );\n        return keccak256(data);\n    }\n\n    function calcBaseMarketHash (\n        MarketBaseData memory marketBaseData\n    )\n        internal\n        pure\n        returns (bytes32 baseMarketHash)\n    {\n        /* baseMarketHash is similar to marketHash but does not contain all elements. It's basically a factHash with added marketInterval */\n        bytes memory data;\n        data = abi.encodePacked(\n            keccak256(abi.encodePacked(marketBaseData.underlyingString)), /* 'name' utf8 encoded */\n            marketBaseData.expirationDatetime, /* 'settlement' unix epoch seconds UTC */\n            marketBaseData.objectionPeriod, /* e.g. 3600 seconds */\n            marketBaseData.config,\n            marketBaseData.marketCategory,\n\n            marketBaseData.baseUnitExp, /* e.g. 18 -> baseUnit = 10**18 = 1000000000000000000 */\n            marketBaseData.ndigit, /* 'ndigit' number of digits (may be negative) */\n\n            marketBaseData.marketInterval,\n\n            marketBaseData.signerAddr\n        );\n        // if this is a named market we simply use strikes as factsigner's namedRanges\n        if ((marketBaseData.config & uint8(FactsignerDefines.ConfigMask.ConfigMarketTypeIsStrikedMask) == 0)) {\n            data = abi.encodePacked(\n                data,\n                marketBaseData.strikes\n            );\n        }\n        return keccak256(data);\n\n    }\n\n\n    bytes constant OFFER_PREFIX = \"\\x19Ethereum Signed Message:\\n32\"; // TODO\n    function verifyOffer(\n        bytes32 message,\n        Signature memory signature\n    )\n        internal\n        pure\n        returns (address addr)\n    {\n        bytes32 prefixedHash = keccak256(\n            abi.encodePacked(\n                OFFER_PREFIX,\n                message\n            )\n        );\n        address signer = ecrecover(\n            prefixedHash,\n            signature.v,\n            signature.r,\n            signature.s\n        );\n        return signer;\n    }\n}\n",
		"./DigiOptionsMarkets.sol": "/*\n freedex-protocol / User Driven Option Markets Contract used by https://www.digioptions.com\n\n Designed to work with signatures from [www.factsigner.com](https://www.factsigner.com)\n\n Public repository:\n https://github.com/berlincode/digioptions-contracts.js\n\n elastic.code@gmail.com\n mail@digioptions.com\n\n SPDX-License-Identifier: MIT\n\n MIT License\n\n Copyright (c) digioptions.com (https://www.digioptions.com)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n*/\n\npragma solidity ^0.7.0;\npragma experimental ABIEncoderV2;\n\nimport \"./DigiOptionsBaseInterface.sol\";\nimport \"./DigiOptionsLib.sol\";\nimport \"./SafeCast.sol\";\nimport \"factsigner/contracts/FactsignerDefines.sol\";\nimport \"factsigner/contracts/FactsignerVerify.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/math/SignedSafeMath.sol\";\n\n\ncontract DigiOptionsMarkets is DigiOptionsBaseInterface {\n    using SafeCast for int256;\n    using SafeCast for uint256;\n    using SafeCast for int128;\n    using SafeCast for uint128;\n    using SafeMath for uint256;\n    using SignedSafeMath for int256;\n\n    uint256 constant private VERSION = (\n        (0 << 32) + /* major */\n        (53 << 16) + /* minor */\n        0 /* bugfix */\n    );\n    uint256 constant private OFFER_MAX_BLOCKS_INTO_FUTURE = 12;\n\n    // each atomic option is worth 10**9 = 1000000000 wei in case of win\n    uint256 constant private ATOMIC_OPTION_PAYOUT_WEI_EXP = 9;\n    int256 constant private ATOMIC_OPTION_PAYOUT_WEI = int256(uint256(10)**ATOMIC_OPTION_PAYOUT_WEI_EXP);\n\n    uint8 constant private RANGESTATE_NOT_USED = 0;\n    uint8 constant private RANGESTATE_TRADED = 1;\n    uint8 constant private RANGESTATE_PAYED_OUT = 2;\n\n    int256 constant private INT256_MAX = int256(~(uint256(1) << 255));\n\n    struct Position {\n        int128 value;\n        uint8 rangeState;\n    }\n\n    struct Market {\n        DigiOptionsLib.MarketState marketState;\n        DigiOptionsLib.MarketBaseData marketBaseData;\n        mapping(address => mapping(uint256 => Position)) positions; // position mapping for each user\n\n        mapping(bytes32 => uint256)  offersAccepted; // remember how many options from an offer are already taken\n    }\n\n    struct OrderOffer {\n        bytes32 marketHash;\n        uint16 optionID;\n        bool buy; // does the offer owner want to buy or sell options\n        uint256 pricePerOption;\n        uint256 size;\n        uint256 offerID;\n        uint256 blockExpires;\n        address offerOwner;\n    }\n\n    struct OrderOfferSigned {\n        OrderOffer orderOffer;\n        DigiOptionsLib.Signature signature;\n    }\n\n    /* variables */\n    uint256 private timestamp;\n    uint256 private blockNumber;\n    uint256 private existingMarkets; /* one bit for each marketCategory and marketInterval */\n\n    mapping(address => uint256) internal liquidityUser;\n    mapping(bytes32 => Market) internal markets;\n\n    mapping(address => uint32) internal userMarketsIdx;\n\n    event MarketCreate(\n        bytes32 marketKey, /* marketsContract stores marketHash ; marketListerContract stores baseMarketHash */\n        uint48 indexed expirationDatetimeFilter,\n        uint40 expirationDatetime,\n        uint8 indexed marketInterval,\n        uint8 indexed marketCategory,\n        string underlyingString\n    );\n    event MarketSettlement(\n        bytes32 marketHash\n    );\n    // this may result in liquidity change\n    event LiquidityAddWithdraw(address indexed addr, uint256 datetime, int256 amount);\n    event PositionChange(\n        // TODO optimize order for gas costs possible?\n        uint256 indexed buyer,\n        uint256 indexed seller,\n        bytes32 indexed marketHash,\n        uint256 datetime, // TODO we might remove this and use info from block\n        uint16 optionID,\n        uint256 pricePerOption,\n        uint256 size,\n        bytes32 offerHash\n    );\n\n    /* This is the constructor */\n    constructor ()\n        public\n    {\n        blockNumber = block.number;\n        timestamp = block.timestamp;\n    }\n\n    /* TODO re-enabled after 0x-tools support solc-0.6.0\n    // default fallback\n    receive ()\n        external\n        payable\n    {\n        liquidityAdd();\n    }\n    */\n\n    function getContractInfo (\n    )\n        external\n        override\n        virtual\n        returns (uint256[] memory contractInfoValues)\n    {\n        uint256[] memory infoValues = new uint[](uint256(DigiOptionsLib.InfoValues.MAX));\n\n        infoValues[uint256(DigiOptionsLib.InfoValues.CONTRACT_TYPE_IDX)] = uint256(DigiOptionsLib.ContractType.DIGIOPTIONSMARKETS);\n        infoValues[uint256(DigiOptionsLib.InfoValues.VERSION_MARKET_LISTER_IDX)] = 0; // versionMarketLister\n        infoValues[uint256(DigiOptionsLib.InfoValues.VERSION_MARKETS_IDX)] = VERSION; // versionMarkets\n        infoValues[uint256(DigiOptionsLib.InfoValues.DIGIOPTIONS_MARKETS_ADDR_IDX)] = uint256(address(this)); // digiOptionsMarketsAddr\n        infoValues[uint256(DigiOptionsLib.InfoValues.BLOCK_NUMBER_CREATED_IDX)] = blockNumber; // blockNumberCreated\n        infoValues[uint256(DigiOptionsLib.InfoValues.TIMESTAMP_MARKET_CREATED_IDX)] = timestamp; // timestampMarketsCreated\n        infoValues[uint256(DigiOptionsLib.InfoValues.OFFER_MAX_BLOCKS_INTO_FUTURE_IDX)] = OFFER_MAX_BLOCKS_INTO_FUTURE;\n        infoValues[uint256(DigiOptionsLib.InfoValues.ATOMIC_OPTION_PAYOUT_WEI_EXP_IDX)] = ATOMIC_OPTION_PAYOUT_WEI_EXP;\n        infoValues[uint256(DigiOptionsLib.InfoValues.EXISTING_MARKETS_IDX)] = existingMarkets;\n\n        return infoValues;\n    }\n\n    function liquidityGet()\n        public\n        view\n        returns (uint256 liquidity)\n    {\n        return liquidityUser[msg.sender];\n    }\n\n    function liquidityWithdraw (uint256 amount) external {\n        require (amount <= liquidityUser[msg.sender], \"Not enough liquidity.\");\n\n        /* Remember to reduce the liquidity BEFORE */\n        /* sending to prevent re-entrancy attacks */\n        liquidityUser[msg.sender] = liquidityUser[msg.sender].sub(amount);\n        msg.sender.transfer(amount);\n        emit LiquidityAddWithdraw(msg.sender, block.timestamp, int256(-amount));\n    }\n\n    /* returns all relevant market data - if marketHash does not exist marketBaseData.expirationDatetime is 0*/\n    function getMarketDataByMarketHash (\n        address addr, // marketData.userState for this address\n        bytes32 marketHash\n    )\n        public\n        view\n        override\n        virtual\n        returns (DigiOptionsLib.MarketData memory marketData)\n    {\n        Market storage market = markets[marketHash];\n        DigiOptionsLib.MarketBaseData memory marketBaseData = market.marketBaseData;\n        DigiOptionsLib.MarketState memory marketState = market.marketState;\n\n        return DigiOptionsLib.MarketData({\n            marketBaseData: marketBaseData,\n            marketState: marketState,\n            marketHash: marketHash,\n            userState: getUserState(addr, market),\n            testMarket: false // only used by MarketLister\n        });\n    }\n\n    function getMarketBaseDataByMarketHash (bytes32 marketHash)\n        public\n        view\n        returns (DigiOptionsLib.MarketBaseData memory marketBaseData)\n    {\n        Market storage market = markets[marketHash];\n        return market.marketBaseData;\n    }\n\n    function getMarketDataListByMarketKeys (\n        address addr, // marketData.userState for this address\n        bytes32[] calldata marketKeys // marketsContract uses marketHash / marketListerContract uses baseMarketHash\n    )\n        external\n        view\n        override\n        virtual\n        returns (DigiOptionsLib.MarketData[] memory marketDataList)\n    {\n        marketDataList = new DigiOptionsLib.MarketData[](marketKeys.length);\n        uint256 idx;\n\n        for (idx= 0 ; idx < marketKeys.length ; idx++) {\n            marketDataList[idx] = getMarketDataByMarketHash(addr, marketKeys[idx]);\n        }\n        return marketDataList;\n    }\n\n    function calcMarketInterval (\n        uint40 expirationDatetime\n    )\n        external\n        view\n        override\n        virtual\n        returns (uint8 interval)\n    {\n        return DigiOptionsLib.calcMarketInterval(expirationDatetime);\n    }\n\n    function getUserState (\n        address addr,\n        Market storage market\n    )\n        internal\n        view\n        returns (DigiOptionsLib.UserState userState)\n    {\n        mapping(uint256 => Position) storage positions = market.positions[addr];\n\n        if (market.marketState.settled){\n            Position memory winningPosition = positions[market.marketState.winningOptionID];\n            if (\n                (winningPosition.rangeState == RANGESTATE_PAYED_OUT) ||\n                ((winningPosition.rangeState == RANGESTATE_TRADED) && (winningPosition.value == 0))  // TODO fixme == 0\n                ){\n                return DigiOptionsLib.UserState.PAYED_OUT;\n            }\n        }\n        // TODO for named markets one excess optionID is checked (which should not be a problem)\n        for (uint256 optionID = 0; optionID <= market.marketBaseData.strikes.length; optionID++) {\n            if (positions[optionID].rangeState > RANGESTATE_NOT_USED) {\n                return DigiOptionsLib.UserState.EXISTS;\n            }\n        }\n        return DigiOptionsLib.UserState.NONE;\n    }\n\n    function getLiquidityAndPositions (bytes32 marketHash)\n        external\n        view\n        returns (uint256 liquidity, Position[] memory positions, DigiOptionsLib.UserState userState)\n    {\n        Market storage market = markets[marketHash];\n        DigiOptionsLib.MarketBaseData memory marketBaseData = market.marketBaseData;\n\n        // return user's total contract liquidity and positions for selected market\n\n        // TODO for named markets one excess optionID is checked (which should not be a problem)\n        positions = new Position[](marketBaseData.strikes.length + 1);\n\n        for (uint256 optionID = 0; optionID <= marketBaseData.strikes.length; optionID++) {\n            positions[optionID] = market.positions[msg.sender][optionID];\n        }\n        return (\n            liquidityUser[msg.sender],\n            positions,\n            getUserState(msg.sender, market)\n        );\n    }\n\n    function liquidityAdd ()\n        public\n        payable\n    {\n        if (msg.value > 0) {\n            liquidityUser[msg.sender] = liquidityUser[msg.sender].add(msg.value);\n            emit LiquidityAddWithdraw(msg.sender, block.timestamp, int256(msg.value));\n        }\n    }\n\n    function liquidityAddFor (address user)\n        public\n        payable\n    {\n        if (msg.value > 0) {\n            liquidityUser[user] = liquidityUser[user].add(msg.value);\n            emit LiquidityAddWithdraw(user, block.timestamp, int256(msg.value));\n        }\n    }\n\n    function createMarket (\n        DigiOptionsLib.MarketBaseData memory marketBaseData,\n        bool testMarket,\n        FactsignerVerify.Signature memory signature\n    )\n        public // this should be external (see https://github.com/ethereum/solidity/issues/5479)\n        override\n        returns (bytes32 marketHash)\n    {\n        assert(marketBaseData.expirationDatetime != 0);\n\n        { // scope here to safe stack space\n        bytes32 factHash = DigiOptionsLib.calcFactHash(marketBaseData);\n        require(\n            FactsignerVerify.verifyFactsignerMessage(\n                factHash,\n                signature\n            ) == marketBaseData.signerAddr,\n            \"Signature invalid.\"\n        );\n\n        marketHash = DigiOptionsLib.calcMarketHash(marketBaseData);\n        }\n\n        /* Check that the market does not already exists */\n        if (markets[marketHash].marketBaseData.expirationDatetime != 0)\n            return marketHash;\n\n        assert(marketBaseData.baseUnitExp == 18); // TODO remove this in the future\n\n        assert(marketBaseData.marketCategory < 64); // limit marketCategory (for now)\n\n        //assert((uint256(marketBaseData.transactionFee0)).add(uint256(marketBaseData.transactionFee1)).add(uint256(marketBaseData.transactionFeeSigner)) <= 500);\n\n        uint256 optionID;\n        if ((marketBaseData.config & uint8(FactsignerDefines.ConfigMask.ConfigMarketTypeIsStrikedMask)) != 0) {\n            /* striked market */\n            /* check that we have at least one strike */\n            assert(marketBaseData.strikes.length > 0);\n            assert(marketBaseData.strikes.length < 32765); // our first optionID is 0\n\n            /* check strikes are ordered */\n            for (optionID = 1; optionID < marketBaseData.strikes.length; optionID++) {\n                assert(marketBaseData.strikes[optionID-1] < marketBaseData.strikes[optionID]);\n            }\n\n            /* check that the final settlement precision high enough for the supplied strikes */\n            assert(int16(marketBaseData.baseUnitExp) >= marketBaseData.ndigit);\n            for (optionID = 0; optionID < marketBaseData.strikes.length; optionID++) {\n                assert((marketBaseData.strikes[optionID] % int256(10**uint256((int256(marketBaseData.baseUnitExp)-marketBaseData.ndigit)))) == 0);\n            }\n        } else {\n            /* named market */\n            /* check that we have at least two named ranges */\n            assert(marketBaseData.strikes.length > 1);\n            assert(marketBaseData.strikes.length <= 32765); // our first optionID is 0\n        }\n        assert(marketBaseData.marketCategory < 32); // limit marketCategory (for now)\n\n        uint256 existingMarketsBit = (1 << uint256(marketBaseData.marketInterval)) << (marketBaseData.marketCategory * 8);\n        if (existingMarkets & existingMarketsBit == 0) {\n            existingMarkets = existingMarkets | existingMarketsBit;\n        }\n\n        uint8 marketIntervalForEventFilter = DigiOptionsLib.calcMarketInterval(marketBaseData.expirationDatetime);\n        if ((marketBaseData.config & uint8(FactsignerDefines.ConfigMask.ConfigIntervalTypeIsUsedMask) != 0)) {\n            /* interval used */\n            assert(marketBaseData.marketInterval == marketIntervalForEventFilter);\n        } else {\n            /* interval unused */\n            assert(marketBaseData.marketInterval == uint8(FactsignerDefines.MarketInterval.NONE));\n        }\n\n        markets[marketHash].marketBaseData = marketBaseData;\n\n\n        emit MarketCreate(\n            marketHash, // marketKey\n            ((marketBaseData.expirationDatetime/DigiOptionsLib.getDivider(marketIntervalForEventFilter)) << 8) + marketIntervalForEventFilter,\n            marketBaseData.expirationDatetime,\n            marketBaseData.marketInterval,\n            marketBaseData.marketCategory,\n            marketBaseData.underlyingString\n        );\n        return marketHash;\n    }\n\n    function settlement (\n        bytes32 marketHash, /* market to settle */\n        FactsignerVerify.Signature memory signature,\n        int256 value,\n        address[] memory users,\n        bytes32[] memory offerHash\n    )\n        public // this should be external (see https://github.com/ethereum/solidity/issues/5479)\n    {\n        Market storage market = markets[marketHash];\n\n        /* anybody with access to the signed value (from signerAddr) can settle the market */\n\n        require(\n            FactsignerVerify.verifyFactsignerMessage(\n                keccak256(\n                    abi.encodePacked(\n                        DigiOptionsLib.calcFactHash(market.marketBaseData),\n                        value,\n                        uint16(FactsignerDefines.SettlementType.FINAL)\n                    )\n                ),\n                signature\n            ) == market.marketBaseData.signerAddr,\n            \"Signature invalid.\"\n        );\n\n        // just return if already settled\n        if (market.marketState.settled)\n            return;\n\n        uint256 winningOptionID;\n        uint256 optionID;\n        if ((market.marketBaseData.config & uint8(FactsignerDefines.ConfigMask.ConfigMarketTypeIsStrikedMask)) != 0) {\n            /* striked market */\n            winningOptionID = market.marketBaseData.strikes.length;\n            for (optionID = 0; optionID < market.marketBaseData.strikes.length; optionID++) {\n                if (value < market.marketBaseData.strikes[optionID]) {\n                    winningOptionID = optionID;\n                    break;\n                }\n            }\n        } else {\n            /* named market */\n            winningOptionID = 0; // default in case nothing matches\n            for (optionID = 0; optionID < market.marketBaseData.strikes.length; optionID++) {\n                if (value == market.marketBaseData.strikes[optionID]) {\n                    winningOptionID = optionID;\n                    break;\n                }\n            }\n        }\n        // TODO one transaction\n        market.marketState.winningOptionID = uint16(winningOptionID);\n        market.marketState.settled = true;\n\n        uint256 feeSum = uint256(market.marketBaseData.transactionFee0).add(uint256(market.marketBaseData.transactionFee1)).add(uint256(market.marketBaseData.transactionFeeSigner));\n        uint256 feePart = uint256(market.marketState.fee) / feeSum;\n        liquidityUser[market.marketBaseData.feeTaker0] = liquidityUser[market.marketBaseData.feeTaker0].add(feePart.mul(market.marketBaseData.transactionFee0));\n        liquidityUser[market.marketBaseData.feeTaker1] = liquidityUser[market.marketBaseData.feeTaker1].add(feePart.mul(market.marketBaseData.transactionFee1));\n        liquidityUser[market.marketBaseData.signerAddr] = liquidityUser[market.marketBaseData.signerAddr].add(feePart.mul(market.marketBaseData.transactionFeeSigner));\n\n        emit MarketSettlement(marketHash);\n\n        freeLiquidity(\n            marketHash,\n            users,\n            offerHash\n        );\n    }\n\n    function freeLiquidity(\n        bytes32 marketHash,\n        address[] memory users,\n        bytes32[] memory offerHash\n    )\n        public\n    {\n        Market storage market = markets[marketHash];\n\n        DigiOptionsLib.MarketState memory marketState = market.marketState;\n\n        // TODO fetch marketState once\n        uint16 winningOptionID = marketState.winningOptionID;\n        require(marketState.settled == true, \"Market not yet settled.\");\n\n        uint256 idx;\n        int256 minPosition;\n        for (idx = 0; idx < users.length; idx++) {\n\n            address user = users[idx];\n            //mapping(uint256 => Position) storage positions = market.positions[user];\n\n            if (getUserState(user, market) != DigiOptionsLib.UserState.PAYED_OUT) {\n\n                minPosition = getMinPosition(\n                    market,\n                    user\n                );\n\n                int256 pos = int256(market.positions[user][winningOptionID].value);\n                int256 size = pos.sub(minPosition);\n\n                market.positions[user][winningOptionID].rangeState = RANGESTATE_PAYED_OUT;\n            \n                liquidityUser[user] = liquidityUser[user].add(size.mul(ATOMIC_OPTION_PAYOUT_WEI).castToUint());\n                \n                // TODO a cheaper event would do too\n                if (pos >= 0) {\n                    emit PositionChange(\n                        //uint256(buyer) + uint256(market.userData[msg.sender].state),\n                        0, // indicates final payout\n                        uint256(user),\n                        marketHash,\n                        block.timestamp,\n                        winningOptionID,\n                        uint256(ATOMIC_OPTION_PAYOUT_WEI),\n                        uint256(pos),\n                        0\n                    );\n                } else {\n                    emit PositionChange(\n                        //uint256(buyer) + uint256(market.userData[msg.sender].state),\n                        uint256(user),\n                        0, // indicates final payout\n                        marketHash,\n                        block.timestamp,\n                        winningOptionID,\n                        uint256(ATOMIC_OPTION_PAYOUT_WEI),\n                        uint256(-pos),\n                        0\n                    );\n                }\n            }\n\n        }\n    }\n\n    function orderExecuteTest (\n        OrderOfferSigned memory orderOfferSigned,\n        uint256 sizeAccept // TODO rename to sizeAcceptMax?\n    )\n        public\n        view\n        returns (\n            uint256 sizeAcceptPossible,\n            bytes32 offerHash,\n            int256 liquidityOfferOwner, // only valid if sizeAcceptPossible > 0\n            int256 liquidityOfferTaker, // only valid if sizeAcceptPossible > 0\n            uint256 transactionFeeAmount // only valid if sizeAcceptPossible > 0\n        )\n    {\n\n        OrderOffer memory orderOffer = orderOfferSigned.orderOffer;\n        Market storage market = markets[orderOffer.marketHash];\n\n        offerHash = keccak256(\n            abi.encodePacked(\n                address(this), // this checks that the signature is valid only for this contract\n                orderOffer.marketHash,\n                orderOffer.optionID,\n                orderOffer.buy,\n                orderOffer.pricePerOption,\n                orderOffer.size,\n                orderOffer.offerID,\n                orderOffer.blockExpires,\n                orderOffer.offerOwner\n            )\n        );\n        if (!(\n                (DigiOptionsLib.verifyOffer(\n                    offerHash,\n                    orderOfferSigned.signature\n                ) == orderOffer.offerOwner)\n            )) {\n            sizeAccept = 0;\n            // TODO return immediately?\n        } else if (market.offersAccepted[offerHash].add(sizeAccept) > orderOffer.size) {\n            sizeAccept = orderOffer.size.sub(market.offersAccepted[offerHash]);\n        }\n\n        uint256 value = sizeAccept.mul(orderOffer.pricePerOption);\n\n        // TODO precalcuate sum of transactions fees\n        transactionFeeAmount = value.div(10000).mul(\n            uint256(market.marketBaseData.transactionFee0).add(uint256(market.marketBaseData.transactionFee1)).add(uint256(market.marketBaseData.transactionFeeSigner))\n        );\n\n        liquidityOfferOwner = getLiquidityAfterTrade(\n            market,\n            orderOffer.buy,\n            orderOffer,\n            orderOffer.offerOwner,\n            sizeAccept,\n            value\n        );\n        liquidityOfferTaker = getLiquidityAfterTrade(\n            market,\n            !orderOffer.buy,\n            orderOffer,\n            msg.sender,\n            sizeAccept,\n            value\n        ).sub(transactionFeeAmount.castToInt());\n\n        if (!(\n                (orderOffer.optionID <= market.marketBaseData.strikes.length) && // TODO depends on striked or named market?\n                (block.number <= orderOffer.blockExpires) &&\n                (block.number.add(OFFER_MAX_BLOCKS_INTO_FUTURE) >= orderOffer.blockExpires) &&\n                // offerTaker and offerOwner must not be the same (because liquidity is calculated seperately)\n                (orderOffer.offerOwner != msg.sender) &&\n                (liquidityOfferOwner >= int256(0)) &&\n                (liquidityOfferTaker >= int256(0))\n            )) {\n            sizeAccept = 0;\n        }\n        return (\n            sizeAccept,\n            offerHash,\n            liquidityOfferOwner, // only valid if sizeAcceptPossible > 0\n            liquidityOfferTaker, // only valid if sizeAcceptPossible > 0\n            transactionFeeAmount // only valid if sizeAcceptPossible > 0\n        );\n    }\n\n    function orderExecuteSingle (\n        OrderOfferSigned memory orderOfferSigned,\n        uint256 sizeAcceptMax /* maximum */\n    )\n        private\n        returns (uint256 sizeAcceptRemain)\n    {\n        OrderOffer memory orderOffer;\n\n        orderOffer = orderOfferSigned.orderOffer;\n        bytes32 offerHash;\n        uint256 sizeAcceptPossible;\n\n        Market storage market = markets[orderOffer.marketHash];\n\n        address buyer; // buys options / money giver\n        address seller; // sells options / money getter\n        if (orderOffer.buy) {\n            buyer = orderOffer.offerOwner;\n            seller = msg.sender;\n        } else {\n            buyer = msg.sender;\n            seller = orderOffer.offerOwner;\n        }\n\n        int256 liquidityOfferOwner; // only valid if sizeAcceptPossible > 0\n        int256 liquidityOfferTaker; // only valid if sizeAcceptPossible > 0\n        uint256 transactionFeeAmount; // only valid if sizeAcceptPossible > 0\n        (\n            sizeAcceptPossible,\n            offerHash,\n            liquidityOfferOwner, // only valid if sizeAcceptPossible > 0\n            liquidityOfferTaker, // only valid if sizeAcceptPossible > 0\n            transactionFeeAmount // only valid if sizeAcceptPossible > 0\n        ) = orderExecuteTest (\n            orderOfferSigned,\n            sizeAcceptMax\n        );\n        if (sizeAcceptPossible == 0) {\n            return sizeAcceptMax;\n        }\n\n        liquidityUser[orderOffer.offerOwner] = liquidityOfferOwner.castToUint();\n        liquidityUser[msg.sender] = liquidityOfferTaker.castToUint();\n        market.marketState.fee = uint256(market.marketState.fee).add(transactionFeeAmount).castToUint128();\n\n        {\n        // update positions\n        Position memory pos;\n        {\n            mapping(uint256 => Position) storage positions = market.positions[buyer];\n            pos = positions[orderOffer.optionID];\n            pos.rangeState = RANGESTATE_TRADED;\n            pos.value = int256(pos.value).add(int256(sizeAcceptPossible)).castToInt128();\n            positions[orderOffer.optionID] = pos;\n        }\n\n        {\n            mapping(uint256 => Position) storage positions = market.positions[seller];\n            pos = positions[orderOffer.optionID];\n            pos.value = int256(pos.value).sub(int256(sizeAcceptPossible)).castToInt128();\n            pos.rangeState = RANGESTATE_TRADED;\n            positions[orderOffer.optionID] = pos;\n        }\n        }\n\n        // remember that (some amount of) the offers is taken\n        market.offersAccepted[offerHash] = market.offersAccepted[offerHash].add(sizeAcceptPossible);\n\n        emit PositionChange(\n            //uint256(buyer) + uint256(market.userData[msg.sender].state),\n            uint256(buyer),\n            uint256(seller),\n            orderOffer.marketHash,\n            block.timestamp,\n            orderOffer.optionID,\n            orderOffer.pricePerOption,\n            sizeAcceptPossible,\n            offerHash\n        );\n\n        return sizeAcceptMax.sub(sizeAcceptPossible);\n    }\n\n    // OrderOfferSigned array should contain only sell orders or only buys orders for the same optionID and marketHash (not mixed)\n    function orderExecute (\n        OrderOfferSigned[] memory orderOfferSignedList,\n        uint256 sizeAcceptMax /* maximum for all supplied orderOfferSigned structs */\n    )\n        public // this should be external (see https://github.com/ethereum/solidity/issues/5479)\n    {\n        OrderOfferSigned memory orderOfferSigned;\n\n        for (uint256 orderOfferIdx=0; orderOfferIdx < orderOfferSignedList.length; orderOfferIdx++) {\n            orderOfferSigned = orderOfferSignedList[orderOfferIdx];\n\n            //Market storage market = markets[orderOfferSigned.orderOffer.marketHash];\n\n            sizeAcceptMax = orderExecuteSingle (\n                orderOfferSigned,\n                sizeAcceptMax\n            );\n        }\n    }\n\n    function getLiquidityAfterTrade(\n        Market storage market,\n        bool isBuyer,\n        OrderOffer memory orderOffer,\n        address userAddr,\n        uint256 sizeAccept,\n        uint256 value\n    )\n        internal\n        view\n        returns (int256 _liquidity)\n    {\n        int256 liquidity = liquidityUser[userAddr].castToInt();\n        int256 sizeAccept_;\n\n        if (! isBuyer) {\n            liquidity = liquidity.add(value.castToInt()); // seller gets money\n            sizeAccept_ = int256(0).sub(sizeAccept.castToInt());\n        } else {\n            liquidity = liquidity.sub(value.castToInt()); // buyer pays money\n            sizeAccept_ = sizeAccept.castToInt();\n        }\n\n        int256 minPositionBeforeTrade;\n        int256 minPositionAfterTrade;\n        (minPositionBeforeTrade, minPositionAfterTrade) = getMinPositionAfterTrade(\n            market,\n            userAddr,\n            orderOffer.optionID,\n            sizeAccept_\n        );\n\n        liquidity = liquidity.add((minPositionAfterTrade.sub(minPositionBeforeTrade)).mul(ATOMIC_OPTION_PAYOUT_WEI));\n\n        return liquidity;\n    }\n\n    function getMinPositionAfterTrade (\n        Market storage market,\n        address userAddr,\n        /* optional to calc the minimal position after a change */\n        uint16 optionID,\n        int256 positionChange\n    ) internal view\n        returns (int256 minPositionBeforeTrade_, int256 minPositionAfterTrade_)\n    {\n        int256 minPositionBeforeTrade = INT256_MAX;\n        int256 minPositionAfterTrade = INT256_MAX;\n\n        uint256 length = market.marketBaseData.strikes.length;\n        mapping(uint256 => Position) storage positions = market.positions[userAddr];\n        int256 position;\n        for (uint256 s = 0; s <= length; s++) {\n\n            position = positions[s].value;\n            if (position < minPositionBeforeTrade)\n                minPositionBeforeTrade = position;\n\n            if (s == optionID)\n                position = position.add(positionChange);\n\n            if (position < minPositionAfterTrade)\n                minPositionAfterTrade = position;\n        }\n        return (minPositionBeforeTrade, minPositionAfterTrade);\n    }\n\n    function getMinPosition (\n        Market storage market,\n        address userAddr\n    ) internal view\n        returns (int256 minPosition_)\n    {\n        int256 minPosition = INT256_MAX;\n\n        uint256 length = market.marketBaseData.strikes.length;\n        mapping(uint256 => Position) storage positions = market.positions[userAddr];\n        int256 position;\n        for (uint256 s = 0; s <= length; s++) {\n\n            position = positions[s].value;\n            if (position < minPosition)\n                minPosition = position;\n\n        }\n        return (minPosition);\n    }\n\n}\n",
		"./SafeCast.sol": "pragma solidity ^0.7.0;\n\n/*\n SPDX-License-Identifier: MIT\n*/\n\nlibrary SafeCast {\n    /**\n     * Cast unsigned a to signed a.\n     */\n    function castToInt(uint256 a) internal pure returns(int256) {\n        assert(a < (1 << 255));\n        return int(a);\n    }\n\n    /**\n     * Cast signed a to unsigned a.\n     */\n    function castToUint(int256 a) internal pure returns(uint256) {\n        assert(a >= 0);\n        return uint(a);\n    }\n\n    // TODO\n    function castToInt128(int256 a) internal pure returns(int128) {\n        assert(int128(a) == a);\n        return int128(a);\n    }\n\n    // TODO\n    function castToUint128(uint256 a) internal pure returns(uint128) {\n        assert(uint128(a) == a);\n        return uint128(a);\n    }\n}\n",
		"@openzeppelin/contracts/math/SignedSafeMath.sol": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @title SignedSafeMath\n * @dev Signed math operations with safety checks that revert on error.\n */\nlibrary SignedSafeMath {\n    int256 constant private _INT256_MIN = -2**255;\n\n    /**\n     * @dev Returns the multiplication of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(int256 a, int256 b) internal pure returns (int256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        require(!(a == -1 && b == _INT256_MIN), \"SignedSafeMath: multiplication overflow\");\n\n        int256 c = a * b;\n        require(c / a == b, \"SignedSafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two signed integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(int256 a, int256 b) internal pure returns (int256) {\n        require(b != 0, \"SignedSafeMath: division by zero\");\n        require(!(b == -1 && a == _INT256_MIN), \"SignedSafeMath: division overflow\");\n\n        int256 c = a / b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a - b;\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \"SignedSafeMath: subtraction overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the addition of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a + b;\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \"SignedSafeMath: addition overflow\");\n\n        return c;\n    }\n}\n"
	},
	"compiler": {
		"name": "solc",
		"version": "0.7.0+commit.9e61f92b",
		"settings": {
			"remappings": [
				"factsigner=/home/ulf/digioptions/digioptions-contracts.js/node_modules/factsigner",
				"@openzeppelin/contracts=/home/ulf/digioptions/digioptions-contracts.js/node_modules/@openzeppelin/contracts"
			],
			"optimizer": {
				"enabled": true,
				"runs": 20000,
				"details": {
					"yul": true,
					"deduplicate": true,
					"cse": true,
					"constantOptimizer": true
				}
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap"
					]
				}
			},
			"evmVersion": "byzantium"
		}
	},
	"chains": {}
}