{
	"schemaVersion": "2.0.0",
	"contractName": "DigiOptionsMarketLister",
	"compilerOutput": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "contract DigiOptionsMarkets",
						"name": "addr",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "bytes32",
						"name": "marketKey",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "uint48",
						"name": "expirationDatetimeFilter",
						"type": "uint48"
					},
					{
						"indexed": false,
						"internalType": "uint40",
						"name": "expirationDatetime",
						"type": "uint40"
					},
					{
						"indexed": true,
						"internalType": "uint8",
						"name": "marketInterval",
						"type": "uint8"
					},
					{
						"indexed": true,
						"internalType": "uint8",
						"name": "marketCategory",
						"type": "uint8"
					},
					{
						"indexed": false,
						"internalType": "uint16",
						"name": "openDelaySeconds",
						"type": "uint16"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "underlyingString",
						"type": "string"
					}
				],
				"name": "MarketCreateLister",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "uint40",
						"name": "expirationDatetime",
						"type": "uint40"
					}
				],
				"name": "calcMarketInterval",
				"outputs": [
					{
						"internalType": "uint8",
						"name": "interval",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "string",
								"name": "underlyingString",
								"type": "string"
							},
							{
								"internalType": "uint40",
								"name": "expirationDatetime",
								"type": "uint40"
							},
							{
								"internalType": "uint24",
								"name": "objectionPeriod",
								"type": "uint24"
							},
							{
								"internalType": "uint8",
								"name": "config",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "marketCategory",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "baseUnitExp",
								"type": "uint8"
							},
							{
								"internalType": "int8",
								"name": "ndigit",
								"type": "int8"
							},
							{
								"internalType": "address",
								"name": "signerAddr",
								"type": "address"
							},
							{
								"internalType": "uint8",
								"name": "marketInterval",
								"type": "uint8"
							},
							{
								"internalType": "uint32",
								"name": "transactionFee0",
								"type": "uint32"
							},
							{
								"internalType": "address",
								"name": "feeTaker0",
								"type": "address"
							},
							{
								"internalType": "uint32",
								"name": "transactionFee1",
								"type": "uint32"
							},
							{
								"internalType": "uint32",
								"name": "transactionFeeSigner",
								"type": "uint32"
							},
							{
								"internalType": "address",
								"name": "feeTaker1",
								"type": "address"
							},
							{
								"internalType": "int128[]",
								"name": "strikes",
								"type": "int128[]"
							}
						],
						"internalType": "struct DigiOptionsLib.MarketBaseData",
						"name": "marketBaseData",
						"type": "tuple"
					},
					{
						"internalType": "bool",
						"name": "testMarket",
						"type": "bool"
					},
					{
						"components": [
							{
								"internalType": "uint8",
								"name": "v",
								"type": "uint8"
							},
							{
								"internalType": "bytes32",
								"name": "r",
								"type": "bytes32"
							},
							{
								"internalType": "bytes32",
								"name": "s",
								"type": "bytes32"
							}
						],
						"internalType": "struct FactsignerVerify.Signature",
						"name": "signature",
						"type": "tuple"
					}
				],
				"name": "createMarket",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "marketHash",
						"type": "bytes32"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getContractInfo",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "contractInfoValues",
						"type": "uint256[]"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "addr",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "marketHash",
						"type": "bytes32"
					}
				],
				"name": "getMarketDataByMarketHash",
				"outputs": [
					{
						"components": [
							{
								"components": [
									{
										"internalType": "string",
										"name": "underlyingString",
										"type": "string"
									},
									{
										"internalType": "uint40",
										"name": "expirationDatetime",
										"type": "uint40"
									},
									{
										"internalType": "uint24",
										"name": "objectionPeriod",
										"type": "uint24"
									},
									{
										"internalType": "uint8",
										"name": "config",
										"type": "uint8"
									},
									{
										"internalType": "uint8",
										"name": "marketCategory",
										"type": "uint8"
									},
									{
										"internalType": "uint8",
										"name": "baseUnitExp",
										"type": "uint8"
									},
									{
										"internalType": "int8",
										"name": "ndigit",
										"type": "int8"
									},
									{
										"internalType": "address",
										"name": "signerAddr",
										"type": "address"
									},
									{
										"internalType": "uint8",
										"name": "marketInterval",
										"type": "uint8"
									},
									{
										"internalType": "uint32",
										"name": "transactionFee0",
										"type": "uint32"
									},
									{
										"internalType": "address",
										"name": "feeTaker0",
										"type": "address"
									},
									{
										"internalType": "uint32",
										"name": "transactionFee1",
										"type": "uint32"
									},
									{
										"internalType": "uint32",
										"name": "transactionFeeSigner",
										"type": "uint32"
									},
									{
										"internalType": "address",
										"name": "feeTaker1",
										"type": "address"
									},
									{
										"internalType": "int128[]",
										"name": "strikes",
										"type": "int128[]"
									}
								],
								"internalType": "struct DigiOptionsLib.MarketBaseData",
								"name": "marketBaseData",
								"type": "tuple"
							},
							{
								"components": [
									{
										"internalType": "uint128",
										"name": "fee",
										"type": "uint128"
									},
									{
										"internalType": "uint16",
										"name": "winningOptionID",
										"type": "uint16"
									},
									{
										"internalType": "bool",
										"name": "settled",
										"type": "bool"
									}
								],
								"internalType": "struct DigiOptionsLib.MarketState",
								"name": "marketState",
								"type": "tuple"
							},
							{
								"internalType": "bytes32",
								"name": "marketHash",
								"type": "bytes32"
							},
							{
								"internalType": "enum DigiOptionsLib.UserState",
								"name": "userState",
								"type": "uint8"
							},
							{
								"internalType": "bool",
								"name": "testMarket",
								"type": "bool"
							}
						],
						"internalType": "struct DigiOptionsLib.MarketData",
						"name": "marketData",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "addr",
						"type": "address"
					},
					{
						"internalType": "bytes32[]",
						"name": "marketKeys",
						"type": "bytes32[]"
					}
				],
				"name": "getMarketDataListByMarketKeys",
				"outputs": [
					{
						"components": [
							{
								"components": [
									{
										"internalType": "string",
										"name": "underlyingString",
										"type": "string"
									},
									{
										"internalType": "uint40",
										"name": "expirationDatetime",
										"type": "uint40"
									},
									{
										"internalType": "uint24",
										"name": "objectionPeriod",
										"type": "uint24"
									},
									{
										"internalType": "uint8",
										"name": "config",
										"type": "uint8"
									},
									{
										"internalType": "uint8",
										"name": "marketCategory",
										"type": "uint8"
									},
									{
										"internalType": "uint8",
										"name": "baseUnitExp",
										"type": "uint8"
									},
									{
										"internalType": "int8",
										"name": "ndigit",
										"type": "int8"
									},
									{
										"internalType": "address",
										"name": "signerAddr",
										"type": "address"
									},
									{
										"internalType": "uint8",
										"name": "marketInterval",
										"type": "uint8"
									},
									{
										"internalType": "uint32",
										"name": "transactionFee0",
										"type": "uint32"
									},
									{
										"internalType": "address",
										"name": "feeTaker0",
										"type": "address"
									},
									{
										"internalType": "uint32",
										"name": "transactionFee1",
										"type": "uint32"
									},
									{
										"internalType": "uint32",
										"name": "transactionFeeSigner",
										"type": "uint32"
									},
									{
										"internalType": "address",
										"name": "feeTaker1",
										"type": "address"
									},
									{
										"internalType": "int128[]",
										"name": "strikes",
										"type": "int128[]"
									}
								],
								"internalType": "struct DigiOptionsLib.MarketBaseData",
								"name": "marketBaseData",
								"type": "tuple"
							},
							{
								"components": [
									{
										"internalType": "uint128",
										"name": "fee",
										"type": "uint128"
									},
									{
										"internalType": "uint16",
										"name": "winningOptionID",
										"type": "uint16"
									},
									{
										"internalType": "bool",
										"name": "settled",
										"type": "bool"
									}
								],
								"internalType": "struct DigiOptionsLib.MarketState",
								"name": "marketState",
								"type": "tuple"
							},
							{
								"internalType": "bytes32",
								"name": "marketHash",
								"type": "bytes32"
							},
							{
								"internalType": "enum DigiOptionsLib.UserState",
								"name": "userState",
								"type": "uint8"
							},
							{
								"internalType": "bool",
								"name": "testMarket",
								"type": "bool"
							}
						],
						"internalType": "struct DigiOptionsLib.MarketData[]",
						"name": "marketDataList",
						"type": "tuple[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getMarketListerInfo",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "listerValues",
						"type": "uint256[]"
					},
					{
						"components": [
							{
								"internalType": "address",
								"name": "addr",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "value",
								"type": "uint256"
							}
						],
						"internalType": "struct DigiOptionsMarketLister.SignerData[]",
						"name": "signerDataList",
						"type": "tuple[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "marketHash",
						"type": "bytes32"
					},
					{
						"internalType": "bool",
						"name": "testMarket",
						"type": "bool"
					}
				],
				"name": "registerMarket",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "string",
								"name": "underlyingString",
								"type": "string"
							},
							{
								"internalType": "uint40",
								"name": "expirationDatetime",
								"type": "uint40"
							},
							{
								"internalType": "uint24",
								"name": "objectionPeriod",
								"type": "uint24"
							},
							{
								"internalType": "uint8",
								"name": "config",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "marketCategory",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "baseUnitExp",
								"type": "uint8"
							},
							{
								"internalType": "int8",
								"name": "ndigit",
								"type": "int8"
							},
							{
								"internalType": "address",
								"name": "signerAddr",
								"type": "address"
							},
							{
								"internalType": "uint8",
								"name": "marketInterval",
								"type": "uint8"
							},
							{
								"internalType": "uint32",
								"name": "transactionFee0",
								"type": "uint32"
							},
							{
								"internalType": "address",
								"name": "feeTaker0",
								"type": "address"
							},
							{
								"internalType": "uint32",
								"name": "transactionFee1",
								"type": "uint32"
							},
							{
								"internalType": "uint32",
								"name": "transactionFeeSigner",
								"type": "uint32"
							},
							{
								"internalType": "address",
								"name": "feeTaker1",
								"type": "address"
							},
							{
								"internalType": "int128[]",
								"name": "strikes",
								"type": "int128[]"
							}
						],
						"internalType": "struct DigiOptionsLib.MarketBaseData",
						"name": "marketBaseData",
						"type": "tuple"
					}
				],
				"name": "registerMarketTest",
				"outputs": [
					{
						"internalType": "bool",
						"name": "registerPossible",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "addr",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "setSigner",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "marketHash",
						"type": "bytes32"
					},
					{
						"internalType": "bool",
						"name": "testMarket",
						"type": "bool"
					}
				],
				"name": "setTestMarket",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"evm": {
			"bytecode": {
				"linkReferences": {},
				"object": "0x608060405260006006553480156200001657600080fd5b50604051620025d5380380620025d5833981016040819052620000399162000071565b60018054336001600160a01b03199182161790915543600055600280549091166001600160a01b0392909216919091179055620000a1565b60006020828403121562000083578081fd5b81516001600160a01b03811681146200009a578182fd5b9392505050565b61252480620000b16000396000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c80637cc1f86711610076578063c70be1461161005b578063c70be14614610172578063e8d261c914610192578063ed1d26d7146101b2576100be565b80637cc1f8671461014a5780638677e7b91461015f576100be565b806352d02688116100a757806352d026881461010257806365e47b8c14610122578063711c2b9414610137576100be565b8063095200ce146100c35780630f8f8244146100ec575b600080fd5b6100d66100d1366004611c50565b6101d2565b6040516100e3919061236b565b60405180910390f35b6100f4610281565b6040516100e3929190612134565b61011561011036600461189c565b61042e565b6040516100e391906120a3565b61013561013036600461191c565b6104d1565b005b6101356101453660046119f2565b61067d565b61015261070c565b6040516100e39190612121565b61013561016d3660046119f2565b610877565b61018561018036600461191c565b6109ae565b6040516100e39190612346565b6101a56101a0366004611a8f565b610aa0565b6040516100e391906121b5565b6101c56101c0366004611a21565b610ba1565b6040516100e391906121aa565b6002546040517f095200ce00000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff169063095200ce90610229908590600401612359565b60206040518083038186803b15801561024157600080fd5b505afa158015610255573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506102799190810190611c6c565b90505b919050565b60408051600480825260a082019092526060918291906020820160808036833701905050915062320000826000815181106102b857fe5b60209081029190910101526001805473ffffffffffffffffffffffffffffffffffffffff16908390815181106102ea57fe5b6020908102919091010152662386f26fc100008260028151811061030a57fe5b60209081029190910101526102588260038151811061032557fe5b602002602001018181525050600060065490508060405190808252806020026020018201604052801561037257816020015b61035f611297565b8152602001906001900390816103575790505b5060045490925073ffffffffffffffffffffffffffffffffffffffff1660005b828110156104275760408051808201825273ffffffffffffffffffffffffffffffffffffffff8416808252600090815260056020908152929020549181019190915284518590839081106103e257fe5b60209081029190910181019190915273ffffffffffffffffffffffffffffffffffffffff92831660009081526005909152604090206001908101549092169101610392565b5050509091565b60408051828152602080840282010190915260609082801561046a57816020015b6104576112ae565b81526020019060019003908161044f5790505b50905060005b828110156104c9576104aa856007600087878681811061048c57fe5b905060200201358152602001908152602001600020600001546109ae565b8282815181106104b657fe5b6020908102919091010152600101610470565b509392505050565b60015473ffffffffffffffffffffffffffffffffffffffff16331461052b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052290612201565b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff821660009081526005602052604090206001015474010000000000000000000000000000000000000000900460ff16156105a15773ffffffffffffffffffffffffffffffffffffffff82166000908152600560205260409020819055610679565b600480546040805160608101825284815273ffffffffffffffffffffffffffffffffffffffff92831660208083019182526001838501818152898716600081815260059094529590922093518455915192820180549151151574010000000000000000000000000000000000000000027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff949096167fffffffffffffffffffffffff00000000000000000000000000000000000000009283161793909316949094179091558354909216179091556006805490910190555b5050565b60015473ffffffffffffffffffffffffffffffffffffffff1633146106ce576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052290612201565b60009182526008602052604090912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b606080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637cc1f8676040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561077957600080fd5b505af115801561078d573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526107d39190810190611947565b90506002816000815181106107e457fe5b6020908102919091010152623200008160018151811061080057fe5b602090810291909101015260025473ffffffffffffffffffffffffffffffffffffffff168160038151811061083157fe5b60209081029190910101526000548160048151811061084c57fe5b60209081029190910101526003548160088151811061086757fe5b6020908102919091010152905090565b61087f6112e9565b6002546040517fee1f69eb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063ee1f69eb906108d59086906004016121b5565b60006040518083038186803b1580156108ed57600080fd5b505afa158015610901573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526109479190810190611a5c565b9050806020015164ffffffffff166000141561095f57fe5b61096881610ba1565b61099e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610522906122cc565b6109a9818484610c96565b505050565b6109b66112ae565b6002546040517fc70be14600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063c70be14690610a0e908690869060040161207d565b60006040518083038186803b158015610a2657600080fd5b505afa158015610a3a573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610a809190810190611b40565b6000928352600860205260409092205460ff161515608083015250919050565b6000610aab84610ba1565b610ae1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610522906122cc565b6002546040517fe8d261c900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063e8d261c990610b3b90879087908790600401612303565b602060405180830381600087803b158015610b5557600080fd5b505af1158015610b69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610b8d91908101906119da565b9050610b9a848285610c96565b9392505050565b60e081015173ffffffffffffffffffffffffffffffffffffffff16600090815260056020526040812054158015610bf0575060015473ffffffffffffffffffffffffffffffffffffffff163314155b15610bfd5750600061027c565b662386f26fc1000067ffffffffffffffff16610c5383610180015163ffffffff16610c4785610160015163ffffffff1686610120015163ffffffff16610fff90919063ffffffff16565b9063ffffffff610fff16565b11158015610c81575060015461014083015173ffffffffffffffffffffffffffffffffffffffff9081169116145b15610c8e5750600161027c565b506000919050565b6000610ca184611047565b6000818152600760205260409020600101549091506d0100000000000000000000000000900461ffff16610f2b576040805160808101825284815261012086015163ffffffff16602080830191825264ffffffffff428116848601908152610258606086019081526000888152600790945295909220935184559151600193840180549251955161ffff166d0100000000000000000000000000027fffffffffffffffffffffffffffffffffff0000ffffffffffffffffffffffffff9690941668010000000000000000027fffffffffffffffffffffffffffffffffffffff0000000000ffffffffffffffff67ffffffffffffffff939093167fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000009094169390931791909116919091179390931617909155543373ffffffffffffffffffffffffffffffffffffffff9091161415610e2b57600083815260086020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168315151790555b6000846080015160080260ff1685610100015160ff166001901b901b9050806003541660001415610e5f5760038054821790555b606085015160009060041615610e7b5750610100850151610e8b565b610e888660200151611125565b90505b856080015160ff1686610100015160ff168260ff166008610eae8560ff166111e6565b65ffffffffffff168a6020015164ffffffffff1681610ec957fe5b0465ffffffffffff16901b0165ffffffffffff167fc1b504e22197c95fe2a6e166fd15fcda59f27ac6bbc947bc2a1c87d31e7efcf9868a602001516102588c60000151604051610f1c94939291906121be565b60405180910390a45050610ff9565b60008181526007602052604090206001015461012085015167ffffffffffffffff90911663ffffffff909116118015610fa557506000818152600760205260409020600101546d0100000000000000000000000000810461ffff166801000000000000000090910464ffffffffff90811691909101164211155b15610ff9576000818152600760205260409020838155610120850151600190910180547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001663ffffffff9092169190911790555b50505050565b60008282018381101561103e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052290612295565b90505b92915050565b6000606082600001516040516020016110609190612061565b6040516020818303038152906040528051906020012083602001518460400151856060015186608001518760a001518860c001518961010001516040516020016110b1989796959493929190611f5d565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00181529190526060840151909150600116611117576101c0830151604051611105918391602001612018565b60405160208183030381529060405290505b805160209091012092915050565b6000808061114064ffffffffff85164263ffffffff61121416565b90506303c26700811061117f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105229061225e565b623b53808111156111945760015b91506111df565b620a8c008111156111a657600361118d565b6201fa408111156111b857600461118d565b611c208111156111c957600561118d565b6103848111156111da57600661118d565b600791505b5092915050565b600060606040518060600160405280602a81526020016124c5602a9139600184016006020151915050919050565b600061103e83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506000818484111561128f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052291906121ee565b505050900390565b604080518082019091526000808252602082015290565b6040518060a001604052806112c16112e9565b81526020016112ce611367565b81526000602082018190526040820181905260609091015290565b604080516101e08101825260608082526000602083018190529282018390528082018390526080820183905260a0820183905260c0820183905260e08201839052610100820183905261012082018390526101408201839052610160820183905261018082018390526101a08201929092526101c081019190915290565b604080516060810182526000808252602082018190529181019190915290565b80356110418161242e565b80516110418161242e565b600082601f8301126113ad578081fd5b81356113c06113bb826123a0565b612379565b8181529150602080830190848101818402860182018710156113e157600080fd5b60005b848110156114095781356113f781612461565b845292820192908201906001016113e4565b505050505092915050565b600082601f830112611424578081fd5b81516114326113bb826123a0565b81815291506020808301908481018184028601820187101561145357600080fd5b60005b8481101561140957815161146981612461565b84529282019290820190600101611456565b805161104181612453565b80516003811061104157600080fd5b803561104181612470565b805161104181612470565b600082601f8301126114bb578081fd5b81356114c96113bb826123c0565b91508082528360208285010111156114e057600080fd5b8060208401602084013760009082016020015292915050565b600082601f830112611509578081fd5b81516115176113bb826123c0565b915080825283602082850101111561152e57600080fd5b6111df816020840160208601612402565b60006101e0808385031215611552578182fd5b61155b81612379565b915050815167ffffffffffffffff8082111561157657600080fd5b611582858386016114f9565b8352611591856020860161187b565b60208401526115a3856040860161184f565b60408401526115b58560608601611891565b60608401526115c78560808601611891565b60808401526115d98560a08601611891565b60a08401526115eb8560c086016114a0565b60c08401526115fd8560e08601611392565b60e0840152610100915061161385838601611891565b82840152610120915061162885838601611865565b82840152610140915061163d85838601611392565b82840152610160915061165285838601611865565b82840152610180915061166785838601611865565b828401526101a0915061167c85838601611392565b828401526101c09150818401518181111561169657600080fd5b6116a286828701611414565b8385015250505092915050565b60006101e08083850312156116c2578182fd5b6116cb81612379565b915050813567ffffffffffffffff808211156116e657600080fd5b6116f2858386016114ab565b83526117018560208601611870565b60208401526117138560408601611844565b60408401526117258560608601611886565b60608401526117378560808601611886565b60808401526117498560a08601611886565b60a084015261175b8560c08601611495565b60c084015261176d8560e08601611387565b60e0840152610100915061178385838601611886565b8284015261012091506117988583860161185a565b8284015261014091506117ad85838601611387565b8284015261016091506117c28583860161185a565b8284015261018091506117d78583860161185a565b828401526101a091506117ec85838601611387565b828401526101c09150818401358181111561180657600080fd5b6116a28682870161139d565b80516fffffffffffffffffffffffffffffffff8116811461104157600080fd5b805161ffff8116811461104157600080fd5b80356110418161247f565b80516110418161247f565b803561104181612490565b805161104181612490565b8035611041816124a2565b8051611041816124a2565b8035611041816124b5565b8051611041816124b5565b6000806000604084860312156118b0578283fd5b83356118bb8161242e565b9250602084013567ffffffffffffffff808211156118d7578384fd5b81860187601f8201126118e8578485fd5b80359250818311156118f8578485fd5b876020808502830101111561190b578485fd5b949760209095019650909450505050565b6000806040838503121561192e578182fd5b82356119398161242e565b946020939093013593505050565b60006020808385031215611959578182fd5b825167ffffffffffffffff81111561196f578283fd5b80840185601f820112611980578384fd5b805191506119906113bb836123a0565b82815283810190828501858502840186018910156119ac578687fd5b8693505b848410156119ce5780518352600193909301929185019185016119b0565b50979650505050505050565b6000602082840312156119eb578081fd5b5051919050565b60008060408385031215611a04578182fd5b823591506020830135611a1681612453565b809150509250929050565b600060208284031215611a32578081fd5b813567ffffffffffffffff811115611a48578182fd5b611a54848285016116af565b949350505050565b600060208284031215611a6d578081fd5b815167ffffffffffffffff811115611a83578182fd5b611a548482850161153f565b600080600083850360a0811215611aa4578182fd5b843567ffffffffffffffff811115611aba578283fd5b611ac6878288016116af565b9450506020850135611ad781612453565b925060607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc082011215611b08578182fd5b50611b136060612379565b6040850135611b21816124b5565b8152606085013560208201526080909401356040850152509093909250565b600060208284031215611b51578081fd5b815167ffffffffffffffff80821115611b68578283fd5b818401808603925060e0831215611b7d578384fd5b611b8760a0612379565b815183811115611b95578586fd5b611ba18882850161153f565b82525060607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe085011215611bd3578485fd5b611bdd6060612379565b9350611bec8760208401611812565b8452611bfb8760408401611832565b6020850152611c0d876060840161147b565b604085015283602082015260808201516040820152611c2f8760a08401611486565b6060820152611c418760c0840161147b565b60808201529695505050505050565b600060208284031215611c61578081fd5b813561103e816124a2565b600060208284031215611c7d578081fd5b815161103e816124b5565b73ffffffffffffffffffffffffffffffffffffffff169052565b6000815180845260208085019450808401835b83811015611cd4578151600f0b87529582019590820190600101611cb5565b509495945050505050565b6000815180845260208085019450808401835b83811015611cd457815187529582019590820190600101611cf2565b60000b9052565b60008151808452611d2d816020860160208601612402565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60006101e08251818552611d7582860182611d15565b60208501519250611d896020870184611f4b565b60408501519250611d9d6040870184611f38565b60608501519250611db16060870184611f56565b60808501519250611dc56080870184611f56565b60a08501519250611dd960a0870184611f56565b60c08501519250611ded60c0870184611d0e565b60e08501519250611e0160e0870184611c88565b6101009250828501519150611e1883870183611f56565b6101209250828501519150611e2f83870183611f41565b6101409250828501519150611e4683870183611c88565b6101609250828501519150611e5d83870183611f41565b6101809250828501519150611e7483870183611f41565b6101a09250828501519150611e8b83870183611c88565b6101c0925082850151915085810383870152611ea78183611ca2565b9695505050505050565b6000815160e08452611ec660e0850182611d5f565b602084015191506fffffffffffffffffffffffffffffffff825116602086015261ffff6020830151166040860152604082015115156060860152604084015160808601526060840151915060038210611f1b57fe5b8160a08601526080840151151560c0860152809250505092915050565b62ffffff169052565b63ffffffff169052565b64ffffffffff169052565b60ff169052565b97885260d89690961b7fffffffffff00000000000000000000000000000000000000000000000000000016602088015260e89490941b7fffffff000000000000000000000000000000000000000000000000000000000016602587015260f892831b7fff00000000000000000000000000000000000000000000000000000000000000908116602888015291831b82166029870152821b8116602a86015260009290920b811b602b8501529190911b16602c820152602d0190565b60008351602061202b8285838901612402565b8451918401818601845b84811015612054578151600f0b83529183019190830190600101612035565b5090979650505050505050565b60008251612073818460208701612402565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b6000602080830181845280855180835260408601915060408482028701019250838701855b82811015612114577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452612102858351611eb1565b945092850192908501906001016120c8565b5092979650505050505050565b60006020825261103e6020830184611cdf565b6000604080835261214781840186611cdf565b838103602085810191909152855180835286820192820190855b8181101561219c578451805173ffffffffffffffffffffffffffffffffffffffff168452840151848401529383019391850191600101612161565b509098975050505050505050565b901515815260200190565b90815260200190565b600085825264ffffffffff8516602083015261ffff8416604083015260806060830152611ea76080830184611d15565b60006020825261103e6020830184611d15565b60208082526022908201527f4f6e6c79206f776e65722063616e2063616c6c20746869732066756e6374696f60408201527f6e2e000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526015908201527f746f6f2066617220696e20746865206675747572650000000000000000000000604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526015908201527f7265676973746572206e6f7420706f737369626c650000000000000000000000604082015260600190565b600060a0825261231660a0830186611d5f565b9050831515602083015260ff83511660408301526020830151606083015260408301516080830152949350505050565b60006020825261103e6020830184611eb1565b64ffffffffff91909116815260200190565b60ff91909116815260200190565b60405181810167ffffffffffffffff8111828210171561239857600080fd5b604052919050565b600067ffffffffffffffff8211156123b6578081fd5b5060209081020190565b600067ffffffffffffffff8211156123d6578081fd5b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60005b8381101561241d578181015183820152602001612405565b83811115610ff95750506000910152565b73ffffffffffffffffffffffffffffffffffffffff8116811461245057600080fd5b50565b801515811461245057600080fd5b80600f0b811461245057600080fd5b8060000b811461245057600080fd5b62ffffff8116811461245057600080fd5b63ffffffff8116811461245057600080fd5b64ffffffffff8116811461245057600080fd5b60ff8116811461245057600080fdfe000000000000000000fa7d000000003b53800000000a8c0000000001fa40000000001c20000000000000a2646970667358221220a19a1a10ef28809692b4d3b626dfb2c0834ef82b3bbfcb071d96067eb15ea97564736f6c63430006030033",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 PUSH1 0x6 SSTORE CALLVALUE DUP1 ISZERO PUSH3 0x16 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x25D5 CODESIZE SUB DUP1 PUSH3 0x25D5 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x39 SWAP2 PUSH3 0x71 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP2 DUP3 AND OR SWAP1 SWAP2 SSTORE NUMBER PUSH1 0x0 SSTORE PUSH1 0x2 DUP1 SLOAD SWAP1 SWAP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH3 0xA1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x83 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x9A JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x2524 DUP1 PUSH3 0xB1 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xBE JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7CC1F867 GT PUSH2 0x76 JUMPI DUP1 PUSH4 0xC70BE146 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xC70BE146 EQ PUSH2 0x172 JUMPI DUP1 PUSH4 0xE8D261C9 EQ PUSH2 0x192 JUMPI DUP1 PUSH4 0xED1D26D7 EQ PUSH2 0x1B2 JUMPI PUSH2 0xBE JUMP JUMPDEST DUP1 PUSH4 0x7CC1F867 EQ PUSH2 0x14A JUMPI DUP1 PUSH4 0x8677E7B9 EQ PUSH2 0x15F JUMPI PUSH2 0xBE JUMP JUMPDEST DUP1 PUSH4 0x52D02688 GT PUSH2 0xA7 JUMPI DUP1 PUSH4 0x52D02688 EQ PUSH2 0x102 JUMPI DUP1 PUSH4 0x65E47B8C EQ PUSH2 0x122 JUMPI DUP1 PUSH4 0x711C2B94 EQ PUSH2 0x137 JUMPI PUSH2 0xBE JUMP JUMPDEST DUP1 PUSH4 0x95200CE EQ PUSH2 0xC3 JUMPI DUP1 PUSH4 0xF8F8244 EQ PUSH2 0xEC JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD6 PUSH2 0xD1 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C50 JUMP JUMPDEST PUSH2 0x1D2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0x236B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xF4 PUSH2 0x281 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP3 SWAP2 SWAP1 PUSH2 0x2134 JUMP JUMPDEST PUSH2 0x115 PUSH2 0x110 CALLDATASIZE PUSH1 0x4 PUSH2 0x189C JUMP JUMPDEST PUSH2 0x42E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0x20A3 JUMP JUMPDEST PUSH2 0x135 PUSH2 0x130 CALLDATASIZE PUSH1 0x4 PUSH2 0x191C JUMP JUMPDEST PUSH2 0x4D1 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x135 PUSH2 0x145 CALLDATASIZE PUSH1 0x4 PUSH2 0x19F2 JUMP JUMPDEST PUSH2 0x67D JUMP JUMPDEST PUSH2 0x152 PUSH2 0x70C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0x2121 JUMP JUMPDEST PUSH2 0x135 PUSH2 0x16D CALLDATASIZE PUSH1 0x4 PUSH2 0x19F2 JUMP JUMPDEST PUSH2 0x877 JUMP JUMPDEST PUSH2 0x185 PUSH2 0x180 CALLDATASIZE PUSH1 0x4 PUSH2 0x191C JUMP JUMPDEST PUSH2 0x9AE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0x2346 JUMP JUMPDEST PUSH2 0x1A5 PUSH2 0x1A0 CALLDATASIZE PUSH1 0x4 PUSH2 0x1A8F JUMP JUMPDEST PUSH2 0xAA0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0x21B5 JUMP JUMPDEST PUSH2 0x1C5 PUSH2 0x1C0 CALLDATASIZE PUSH1 0x4 PUSH2 0x1A21 JUMP JUMPDEST PUSH2 0xBA1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0x21AA JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH32 0x95200CE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x95200CE SWAP1 PUSH2 0x229 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x2359 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x241 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x255 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x279 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1C6C JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x4 DUP1 DUP3 MSTORE PUSH1 0xA0 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 DUP3 SWAP2 SWAP1 PUSH1 0x20 DUP3 ADD PUSH1 0x80 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP2 POP PUSH3 0x320000 DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x2B8 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP4 SWAP1 DUP2 MLOAD DUP2 LT PUSH2 0x2EA JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH7 0x2386F26FC10000 DUP3 PUSH1 0x2 DUP2 MLOAD DUP2 LT PUSH2 0x30A JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH2 0x258 DUP3 PUSH1 0x3 DUP2 MLOAD DUP2 LT PUSH2 0x325 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH1 0x0 PUSH1 0x6 SLOAD SWAP1 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x372 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x35F PUSH2 0x1297 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x357 JUMPI SWAP1 POP JUMPDEST POP PUSH1 0x4 SLOAD SWAP1 SWAP3 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x427 JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND DUP1 DUP3 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE SWAP3 SWAP1 KECCAK256 SLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP5 MLOAD DUP6 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0x3E2 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 SWAP1 DUP2 ADD SLOAD SWAP1 SWAP3 AND SWAP2 ADD PUSH2 0x392 JUMP JUMPDEST POP POP POP SWAP1 SWAP2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 SWAP1 DUP3 DUP1 ISZERO PUSH2 0x46A JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x457 PUSH2 0x12AE JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x44F JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x4C9 JUMPI PUSH2 0x4AA DUP6 PUSH1 0x7 PUSH1 0x0 DUP8 DUP8 DUP7 DUP2 DUP2 LT PUSH2 0x48C JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD PUSH2 0x9AE JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4B6 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x470 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x52B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x522 SWAP1 PUSH2 0x2201 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH21 0x10000000000000000000000000000000000000000 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x5A1 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP2 SWAP1 SSTORE PUSH2 0x679 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE DUP5 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND PUSH1 0x20 DUP1 DUP4 ADD SWAP2 DUP3 MSTORE PUSH1 0x1 DUP4 DUP6 ADD DUP2 DUP2 MSTORE DUP10 DUP8 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 SWAP1 SWAP5 MSTORE SWAP6 SWAP1 SWAP3 KECCAK256 SWAP4 MLOAD DUP5 SSTORE SWAP2 MLOAD SWAP3 DUP3 ADD DUP1 SLOAD SWAP2 MLOAD ISZERO ISZERO PUSH21 0x10000000000000000000000000000000000000000 MUL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 SWAP1 SWAP7 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 SWAP3 DUP4 AND OR SWAP4 SWAP1 SWAP4 AND SWAP5 SWAP1 SWAP5 OR SWAP1 SWAP2 SSTORE DUP4 SLOAD SWAP1 SWAP3 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x6 DUP1 SLOAD SWAP1 SWAP2 ADD SWAP1 SSTORE JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x6CE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x522 SWAP1 PUSH2 0x2201 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x7CC1F867 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x779 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x78D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x7D3 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1947 JUMP JUMPDEST SWAP1 POP PUSH1 0x2 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x7E4 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH3 0x320000 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x800 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH1 0x3 DUP2 MLOAD DUP2 LT PUSH2 0x831 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x0 SLOAD DUP2 PUSH1 0x4 DUP2 MLOAD DUP2 LT PUSH2 0x84C JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x3 SLOAD DUP2 PUSH1 0x8 DUP2 MLOAD DUP2 LT PUSH2 0x867 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x87F PUSH2 0x12E9 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH32 0xEE1F69EB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0xEE1F69EB SWAP1 PUSH2 0x8D5 SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x21B5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x901 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x947 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1A5C JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x20 ADD MLOAD PUSH5 0xFFFFFFFFFF AND PUSH1 0x0 EQ ISZERO PUSH2 0x95F JUMPI INVALID JUMPDEST PUSH2 0x968 DUP2 PUSH2 0xBA1 JUMP JUMPDEST PUSH2 0x99E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x522 SWAP1 PUSH2 0x22CC JUMP JUMPDEST PUSH2 0x9A9 DUP2 DUP5 DUP5 PUSH2 0xC96 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x9B6 PUSH2 0x12AE JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH32 0xC70BE14600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0xC70BE146 SWAP1 PUSH2 0xA0E SWAP1 DUP7 SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x207D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA26 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA3A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xA80 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1B40 JUMP JUMPDEST PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 SWAP3 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x80 DUP4 ADD MSTORE POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAAB DUP5 PUSH2 0xBA1 JUMP JUMPDEST PUSH2 0xAE1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x522 SWAP1 PUSH2 0x22CC JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH32 0xE8D261C900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0xE8D261C9 SWAP1 PUSH2 0xB3B SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x2303 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xB55 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xB69 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0xB8D SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x19DA JUMP JUMPDEST SWAP1 POP PUSH2 0xB9A DUP5 DUP3 DUP6 PUSH2 0xC96 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0xE0 DUP2 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD ISZERO DUP1 ISZERO PUSH2 0xBF0 JUMPI POP PUSH1 0x1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ ISZERO JUMPDEST ISZERO PUSH2 0xBFD JUMPI POP PUSH1 0x0 PUSH2 0x27C JUMP JUMPDEST PUSH7 0x2386F26FC10000 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH2 0xC53 DUP4 PUSH2 0x180 ADD MLOAD PUSH4 0xFFFFFFFF AND PUSH2 0xC47 DUP6 PUSH2 0x160 ADD MLOAD PUSH4 0xFFFFFFFF AND DUP7 PUSH2 0x120 ADD MLOAD PUSH4 0xFFFFFFFF AND PUSH2 0xFFF SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xFFF AND JUMP JUMPDEST GT ISZERO DUP1 ISZERO PUSH2 0xC81 JUMPI POP PUSH1 0x1 SLOAD PUSH2 0x140 DUP4 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ JUMPDEST ISZERO PUSH2 0xC8E JUMPI POP PUSH1 0x1 PUSH2 0x27C JUMP JUMPDEST POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCA1 DUP5 PUSH2 0x1047 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 SWAP2 POP PUSH14 0x100000000000000000000000000 SWAP1 DIV PUSH2 0xFFFF AND PUSH2 0xF2B JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE DUP5 DUP2 MSTORE PUSH2 0x120 DUP7 ADD MLOAD PUSH4 0xFFFFFFFF AND PUSH1 0x20 DUP1 DUP4 ADD SWAP2 DUP3 MSTORE PUSH5 0xFFFFFFFFFF TIMESTAMP DUP2 AND DUP5 DUP7 ADD SWAP1 DUP2 MSTORE PUSH2 0x258 PUSH1 0x60 DUP7 ADD SWAP1 DUP2 MSTORE PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x7 SWAP1 SWAP5 MSTORE SWAP6 SWAP1 SWAP3 KECCAK256 SWAP4 MLOAD DUP5 SSTORE SWAP2 MLOAD PUSH1 0x1 SWAP4 DUP5 ADD DUP1 SLOAD SWAP3 MLOAD SWAP6 MLOAD PUSH2 0xFFFF AND PUSH14 0x100000000000000000000000000 MUL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFFFFFFFFFFFF SWAP7 SWAP1 SWAP5 AND PUSH9 0x10000000000000000 MUL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000FFFFFFFFFFFFFFFF PUSH8 0xFFFFFFFFFFFFFFFF SWAP4 SWAP1 SWAP4 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP2 SWAP1 SWAP2 AND SWAP2 SWAP1 SWAP2 OR SWAP4 SWAP1 SWAP4 AND OR SWAP1 SWAP2 SSTORE SLOAD CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND EQ ISZERO PUSH2 0xE2B JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP4 ISZERO ISZERO OR SWAP1 SSTORE JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x80 ADD MLOAD PUSH1 0x8 MUL PUSH1 0xFF AND DUP6 PUSH2 0x100 ADD MLOAD PUSH1 0xFF AND PUSH1 0x1 SWAP1 SHL SWAP1 SHL SWAP1 POP DUP1 PUSH1 0x3 SLOAD AND PUSH1 0x0 EQ ISZERO PUSH2 0xE5F JUMPI PUSH1 0x3 DUP1 SLOAD DUP3 OR SWAP1 SSTORE JUMPDEST PUSH1 0x60 DUP6 ADD MLOAD PUSH1 0x0 SWAP1 PUSH1 0x4 AND ISZERO PUSH2 0xE7B JUMPI POP PUSH2 0x100 DUP6 ADD MLOAD PUSH2 0xE8B JUMP JUMPDEST PUSH2 0xE88 DUP7 PUSH1 0x20 ADD MLOAD PUSH2 0x1125 JUMP JUMPDEST SWAP1 POP JUMPDEST DUP6 PUSH1 0x80 ADD MLOAD PUSH1 0xFF AND DUP7 PUSH2 0x100 ADD MLOAD PUSH1 0xFF AND DUP3 PUSH1 0xFF AND PUSH1 0x8 PUSH2 0xEAE DUP6 PUSH1 0xFF AND PUSH2 0x11E6 JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF AND DUP11 PUSH1 0x20 ADD MLOAD PUSH5 0xFFFFFFFFFF AND DUP2 PUSH2 0xEC9 JUMPI INVALID JUMPDEST DIV PUSH6 0xFFFFFFFFFFFF AND SWAP1 SHL ADD PUSH6 0xFFFFFFFFFFFF AND PUSH32 0xC1B504E22197C95FE2A6E166FD15FCDA59F27AC6BBC947BC2A1C87D31E7EFCF9 DUP7 DUP11 PUSH1 0x20 ADD MLOAD PUSH2 0x258 DUP13 PUSH1 0x0 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0xF1C SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x21BE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP PUSH2 0xFF9 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x120 DUP6 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND PUSH4 0xFFFFFFFF SWAP1 SWAP2 AND GT DUP1 ISZERO PUSH2 0xFA5 JUMPI POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH14 0x100000000000000000000000000 DUP2 DIV PUSH2 0xFFFF AND PUSH9 0x10000000000000000 SWAP1 SWAP2 DIV PUSH5 0xFFFFFFFFFF SWAP1 DUP2 AND SWAP2 SWAP1 SWAP2 ADD AND TIMESTAMP GT ISZERO JUMPDEST ISZERO PUSH2 0xFF9 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP4 DUP2 SSTORE PUSH2 0x120 DUP6 ADD MLOAD PUSH1 0x1 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000 AND PUSH4 0xFFFFFFFF SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x103E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x522 SWAP1 PUSH2 0x2295 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 PUSH1 0x0 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1060 SWAP2 SWAP1 PUSH2 0x2061 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP4 PUSH1 0x20 ADD MLOAD DUP5 PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0x60 ADD MLOAD DUP7 PUSH1 0x80 ADD MLOAD DUP8 PUSH1 0xA0 ADD MLOAD DUP9 PUSH1 0xC0 ADD MLOAD DUP10 PUSH2 0x100 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x10B1 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1F5D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x60 DUP5 ADD MLOAD SWAP1 SWAP2 POP PUSH1 0x1 AND PUSH2 0x1117 JUMPI PUSH2 0x1C0 DUP4 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x1105 SWAP2 DUP4 SWAP2 PUSH1 0x20 ADD PUSH2 0x2018 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP JUMPDEST DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH2 0x1140 PUSH5 0xFFFFFFFFFF DUP6 AND TIMESTAMP PUSH4 0xFFFFFFFF PUSH2 0x1214 AND JUMP JUMPDEST SWAP1 POP PUSH4 0x3C26700 DUP2 LT PUSH2 0x117F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x522 SWAP1 PUSH2 0x225E JUMP JUMPDEST PUSH3 0x3B5380 DUP2 GT ISZERO PUSH2 0x1194 JUMPI PUSH1 0x1 JUMPDEST SWAP2 POP PUSH2 0x11DF JUMP JUMPDEST PUSH3 0xA8C00 DUP2 GT ISZERO PUSH2 0x11A6 JUMPI PUSH1 0x3 PUSH2 0x118D JUMP JUMPDEST PUSH3 0x1FA40 DUP2 GT ISZERO PUSH2 0x11B8 JUMPI PUSH1 0x4 PUSH2 0x118D JUMP JUMPDEST PUSH2 0x1C20 DUP2 GT ISZERO PUSH2 0x11C9 JUMPI PUSH1 0x5 PUSH2 0x118D JUMP JUMPDEST PUSH2 0x384 DUP2 GT ISZERO PUSH2 0x11DA JUMPI PUSH1 0x6 PUSH2 0x118D JUMP JUMPDEST PUSH1 0x7 SWAP2 POP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2A DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x24C5 PUSH1 0x2A SWAP2 CODECOPY PUSH1 0x1 DUP5 ADD PUSH1 0x6 MUL ADD MLOAD SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x103E DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1E DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 DUP2 MSTORE POP PUSH1 0x0 DUP2 DUP5 DUP5 GT ISZERO PUSH2 0x128F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x522 SWAP2 SWAP1 PUSH2 0x21EE JUMP JUMPDEST POP POP POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x12C1 PUSH2 0x12E9 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x12CE PUSH2 0x1367 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x60 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0x1E0 DUP2 ADD DUP3 MSTORE PUSH1 0x60 DUP1 DUP3 MSTORE PUSH1 0x0 PUSH1 0x20 DUP4 ADD DUP2 SWAP1 MSTORE SWAP3 DUP3 ADD DUP4 SWAP1 MSTORE DUP1 DUP3 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 DUP3 ADD DUP4 SWAP1 MSTORE PUSH1 0xA0 DUP3 ADD DUP4 SWAP1 MSTORE PUSH1 0xC0 DUP3 ADD DUP4 SWAP1 MSTORE PUSH1 0xE0 DUP3 ADD DUP4 SWAP1 MSTORE PUSH2 0x100 DUP3 ADD DUP4 SWAP1 MSTORE PUSH2 0x120 DUP3 ADD DUP4 SWAP1 MSTORE PUSH2 0x140 DUP3 ADD DUP4 SWAP1 MSTORE PUSH2 0x160 DUP3 ADD DUP4 SWAP1 MSTORE PUSH2 0x180 DUP3 ADD DUP4 SWAP1 MSTORE PUSH2 0x1A0 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH2 0x1C0 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x1041 DUP2 PUSH2 0x242E JUMP JUMPDEST DUP1 MLOAD PUSH2 0x1041 DUP2 PUSH2 0x242E JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x13AD JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x13C0 PUSH2 0x13BB DUP3 PUSH2 0x23A0 JUMP JUMPDEST PUSH2 0x2379 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x13E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x1409 JUMPI DUP2 CALLDATALOAD PUSH2 0x13F7 DUP2 PUSH2 0x2461 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x13E4 JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1424 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1432 PUSH2 0x13BB DUP3 PUSH2 0x23A0 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x1453 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x1409 JUMPI DUP2 MLOAD PUSH2 0x1469 DUP2 PUSH2 0x2461 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1456 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x1041 DUP2 PUSH2 0x2453 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x3 DUP2 LT PUSH2 0x1041 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x1041 DUP2 PUSH2 0x2470 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x1041 DUP2 PUSH2 0x2470 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x14BB JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x14C9 PUSH2 0x13BB DUP3 PUSH2 0x23C0 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x14E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1509 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1517 PUSH2 0x13BB DUP3 PUSH2 0x23C0 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x152E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x11DF DUP2 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x2402 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E0 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1552 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x155B DUP2 PUSH2 0x2379 JUMP JUMPDEST SWAP2 POP POP DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1576 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1582 DUP6 DUP4 DUP7 ADD PUSH2 0x14F9 JUMP JUMPDEST DUP4 MSTORE PUSH2 0x1591 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x187B JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x15A3 DUP6 PUSH1 0x40 DUP7 ADD PUSH2 0x184F JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x15B5 DUP6 PUSH1 0x60 DUP7 ADD PUSH2 0x1891 JUMP JUMPDEST PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x15C7 DUP6 PUSH1 0x80 DUP7 ADD PUSH2 0x1891 JUMP JUMPDEST PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x15D9 DUP6 PUSH1 0xA0 DUP7 ADD PUSH2 0x1891 JUMP JUMPDEST PUSH1 0xA0 DUP5 ADD MSTORE PUSH2 0x15EB DUP6 PUSH1 0xC0 DUP7 ADD PUSH2 0x14A0 JUMP JUMPDEST PUSH1 0xC0 DUP5 ADD MSTORE PUSH2 0x15FD DUP6 PUSH1 0xE0 DUP7 ADD PUSH2 0x1392 JUMP JUMPDEST PUSH1 0xE0 DUP5 ADD MSTORE PUSH2 0x100 SWAP2 POP PUSH2 0x1613 DUP6 DUP4 DUP7 ADD PUSH2 0x1891 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE PUSH2 0x120 SWAP2 POP PUSH2 0x1628 DUP6 DUP4 DUP7 ADD PUSH2 0x1865 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE PUSH2 0x140 SWAP2 POP PUSH2 0x163D DUP6 DUP4 DUP7 ADD PUSH2 0x1392 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE PUSH2 0x160 SWAP2 POP PUSH2 0x1652 DUP6 DUP4 DUP7 ADD PUSH2 0x1865 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE PUSH2 0x180 SWAP2 POP PUSH2 0x1667 DUP6 DUP4 DUP7 ADD PUSH2 0x1865 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE PUSH2 0x1A0 SWAP2 POP PUSH2 0x167C DUP6 DUP4 DUP7 ADD PUSH2 0x1392 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE PUSH2 0x1C0 SWAP2 POP DUP2 DUP5 ADD MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x1696 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x16A2 DUP7 DUP3 DUP8 ADD PUSH2 0x1414 JUMP JUMPDEST DUP4 DUP6 ADD MSTORE POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E0 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x16C2 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x16CB DUP2 PUSH2 0x2379 JUMP JUMPDEST SWAP2 POP POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x16E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x16F2 DUP6 DUP4 DUP7 ADD PUSH2 0x14AB JUMP JUMPDEST DUP4 MSTORE PUSH2 0x1701 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1870 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1713 DUP6 PUSH1 0x40 DUP7 ADD PUSH2 0x1844 JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x1725 DUP6 PUSH1 0x60 DUP7 ADD PUSH2 0x1886 JUMP JUMPDEST PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x1737 DUP6 PUSH1 0x80 DUP7 ADD PUSH2 0x1886 JUMP JUMPDEST PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x1749 DUP6 PUSH1 0xA0 DUP7 ADD PUSH2 0x1886 JUMP JUMPDEST PUSH1 0xA0 DUP5 ADD MSTORE PUSH2 0x175B DUP6 PUSH1 0xC0 DUP7 ADD PUSH2 0x1495 JUMP JUMPDEST PUSH1 0xC0 DUP5 ADD MSTORE PUSH2 0x176D DUP6 PUSH1 0xE0 DUP7 ADD PUSH2 0x1387 JUMP JUMPDEST PUSH1 0xE0 DUP5 ADD MSTORE PUSH2 0x100 SWAP2 POP PUSH2 0x1783 DUP6 DUP4 DUP7 ADD PUSH2 0x1886 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE PUSH2 0x120 SWAP2 POP PUSH2 0x1798 DUP6 DUP4 DUP7 ADD PUSH2 0x185A JUMP JUMPDEST DUP3 DUP5 ADD MSTORE PUSH2 0x140 SWAP2 POP PUSH2 0x17AD DUP6 DUP4 DUP7 ADD PUSH2 0x1387 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE PUSH2 0x160 SWAP2 POP PUSH2 0x17C2 DUP6 DUP4 DUP7 ADD PUSH2 0x185A JUMP JUMPDEST DUP3 DUP5 ADD MSTORE PUSH2 0x180 SWAP2 POP PUSH2 0x17D7 DUP6 DUP4 DUP7 ADD PUSH2 0x185A JUMP JUMPDEST DUP3 DUP5 ADD MSTORE PUSH2 0x1A0 SWAP2 POP PUSH2 0x17EC DUP6 DUP4 DUP7 ADD PUSH2 0x1387 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE PUSH2 0x1C0 SWAP2 POP DUP2 DUP5 ADD CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x1806 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x16A2 DUP7 DUP3 DUP8 ADD PUSH2 0x139D JUMP JUMPDEST DUP1 MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1041 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ PUSH2 0x1041 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x1041 DUP2 PUSH2 0x247F JUMP JUMPDEST DUP1 MLOAD PUSH2 0x1041 DUP2 PUSH2 0x247F JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x1041 DUP2 PUSH2 0x2490 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x1041 DUP2 PUSH2 0x2490 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x1041 DUP2 PUSH2 0x24A2 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x1041 DUP2 PUSH2 0x24A2 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x1041 DUP2 PUSH2 0x24B5 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x1041 DUP2 PUSH2 0x24B5 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x18B0 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x18BB DUP2 PUSH2 0x242E JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x18D7 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP7 ADD DUP8 PUSH1 0x1F DUP3 ADD SLT PUSH2 0x18E8 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP3 POP DUP2 DUP4 GT ISZERO PUSH2 0x18F8 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP8 PUSH1 0x20 DUP1 DUP6 MUL DUP4 ADD ADD GT ISZERO PUSH2 0x190B JUMPI DUP5 DUP6 REVERT JUMPDEST SWAP5 SWAP8 PUSH1 0x20 SWAP1 SWAP6 ADD SWAP7 POP SWAP1 SWAP5 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x192E JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1939 DUP2 PUSH2 0x242E JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1959 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x196F JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 DUP5 ADD DUP6 PUSH1 0x1F DUP3 ADD SLT PUSH2 0x1980 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP1 MLOAD SWAP2 POP PUSH2 0x1990 PUSH2 0x13BB DUP4 PUSH2 0x23A0 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP4 DUP2 ADD SWAP1 DUP3 DUP6 ADD DUP6 DUP6 MUL DUP5 ADD DUP7 ADD DUP10 LT ISZERO PUSH2 0x19AC JUMPI DUP7 DUP8 REVERT JUMPDEST DUP7 SWAP4 POP JUMPDEST DUP5 DUP5 LT ISZERO PUSH2 0x19CE JUMPI DUP1 MLOAD DUP4 MSTORE PUSH1 0x1 SWAP4 SWAP1 SWAP4 ADD SWAP3 SWAP2 DUP6 ADD SWAP2 DUP6 ADD PUSH2 0x19B0 JUMP JUMPDEST POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x19EB JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1A04 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x1A16 DUP2 PUSH2 0x2453 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1A32 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1A48 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1A54 DUP5 DUP3 DUP6 ADD PUSH2 0x16AF JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1A6D JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1A83 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1A54 DUP5 DUP3 DUP6 ADD PUSH2 0x153F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP6 SUB PUSH1 0xA0 DUP2 SLT ISZERO PUSH2 0x1AA4 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1ABA JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x1AC6 DUP8 DUP3 DUP9 ADD PUSH2 0x16AF JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x1AD7 DUP2 PUSH2 0x2453 JUMP JUMPDEST SWAP3 POP PUSH1 0x60 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0 DUP3 ADD SLT ISZERO PUSH2 0x1B08 JUMPI DUP2 DUP3 REVERT JUMPDEST POP PUSH2 0x1B13 PUSH1 0x60 PUSH2 0x2379 JUMP JUMPDEST PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x1B21 DUP2 PUSH2 0x24B5 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x80 SWAP1 SWAP5 ADD CALLDATALOAD PUSH1 0x40 DUP6 ADD MSTORE POP SWAP1 SWAP4 SWAP1 SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B51 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1B68 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP5 ADD DUP1 DUP7 SUB SWAP3 POP PUSH1 0xE0 DUP4 SLT ISZERO PUSH2 0x1B7D JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x1B87 PUSH1 0xA0 PUSH2 0x2379 JUMP JUMPDEST DUP2 MLOAD DUP4 DUP2 GT ISZERO PUSH2 0x1B95 JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH2 0x1BA1 DUP9 DUP3 DUP6 ADD PUSH2 0x153F JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x60 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP6 ADD SLT ISZERO PUSH2 0x1BD3 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x1BDD PUSH1 0x60 PUSH2 0x2379 JUMP JUMPDEST SWAP4 POP PUSH2 0x1BEC DUP8 PUSH1 0x20 DUP5 ADD PUSH2 0x1812 JUMP JUMPDEST DUP5 MSTORE PUSH2 0x1BFB DUP8 PUSH1 0x40 DUP5 ADD PUSH2 0x1832 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MSTORE PUSH2 0x1C0D DUP8 PUSH1 0x60 DUP5 ADD PUSH2 0x147B JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MSTORE DUP4 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x1C2F DUP8 PUSH1 0xA0 DUP5 ADD PUSH2 0x1486 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x1C41 DUP8 PUSH1 0xC0 DUP5 ADD PUSH2 0x147B JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C61 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x103E DUP2 PUSH2 0x24A2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C7D JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x103E DUP2 PUSH2 0x24B5 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1CD4 JUMPI DUP2 MLOAD PUSH1 0xF SIGNEXTEND DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1CB5 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1CD4 JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1CF2 JUMP JUMPDEST PUSH1 0x0 SIGNEXTEND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x1D2D DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x2402 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E0 DUP3 MLOAD DUP2 DUP6 MSTORE PUSH2 0x1D75 DUP3 DUP7 ADD DUP3 PUSH2 0x1D15 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD SWAP3 POP PUSH2 0x1D89 PUSH1 0x20 DUP8 ADD DUP5 PUSH2 0x1F4B JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MLOAD SWAP3 POP PUSH2 0x1D9D PUSH1 0x40 DUP8 ADD DUP5 PUSH2 0x1F38 JUMP JUMPDEST PUSH1 0x60 DUP6 ADD MLOAD SWAP3 POP PUSH2 0x1DB1 PUSH1 0x60 DUP8 ADD DUP5 PUSH2 0x1F56 JUMP JUMPDEST PUSH1 0x80 DUP6 ADD MLOAD SWAP3 POP PUSH2 0x1DC5 PUSH1 0x80 DUP8 ADD DUP5 PUSH2 0x1F56 JUMP JUMPDEST PUSH1 0xA0 DUP6 ADD MLOAD SWAP3 POP PUSH2 0x1DD9 PUSH1 0xA0 DUP8 ADD DUP5 PUSH2 0x1F56 JUMP JUMPDEST PUSH1 0xC0 DUP6 ADD MLOAD SWAP3 POP PUSH2 0x1DED PUSH1 0xC0 DUP8 ADD DUP5 PUSH2 0x1D0E JUMP JUMPDEST PUSH1 0xE0 DUP6 ADD MLOAD SWAP3 POP PUSH2 0x1E01 PUSH1 0xE0 DUP8 ADD DUP5 PUSH2 0x1C88 JUMP JUMPDEST PUSH2 0x100 SWAP3 POP DUP3 DUP6 ADD MLOAD SWAP2 POP PUSH2 0x1E18 DUP4 DUP8 ADD DUP4 PUSH2 0x1F56 JUMP JUMPDEST PUSH2 0x120 SWAP3 POP DUP3 DUP6 ADD MLOAD SWAP2 POP PUSH2 0x1E2F DUP4 DUP8 ADD DUP4 PUSH2 0x1F41 JUMP JUMPDEST PUSH2 0x140 SWAP3 POP DUP3 DUP6 ADD MLOAD SWAP2 POP PUSH2 0x1E46 DUP4 DUP8 ADD DUP4 PUSH2 0x1C88 JUMP JUMPDEST PUSH2 0x160 SWAP3 POP DUP3 DUP6 ADD MLOAD SWAP2 POP PUSH2 0x1E5D DUP4 DUP8 ADD DUP4 PUSH2 0x1F41 JUMP JUMPDEST PUSH2 0x180 SWAP3 POP DUP3 DUP6 ADD MLOAD SWAP2 POP PUSH2 0x1E74 DUP4 DUP8 ADD DUP4 PUSH2 0x1F41 JUMP JUMPDEST PUSH2 0x1A0 SWAP3 POP DUP3 DUP6 ADD MLOAD SWAP2 POP PUSH2 0x1E8B DUP4 DUP8 ADD DUP4 PUSH2 0x1C88 JUMP JUMPDEST PUSH2 0x1C0 SWAP3 POP DUP3 DUP6 ADD MLOAD SWAP2 POP DUP6 DUP2 SUB DUP4 DUP8 ADD MSTORE PUSH2 0x1EA7 DUP2 DUP4 PUSH2 0x1CA2 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0xE0 DUP5 MSTORE PUSH2 0x1EC6 PUSH1 0xE0 DUP6 ADD DUP3 PUSH2 0x1D5F JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP2 POP PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 MLOAD AND PUSH1 0x20 DUP7 ADD MSTORE PUSH2 0xFFFF PUSH1 0x20 DUP4 ADD MLOAD AND PUSH1 0x40 DUP7 ADD MSTORE PUSH1 0x40 DUP3 ADD MLOAD ISZERO ISZERO PUSH1 0x60 DUP7 ADD MSTORE PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x80 DUP7 ADD MSTORE PUSH1 0x60 DUP5 ADD MLOAD SWAP2 POP PUSH1 0x3 DUP3 LT PUSH2 0x1F1B JUMPI INVALID JUMPDEST DUP2 PUSH1 0xA0 DUP7 ADD MSTORE PUSH1 0x80 DUP5 ADD MLOAD ISZERO ISZERO PUSH1 0xC0 DUP7 ADD MSTORE DUP1 SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH3 0xFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH4 0xFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH5 0xFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0xFF AND SWAP1 MSTORE JUMP JUMPDEST SWAP8 DUP9 MSTORE PUSH1 0xD8 SWAP7 SWAP1 SWAP7 SHL PUSH32 0xFFFFFFFFFF000000000000000000000000000000000000000000000000000000 AND PUSH1 0x20 DUP9 ADD MSTORE PUSH1 0xE8 SWAP5 SWAP1 SWAP5 SHL PUSH32 0xFFFFFF0000000000000000000000000000000000000000000000000000000000 AND PUSH1 0x25 DUP8 ADD MSTORE PUSH1 0xF8 SWAP3 DUP4 SHL PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 SWAP1 DUP2 AND PUSH1 0x28 DUP9 ADD MSTORE SWAP2 DUP4 SHL DUP3 AND PUSH1 0x29 DUP8 ADD MSTORE DUP3 SHL DUP2 AND PUSH1 0x2A DUP7 ADD MSTORE PUSH1 0x0 SWAP3 SWAP1 SWAP3 SIGNEXTEND DUP2 SHL PUSH1 0x2B DUP6 ADD MSTORE SWAP2 SWAP1 SWAP2 SHL AND PUSH1 0x2C DUP3 ADD MSTORE PUSH1 0x2D ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH1 0x20 PUSH2 0x202B DUP3 DUP6 DUP4 DUP10 ADD PUSH2 0x2402 JUMP JUMPDEST DUP5 MLOAD SWAP2 DUP5 ADD DUP2 DUP7 ADD DUP5 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x2054 JUMPI DUP2 MLOAD PUSH1 0xF SIGNEXTEND DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 SWAP1 DUP4 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2035 JUMP JUMPDEST POP SWAP1 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x2073 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x2402 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 DUP7 ADD SWAP2 POP PUSH1 0x40 DUP5 DUP3 MUL DUP8 ADD ADD SWAP3 POP DUP4 DUP8 ADD DUP6 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x2114 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0 DUP9 DUP7 SUB ADD DUP5 MSTORE PUSH2 0x2102 DUP6 DUP4 MLOAD PUSH2 0x1EB1 JUMP JUMPDEST SWAP5 POP SWAP3 DUP6 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x20C8 JUMP JUMPDEST POP SWAP3 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x103E PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1CDF JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP1 DUP4 MSTORE PUSH2 0x2147 DUP2 DUP5 ADD DUP7 PUSH2 0x1CDF JUMP JUMPDEST DUP4 DUP2 SUB PUSH1 0x20 DUP6 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP6 MLOAD DUP1 DUP4 MSTORE DUP7 DUP3 ADD SWAP3 DUP3 ADD SWAP1 DUP6 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x219C JUMPI DUP5 MLOAD DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 MSTORE DUP5 ADD MLOAD DUP5 DUP5 ADD MSTORE SWAP4 DUP4 ADD SWAP4 SWAP2 DUP6 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x2161 JUMP JUMPDEST POP SWAP1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP3 MSTORE PUSH5 0xFFFFFFFFFF DUP6 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0xFFFF DUP5 AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x1EA7 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x1D15 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x103E PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1D15 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x22 SWAP1 DUP3 ADD MSTORE PUSH32 0x4F6E6C79206F776E65722063616E2063616C6C20746869732066756E6374696F PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6E2E000000000000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x15 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F6F2066617220696E20746865206675747572650000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1B SWAP1 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x15 SWAP1 DUP3 ADD MSTORE PUSH32 0x7265676973746572206E6F7420706F737369626C650000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 MSTORE PUSH2 0x2316 PUSH1 0xA0 DUP4 ADD DUP7 PUSH2 0x1D5F JUMP JUMPDEST SWAP1 POP DUP4 ISZERO ISZERO PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0xFF DUP4 MLOAD AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x80 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x103E PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1EB1 JUMP JUMPDEST PUSH5 0xFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0xFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x2398 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x23B6 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x23D6 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x241D JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2405 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xFF9 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x2450 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x2450 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0xF SIGNEXTEND DUP2 EQ PUSH2 0x2450 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x0 SIGNEXTEND DUP2 EQ PUSH2 0x2450 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0xFFFFFF DUP2 AND DUP2 EQ PUSH2 0x2450 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x2450 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH5 0xFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x2450 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x2450 JUMPI PUSH1 0x0 DUP1 REVERT INVALID STOP STOP STOP STOP STOP STOP STOP STOP STOP STATICCALL PUSH30 0x3B53800000000A8C0000000001FA40000000001C200000000000 STOP LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG1 SWAP11 BYTE LT 0xEF 0x28 DUP1 SWAP7 SWAP3 0xB4 0xD3 0xB6 0x26 0xDF 0xB2 0xC0 DUP4 0x4E 0xF8 0x2B EXTCODESIZE 0xBF 0xCB SMOD SAR SWAP7 MOD PUSH31 0xB15EA97564736F6C6343000603003300000000000000000000000000000000 ",
				"sourceMap": "1769:12546:2:-:0;;;3085:1;3047:39;;3965:163;5:9:-1;2:2;;;27:1;24;17:12;2:2;3965:163:2;;;;;;;;;;;;;;;;;;;;;4032:5;:18;;4040:10;-1:-1:-1;;;;;;4032:18:2;;;;;;;4074:12;-1:-1:-1;4060:26:2;4096:18;:25;;;;;-1:-1:-1;;;;;4096:25:2;;;;;;;;;;1769:12546;;200:317:-1;;342:2;330:9;321:7;317:23;313:32;310:2;;;-1:-1;;348:12;310:2;110:13;;-1:-1;;;;;809:54;;961:62;;951:2;;-1:-1;;1027:12;951:2;400:101;304:213;-1:-1;;;304:213;;1769:12546:2;;;;;;"
			},
			"deployedBytecode": {
				"linkReferences": {},
				"object": "0x608060405234801561001057600080fd5b50600436106100be5760003560e01c80637cc1f86711610076578063c70be1461161005b578063c70be14614610172578063e8d261c914610192578063ed1d26d7146101b2576100be565b80637cc1f8671461014a5780638677e7b91461015f576100be565b806352d02688116100a757806352d026881461010257806365e47b8c14610122578063711c2b9414610137576100be565b8063095200ce146100c35780630f8f8244146100ec575b600080fd5b6100d66100d1366004611c50565b6101d2565b6040516100e3919061236b565b60405180910390f35b6100f4610281565b6040516100e3929190612134565b61011561011036600461189c565b61042e565b6040516100e391906120a3565b61013561013036600461191c565b6104d1565b005b6101356101453660046119f2565b61067d565b61015261070c565b6040516100e39190612121565b61013561016d3660046119f2565b610877565b61018561018036600461191c565b6109ae565b6040516100e39190612346565b6101a56101a0366004611a8f565b610aa0565b6040516100e391906121b5565b6101c56101c0366004611a21565b610ba1565b6040516100e391906121aa565b6002546040517f095200ce00000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff169063095200ce90610229908590600401612359565b60206040518083038186803b15801561024157600080fd5b505afa158015610255573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506102799190810190611c6c565b90505b919050565b60408051600480825260a082019092526060918291906020820160808036833701905050915062320000826000815181106102b857fe5b60209081029190910101526001805473ffffffffffffffffffffffffffffffffffffffff16908390815181106102ea57fe5b6020908102919091010152662386f26fc100008260028151811061030a57fe5b60209081029190910101526102588260038151811061032557fe5b602002602001018181525050600060065490508060405190808252806020026020018201604052801561037257816020015b61035f611297565b8152602001906001900390816103575790505b5060045490925073ffffffffffffffffffffffffffffffffffffffff1660005b828110156104275760408051808201825273ffffffffffffffffffffffffffffffffffffffff8416808252600090815260056020908152929020549181019190915284518590839081106103e257fe5b60209081029190910181019190915273ffffffffffffffffffffffffffffffffffffffff92831660009081526005909152604090206001908101549092169101610392565b5050509091565b60408051828152602080840282010190915260609082801561046a57816020015b6104576112ae565b81526020019060019003908161044f5790505b50905060005b828110156104c9576104aa856007600087878681811061048c57fe5b905060200201358152602001908152602001600020600001546109ae565b8282815181106104b657fe5b6020908102919091010152600101610470565b509392505050565b60015473ffffffffffffffffffffffffffffffffffffffff16331461052b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052290612201565b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff821660009081526005602052604090206001015474010000000000000000000000000000000000000000900460ff16156105a15773ffffffffffffffffffffffffffffffffffffffff82166000908152600560205260409020819055610679565b600480546040805160608101825284815273ffffffffffffffffffffffffffffffffffffffff92831660208083019182526001838501818152898716600081815260059094529590922093518455915192820180549151151574010000000000000000000000000000000000000000027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff949096167fffffffffffffffffffffffff00000000000000000000000000000000000000009283161793909316949094179091558354909216179091556006805490910190555b5050565b60015473ffffffffffffffffffffffffffffffffffffffff1633146106ce576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052290612201565b60009182526008602052604090912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b606080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637cc1f8676040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561077957600080fd5b505af115801561078d573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526107d39190810190611947565b90506002816000815181106107e457fe5b6020908102919091010152623200008160018151811061080057fe5b602090810291909101015260025473ffffffffffffffffffffffffffffffffffffffff168160038151811061083157fe5b60209081029190910101526000548160048151811061084c57fe5b60209081029190910101526003548160088151811061086757fe5b6020908102919091010152905090565b61087f6112e9565b6002546040517fee1f69eb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063ee1f69eb906108d59086906004016121b5565b60006040518083038186803b1580156108ed57600080fd5b505afa158015610901573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526109479190810190611a5c565b9050806020015164ffffffffff166000141561095f57fe5b61096881610ba1565b61099e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610522906122cc565b6109a9818484610c96565b505050565b6109b66112ae565b6002546040517fc70be14600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063c70be14690610a0e908690869060040161207d565b60006040518083038186803b158015610a2657600080fd5b505afa158015610a3a573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610a809190810190611b40565b6000928352600860205260409092205460ff161515608083015250919050565b6000610aab84610ba1565b610ae1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610522906122cc565b6002546040517fe8d261c900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063e8d261c990610b3b90879087908790600401612303565b602060405180830381600087803b158015610b5557600080fd5b505af1158015610b69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610b8d91908101906119da565b9050610b9a848285610c96565b9392505050565b60e081015173ffffffffffffffffffffffffffffffffffffffff16600090815260056020526040812054158015610bf0575060015473ffffffffffffffffffffffffffffffffffffffff163314155b15610bfd5750600061027c565b662386f26fc1000067ffffffffffffffff16610c5383610180015163ffffffff16610c4785610160015163ffffffff1686610120015163ffffffff16610fff90919063ffffffff16565b9063ffffffff610fff16565b11158015610c81575060015461014083015173ffffffffffffffffffffffffffffffffffffffff9081169116145b15610c8e5750600161027c565b506000919050565b6000610ca184611047565b6000818152600760205260409020600101549091506d0100000000000000000000000000900461ffff16610f2b576040805160808101825284815261012086015163ffffffff16602080830191825264ffffffffff428116848601908152610258606086019081526000888152600790945295909220935184559151600193840180549251955161ffff166d0100000000000000000000000000027fffffffffffffffffffffffffffffffffff0000ffffffffffffffffffffffffff9690941668010000000000000000027fffffffffffffffffffffffffffffffffffffff0000000000ffffffffffffffff67ffffffffffffffff939093167fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000009094169390931791909116919091179390931617909155543373ffffffffffffffffffffffffffffffffffffffff9091161415610e2b57600083815260086020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168315151790555b6000846080015160080260ff1685610100015160ff166001901b901b9050806003541660001415610e5f5760038054821790555b606085015160009060041615610e7b5750610100850151610e8b565b610e888660200151611125565b90505b856080015160ff1686610100015160ff168260ff166008610eae8560ff166111e6565b65ffffffffffff168a6020015164ffffffffff1681610ec957fe5b0465ffffffffffff16901b0165ffffffffffff167fc1b504e22197c95fe2a6e166fd15fcda59f27ac6bbc947bc2a1c87d31e7efcf9868a602001516102588c60000151604051610f1c94939291906121be565b60405180910390a45050610ff9565b60008181526007602052604090206001015461012085015167ffffffffffffffff90911663ffffffff909116118015610fa557506000818152600760205260409020600101546d0100000000000000000000000000810461ffff166801000000000000000090910464ffffffffff90811691909101164211155b15610ff9576000818152600760205260409020838155610120850151600190910180547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001663ffffffff9092169190911790555b50505050565b60008282018381101561103e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052290612295565b90505b92915050565b6000606082600001516040516020016110609190612061565b6040516020818303038152906040528051906020012083602001518460400151856060015186608001518760a001518860c001518961010001516040516020016110b1989796959493929190611f5d565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00181529190526060840151909150600116611117576101c0830151604051611105918391602001612018565b60405160208183030381529060405290505b805160209091012092915050565b6000808061114064ffffffffff85164263ffffffff61121416565b90506303c26700811061117f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105229061225e565b623b53808111156111945760015b91506111df565b620a8c008111156111a657600361118d565b6201fa408111156111b857600461118d565b611c208111156111c957600561118d565b6103848111156111da57600661118d565b600791505b5092915050565b600060606040518060600160405280602a81526020016124c5602a9139600184016006020151915050919050565b600061103e83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506000818484111561128f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052291906121ee565b505050900390565b604080518082019091526000808252602082015290565b6040518060a001604052806112c16112e9565b81526020016112ce611367565b81526000602082018190526040820181905260609091015290565b604080516101e08101825260608082526000602083018190529282018390528082018390526080820183905260a0820183905260c0820183905260e08201839052610100820183905261012082018390526101408201839052610160820183905261018082018390526101a08201929092526101c081019190915290565b604080516060810182526000808252602082018190529181019190915290565b80356110418161242e565b80516110418161242e565b600082601f8301126113ad578081fd5b81356113c06113bb826123a0565b612379565b8181529150602080830190848101818402860182018710156113e157600080fd5b60005b848110156114095781356113f781612461565b845292820192908201906001016113e4565b505050505092915050565b600082601f830112611424578081fd5b81516114326113bb826123a0565b81815291506020808301908481018184028601820187101561145357600080fd5b60005b8481101561140957815161146981612461565b84529282019290820190600101611456565b805161104181612453565b80516003811061104157600080fd5b803561104181612470565b805161104181612470565b600082601f8301126114bb578081fd5b81356114c96113bb826123c0565b91508082528360208285010111156114e057600080fd5b8060208401602084013760009082016020015292915050565b600082601f830112611509578081fd5b81516115176113bb826123c0565b915080825283602082850101111561152e57600080fd5b6111df816020840160208601612402565b60006101e0808385031215611552578182fd5b61155b81612379565b915050815167ffffffffffffffff8082111561157657600080fd5b611582858386016114f9565b8352611591856020860161187b565b60208401526115a3856040860161184f565b60408401526115b58560608601611891565b60608401526115c78560808601611891565b60808401526115d98560a08601611891565b60a08401526115eb8560c086016114a0565b60c08401526115fd8560e08601611392565b60e0840152610100915061161385838601611891565b82840152610120915061162885838601611865565b82840152610140915061163d85838601611392565b82840152610160915061165285838601611865565b82840152610180915061166785838601611865565b828401526101a0915061167c85838601611392565b828401526101c09150818401518181111561169657600080fd5b6116a286828701611414565b8385015250505092915050565b60006101e08083850312156116c2578182fd5b6116cb81612379565b915050813567ffffffffffffffff808211156116e657600080fd5b6116f2858386016114ab565b83526117018560208601611870565b60208401526117138560408601611844565b60408401526117258560608601611886565b60608401526117378560808601611886565b60808401526117498560a08601611886565b60a084015261175b8560c08601611495565b60c084015261176d8560e08601611387565b60e0840152610100915061178385838601611886565b8284015261012091506117988583860161185a565b8284015261014091506117ad85838601611387565b8284015261016091506117c28583860161185a565b8284015261018091506117d78583860161185a565b828401526101a091506117ec85838601611387565b828401526101c09150818401358181111561180657600080fd5b6116a28682870161139d565b80516fffffffffffffffffffffffffffffffff8116811461104157600080fd5b805161ffff8116811461104157600080fd5b80356110418161247f565b80516110418161247f565b803561104181612490565b805161104181612490565b8035611041816124a2565b8051611041816124a2565b8035611041816124b5565b8051611041816124b5565b6000806000604084860312156118b0578283fd5b83356118bb8161242e565b9250602084013567ffffffffffffffff808211156118d7578384fd5b81860187601f8201126118e8578485fd5b80359250818311156118f8578485fd5b876020808502830101111561190b578485fd5b949760209095019650909450505050565b6000806040838503121561192e578182fd5b82356119398161242e565b946020939093013593505050565b60006020808385031215611959578182fd5b825167ffffffffffffffff81111561196f578283fd5b80840185601f820112611980578384fd5b805191506119906113bb836123a0565b82815283810190828501858502840186018910156119ac578687fd5b8693505b848410156119ce5780518352600193909301929185019185016119b0565b50979650505050505050565b6000602082840312156119eb578081fd5b5051919050565b60008060408385031215611a04578182fd5b823591506020830135611a1681612453565b809150509250929050565b600060208284031215611a32578081fd5b813567ffffffffffffffff811115611a48578182fd5b611a54848285016116af565b949350505050565b600060208284031215611a6d578081fd5b815167ffffffffffffffff811115611a83578182fd5b611a548482850161153f565b600080600083850360a0811215611aa4578182fd5b843567ffffffffffffffff811115611aba578283fd5b611ac6878288016116af565b9450506020850135611ad781612453565b925060607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc082011215611b08578182fd5b50611b136060612379565b6040850135611b21816124b5565b8152606085013560208201526080909401356040850152509093909250565b600060208284031215611b51578081fd5b815167ffffffffffffffff80821115611b68578283fd5b818401808603925060e0831215611b7d578384fd5b611b8760a0612379565b815183811115611b95578586fd5b611ba18882850161153f565b82525060607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe085011215611bd3578485fd5b611bdd6060612379565b9350611bec8760208401611812565b8452611bfb8760408401611832565b6020850152611c0d876060840161147b565b604085015283602082015260808201516040820152611c2f8760a08401611486565b6060820152611c418760c0840161147b565b60808201529695505050505050565b600060208284031215611c61578081fd5b813561103e816124a2565b600060208284031215611c7d578081fd5b815161103e816124b5565b73ffffffffffffffffffffffffffffffffffffffff169052565b6000815180845260208085019450808401835b83811015611cd4578151600f0b87529582019590820190600101611cb5565b509495945050505050565b6000815180845260208085019450808401835b83811015611cd457815187529582019590820190600101611cf2565b60000b9052565b60008151808452611d2d816020860160208601612402565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60006101e08251818552611d7582860182611d15565b60208501519250611d896020870184611f4b565b60408501519250611d9d6040870184611f38565b60608501519250611db16060870184611f56565b60808501519250611dc56080870184611f56565b60a08501519250611dd960a0870184611f56565b60c08501519250611ded60c0870184611d0e565b60e08501519250611e0160e0870184611c88565b6101009250828501519150611e1883870183611f56565b6101209250828501519150611e2f83870183611f41565b6101409250828501519150611e4683870183611c88565b6101609250828501519150611e5d83870183611f41565b6101809250828501519150611e7483870183611f41565b6101a09250828501519150611e8b83870183611c88565b6101c0925082850151915085810383870152611ea78183611ca2565b9695505050505050565b6000815160e08452611ec660e0850182611d5f565b602084015191506fffffffffffffffffffffffffffffffff825116602086015261ffff6020830151166040860152604082015115156060860152604084015160808601526060840151915060038210611f1b57fe5b8160a08601526080840151151560c0860152809250505092915050565b62ffffff169052565b63ffffffff169052565b64ffffffffff169052565b60ff169052565b97885260d89690961b7fffffffffff00000000000000000000000000000000000000000000000000000016602088015260e89490941b7fffffff000000000000000000000000000000000000000000000000000000000016602587015260f892831b7fff00000000000000000000000000000000000000000000000000000000000000908116602888015291831b82166029870152821b8116602a86015260009290920b811b602b8501529190911b16602c820152602d0190565b60008351602061202b8285838901612402565b8451918401818601845b84811015612054578151600f0b83529183019190830190600101612035565b5090979650505050505050565b60008251612073818460208701612402565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b6000602080830181845280855180835260408601915060408482028701019250838701855b82811015612114577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452612102858351611eb1565b945092850192908501906001016120c8565b5092979650505050505050565b60006020825261103e6020830184611cdf565b6000604080835261214781840186611cdf565b838103602085810191909152855180835286820192820190855b8181101561219c578451805173ffffffffffffffffffffffffffffffffffffffff168452840151848401529383019391850191600101612161565b509098975050505050505050565b901515815260200190565b90815260200190565b600085825264ffffffffff8516602083015261ffff8416604083015260806060830152611ea76080830184611d15565b60006020825261103e6020830184611d15565b60208082526022908201527f4f6e6c79206f776e65722063616e2063616c6c20746869732066756e6374696f60408201527f6e2e000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526015908201527f746f6f2066617220696e20746865206675747572650000000000000000000000604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526015908201527f7265676973746572206e6f7420706f737369626c650000000000000000000000604082015260600190565b600060a0825261231660a0830186611d5f565b9050831515602083015260ff83511660408301526020830151606083015260408301516080830152949350505050565b60006020825261103e6020830184611eb1565b64ffffffffff91909116815260200190565b60ff91909116815260200190565b60405181810167ffffffffffffffff8111828210171561239857600080fd5b604052919050565b600067ffffffffffffffff8211156123b6578081fd5b5060209081020190565b600067ffffffffffffffff8211156123d6578081fd5b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60005b8381101561241d578181015183820152602001612405565b83811115610ff95750506000910152565b73ffffffffffffffffffffffffffffffffffffffff8116811461245057600080fd5b50565b801515811461245057600080fd5b80600f0b811461245057600080fd5b8060000b811461245057600080fd5b62ffffff8116811461245057600080fd5b63ffffffff8116811461245057600080fd5b64ffffffffff8116811461245057600080fd5b60ff8116811461245057600080fdfe000000000000000000fa7d000000003b53800000000a8c0000000001fa40000000001c20000000000000a2646970667358221220a19a1a10ef28809692b4d3b626dfb2c0834ef82b3bbfcb071d96067eb15ea97564736f6c63430006030033",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xBE JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7CC1F867 GT PUSH2 0x76 JUMPI DUP1 PUSH4 0xC70BE146 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xC70BE146 EQ PUSH2 0x172 JUMPI DUP1 PUSH4 0xE8D261C9 EQ PUSH2 0x192 JUMPI DUP1 PUSH4 0xED1D26D7 EQ PUSH2 0x1B2 JUMPI PUSH2 0xBE JUMP JUMPDEST DUP1 PUSH4 0x7CC1F867 EQ PUSH2 0x14A JUMPI DUP1 PUSH4 0x8677E7B9 EQ PUSH2 0x15F JUMPI PUSH2 0xBE JUMP JUMPDEST DUP1 PUSH4 0x52D02688 GT PUSH2 0xA7 JUMPI DUP1 PUSH4 0x52D02688 EQ PUSH2 0x102 JUMPI DUP1 PUSH4 0x65E47B8C EQ PUSH2 0x122 JUMPI DUP1 PUSH4 0x711C2B94 EQ PUSH2 0x137 JUMPI PUSH2 0xBE JUMP JUMPDEST DUP1 PUSH4 0x95200CE EQ PUSH2 0xC3 JUMPI DUP1 PUSH4 0xF8F8244 EQ PUSH2 0xEC JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD6 PUSH2 0xD1 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C50 JUMP JUMPDEST PUSH2 0x1D2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0x236B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xF4 PUSH2 0x281 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP3 SWAP2 SWAP1 PUSH2 0x2134 JUMP JUMPDEST PUSH2 0x115 PUSH2 0x110 CALLDATASIZE PUSH1 0x4 PUSH2 0x189C JUMP JUMPDEST PUSH2 0x42E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0x20A3 JUMP JUMPDEST PUSH2 0x135 PUSH2 0x130 CALLDATASIZE PUSH1 0x4 PUSH2 0x191C JUMP JUMPDEST PUSH2 0x4D1 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x135 PUSH2 0x145 CALLDATASIZE PUSH1 0x4 PUSH2 0x19F2 JUMP JUMPDEST PUSH2 0x67D JUMP JUMPDEST PUSH2 0x152 PUSH2 0x70C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0x2121 JUMP JUMPDEST PUSH2 0x135 PUSH2 0x16D CALLDATASIZE PUSH1 0x4 PUSH2 0x19F2 JUMP JUMPDEST PUSH2 0x877 JUMP JUMPDEST PUSH2 0x185 PUSH2 0x180 CALLDATASIZE PUSH1 0x4 PUSH2 0x191C JUMP JUMPDEST PUSH2 0x9AE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0x2346 JUMP JUMPDEST PUSH2 0x1A5 PUSH2 0x1A0 CALLDATASIZE PUSH1 0x4 PUSH2 0x1A8F JUMP JUMPDEST PUSH2 0xAA0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0x21B5 JUMP JUMPDEST PUSH2 0x1C5 PUSH2 0x1C0 CALLDATASIZE PUSH1 0x4 PUSH2 0x1A21 JUMP JUMPDEST PUSH2 0xBA1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0x21AA JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH32 0x95200CE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x95200CE SWAP1 PUSH2 0x229 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x2359 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x241 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x255 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x279 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1C6C JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x4 DUP1 DUP3 MSTORE PUSH1 0xA0 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 DUP3 SWAP2 SWAP1 PUSH1 0x20 DUP3 ADD PUSH1 0x80 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP2 POP PUSH3 0x320000 DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x2B8 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP4 SWAP1 DUP2 MLOAD DUP2 LT PUSH2 0x2EA JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH7 0x2386F26FC10000 DUP3 PUSH1 0x2 DUP2 MLOAD DUP2 LT PUSH2 0x30A JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH2 0x258 DUP3 PUSH1 0x3 DUP2 MLOAD DUP2 LT PUSH2 0x325 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH1 0x0 PUSH1 0x6 SLOAD SWAP1 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x372 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x35F PUSH2 0x1297 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x357 JUMPI SWAP1 POP JUMPDEST POP PUSH1 0x4 SLOAD SWAP1 SWAP3 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x427 JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND DUP1 DUP3 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE SWAP3 SWAP1 KECCAK256 SLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP5 MLOAD DUP6 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0x3E2 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 SWAP1 DUP2 ADD SLOAD SWAP1 SWAP3 AND SWAP2 ADD PUSH2 0x392 JUMP JUMPDEST POP POP POP SWAP1 SWAP2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 SWAP1 DUP3 DUP1 ISZERO PUSH2 0x46A JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x457 PUSH2 0x12AE JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x44F JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x4C9 JUMPI PUSH2 0x4AA DUP6 PUSH1 0x7 PUSH1 0x0 DUP8 DUP8 DUP7 DUP2 DUP2 LT PUSH2 0x48C JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD PUSH2 0x9AE JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4B6 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x470 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x52B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x522 SWAP1 PUSH2 0x2201 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH21 0x10000000000000000000000000000000000000000 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x5A1 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP2 SWAP1 SSTORE PUSH2 0x679 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE DUP5 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND PUSH1 0x20 DUP1 DUP4 ADD SWAP2 DUP3 MSTORE PUSH1 0x1 DUP4 DUP6 ADD DUP2 DUP2 MSTORE DUP10 DUP8 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 SWAP1 SWAP5 MSTORE SWAP6 SWAP1 SWAP3 KECCAK256 SWAP4 MLOAD DUP5 SSTORE SWAP2 MLOAD SWAP3 DUP3 ADD DUP1 SLOAD SWAP2 MLOAD ISZERO ISZERO PUSH21 0x10000000000000000000000000000000000000000 MUL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 SWAP1 SWAP7 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 SWAP3 DUP4 AND OR SWAP4 SWAP1 SWAP4 AND SWAP5 SWAP1 SWAP5 OR SWAP1 SWAP2 SSTORE DUP4 SLOAD SWAP1 SWAP3 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x6 DUP1 SLOAD SWAP1 SWAP2 ADD SWAP1 SSTORE JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x6CE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x522 SWAP1 PUSH2 0x2201 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x7CC1F867 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x779 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x78D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x7D3 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1947 JUMP JUMPDEST SWAP1 POP PUSH1 0x2 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x7E4 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH3 0x320000 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x800 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH1 0x3 DUP2 MLOAD DUP2 LT PUSH2 0x831 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x0 SLOAD DUP2 PUSH1 0x4 DUP2 MLOAD DUP2 LT PUSH2 0x84C JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x3 SLOAD DUP2 PUSH1 0x8 DUP2 MLOAD DUP2 LT PUSH2 0x867 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x87F PUSH2 0x12E9 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH32 0xEE1F69EB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0xEE1F69EB SWAP1 PUSH2 0x8D5 SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x21B5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x901 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x947 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1A5C JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x20 ADD MLOAD PUSH5 0xFFFFFFFFFF AND PUSH1 0x0 EQ ISZERO PUSH2 0x95F JUMPI INVALID JUMPDEST PUSH2 0x968 DUP2 PUSH2 0xBA1 JUMP JUMPDEST PUSH2 0x99E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x522 SWAP1 PUSH2 0x22CC JUMP JUMPDEST PUSH2 0x9A9 DUP2 DUP5 DUP5 PUSH2 0xC96 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x9B6 PUSH2 0x12AE JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH32 0xC70BE14600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0xC70BE146 SWAP1 PUSH2 0xA0E SWAP1 DUP7 SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x207D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA26 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA3A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xA80 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1B40 JUMP JUMPDEST PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 SWAP3 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x80 DUP4 ADD MSTORE POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAAB DUP5 PUSH2 0xBA1 JUMP JUMPDEST PUSH2 0xAE1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x522 SWAP1 PUSH2 0x22CC JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH32 0xE8D261C900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0xE8D261C9 SWAP1 PUSH2 0xB3B SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x2303 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xB55 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xB69 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0xB8D SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x19DA JUMP JUMPDEST SWAP1 POP PUSH2 0xB9A DUP5 DUP3 DUP6 PUSH2 0xC96 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0xE0 DUP2 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD ISZERO DUP1 ISZERO PUSH2 0xBF0 JUMPI POP PUSH1 0x1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ ISZERO JUMPDEST ISZERO PUSH2 0xBFD JUMPI POP PUSH1 0x0 PUSH2 0x27C JUMP JUMPDEST PUSH7 0x2386F26FC10000 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH2 0xC53 DUP4 PUSH2 0x180 ADD MLOAD PUSH4 0xFFFFFFFF AND PUSH2 0xC47 DUP6 PUSH2 0x160 ADD MLOAD PUSH4 0xFFFFFFFF AND DUP7 PUSH2 0x120 ADD MLOAD PUSH4 0xFFFFFFFF AND PUSH2 0xFFF SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xFFF AND JUMP JUMPDEST GT ISZERO DUP1 ISZERO PUSH2 0xC81 JUMPI POP PUSH1 0x1 SLOAD PUSH2 0x140 DUP4 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ JUMPDEST ISZERO PUSH2 0xC8E JUMPI POP PUSH1 0x1 PUSH2 0x27C JUMP JUMPDEST POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCA1 DUP5 PUSH2 0x1047 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 SWAP2 POP PUSH14 0x100000000000000000000000000 SWAP1 DIV PUSH2 0xFFFF AND PUSH2 0xF2B JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE DUP5 DUP2 MSTORE PUSH2 0x120 DUP7 ADD MLOAD PUSH4 0xFFFFFFFF AND PUSH1 0x20 DUP1 DUP4 ADD SWAP2 DUP3 MSTORE PUSH5 0xFFFFFFFFFF TIMESTAMP DUP2 AND DUP5 DUP7 ADD SWAP1 DUP2 MSTORE PUSH2 0x258 PUSH1 0x60 DUP7 ADD SWAP1 DUP2 MSTORE PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x7 SWAP1 SWAP5 MSTORE SWAP6 SWAP1 SWAP3 KECCAK256 SWAP4 MLOAD DUP5 SSTORE SWAP2 MLOAD PUSH1 0x1 SWAP4 DUP5 ADD DUP1 SLOAD SWAP3 MLOAD SWAP6 MLOAD PUSH2 0xFFFF AND PUSH14 0x100000000000000000000000000 MUL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFFFFFFFFFFFF SWAP7 SWAP1 SWAP5 AND PUSH9 0x10000000000000000 MUL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000FFFFFFFFFFFFFFFF PUSH8 0xFFFFFFFFFFFFFFFF SWAP4 SWAP1 SWAP4 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP2 SWAP1 SWAP2 AND SWAP2 SWAP1 SWAP2 OR SWAP4 SWAP1 SWAP4 AND OR SWAP1 SWAP2 SSTORE SLOAD CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND EQ ISZERO PUSH2 0xE2B JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP4 ISZERO ISZERO OR SWAP1 SSTORE JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x80 ADD MLOAD PUSH1 0x8 MUL PUSH1 0xFF AND DUP6 PUSH2 0x100 ADD MLOAD PUSH1 0xFF AND PUSH1 0x1 SWAP1 SHL SWAP1 SHL SWAP1 POP DUP1 PUSH1 0x3 SLOAD AND PUSH1 0x0 EQ ISZERO PUSH2 0xE5F JUMPI PUSH1 0x3 DUP1 SLOAD DUP3 OR SWAP1 SSTORE JUMPDEST PUSH1 0x60 DUP6 ADD MLOAD PUSH1 0x0 SWAP1 PUSH1 0x4 AND ISZERO PUSH2 0xE7B JUMPI POP PUSH2 0x100 DUP6 ADD MLOAD PUSH2 0xE8B JUMP JUMPDEST PUSH2 0xE88 DUP7 PUSH1 0x20 ADD MLOAD PUSH2 0x1125 JUMP JUMPDEST SWAP1 POP JUMPDEST DUP6 PUSH1 0x80 ADD MLOAD PUSH1 0xFF AND DUP7 PUSH2 0x100 ADD MLOAD PUSH1 0xFF AND DUP3 PUSH1 0xFF AND PUSH1 0x8 PUSH2 0xEAE DUP6 PUSH1 0xFF AND PUSH2 0x11E6 JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF AND DUP11 PUSH1 0x20 ADD MLOAD PUSH5 0xFFFFFFFFFF AND DUP2 PUSH2 0xEC9 JUMPI INVALID JUMPDEST DIV PUSH6 0xFFFFFFFFFFFF AND SWAP1 SHL ADD PUSH6 0xFFFFFFFFFFFF AND PUSH32 0xC1B504E22197C95FE2A6E166FD15FCDA59F27AC6BBC947BC2A1C87D31E7EFCF9 DUP7 DUP11 PUSH1 0x20 ADD MLOAD PUSH2 0x258 DUP13 PUSH1 0x0 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0xF1C SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x21BE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP PUSH2 0xFF9 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x120 DUP6 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND PUSH4 0xFFFFFFFF SWAP1 SWAP2 AND GT DUP1 ISZERO PUSH2 0xFA5 JUMPI POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH14 0x100000000000000000000000000 DUP2 DIV PUSH2 0xFFFF AND PUSH9 0x10000000000000000 SWAP1 SWAP2 DIV PUSH5 0xFFFFFFFFFF SWAP1 DUP2 AND SWAP2 SWAP1 SWAP2 ADD AND TIMESTAMP GT ISZERO JUMPDEST ISZERO PUSH2 0xFF9 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP4 DUP2 SSTORE PUSH2 0x120 DUP6 ADD MLOAD PUSH1 0x1 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000 AND PUSH4 0xFFFFFFFF SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x103E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x522 SWAP1 PUSH2 0x2295 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 PUSH1 0x0 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1060 SWAP2 SWAP1 PUSH2 0x2061 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP4 PUSH1 0x20 ADD MLOAD DUP5 PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0x60 ADD MLOAD DUP7 PUSH1 0x80 ADD MLOAD DUP8 PUSH1 0xA0 ADD MLOAD DUP9 PUSH1 0xC0 ADD MLOAD DUP10 PUSH2 0x100 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x10B1 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1F5D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x60 DUP5 ADD MLOAD SWAP1 SWAP2 POP PUSH1 0x1 AND PUSH2 0x1117 JUMPI PUSH2 0x1C0 DUP4 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x1105 SWAP2 DUP4 SWAP2 PUSH1 0x20 ADD PUSH2 0x2018 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP JUMPDEST DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH2 0x1140 PUSH5 0xFFFFFFFFFF DUP6 AND TIMESTAMP PUSH4 0xFFFFFFFF PUSH2 0x1214 AND JUMP JUMPDEST SWAP1 POP PUSH4 0x3C26700 DUP2 LT PUSH2 0x117F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x522 SWAP1 PUSH2 0x225E JUMP JUMPDEST PUSH3 0x3B5380 DUP2 GT ISZERO PUSH2 0x1194 JUMPI PUSH1 0x1 JUMPDEST SWAP2 POP PUSH2 0x11DF JUMP JUMPDEST PUSH3 0xA8C00 DUP2 GT ISZERO PUSH2 0x11A6 JUMPI PUSH1 0x3 PUSH2 0x118D JUMP JUMPDEST PUSH3 0x1FA40 DUP2 GT ISZERO PUSH2 0x11B8 JUMPI PUSH1 0x4 PUSH2 0x118D JUMP JUMPDEST PUSH2 0x1C20 DUP2 GT ISZERO PUSH2 0x11C9 JUMPI PUSH1 0x5 PUSH2 0x118D JUMP JUMPDEST PUSH2 0x384 DUP2 GT ISZERO PUSH2 0x11DA JUMPI PUSH1 0x6 PUSH2 0x118D JUMP JUMPDEST PUSH1 0x7 SWAP2 POP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2A DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x24C5 PUSH1 0x2A SWAP2 CODECOPY PUSH1 0x1 DUP5 ADD PUSH1 0x6 MUL ADD MLOAD SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x103E DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1E DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 DUP2 MSTORE POP PUSH1 0x0 DUP2 DUP5 DUP5 GT ISZERO PUSH2 0x128F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x522 SWAP2 SWAP1 PUSH2 0x21EE JUMP JUMPDEST POP POP POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x12C1 PUSH2 0x12E9 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x12CE PUSH2 0x1367 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x60 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0x1E0 DUP2 ADD DUP3 MSTORE PUSH1 0x60 DUP1 DUP3 MSTORE PUSH1 0x0 PUSH1 0x20 DUP4 ADD DUP2 SWAP1 MSTORE SWAP3 DUP3 ADD DUP4 SWAP1 MSTORE DUP1 DUP3 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 DUP3 ADD DUP4 SWAP1 MSTORE PUSH1 0xA0 DUP3 ADD DUP4 SWAP1 MSTORE PUSH1 0xC0 DUP3 ADD DUP4 SWAP1 MSTORE PUSH1 0xE0 DUP3 ADD DUP4 SWAP1 MSTORE PUSH2 0x100 DUP3 ADD DUP4 SWAP1 MSTORE PUSH2 0x120 DUP3 ADD DUP4 SWAP1 MSTORE PUSH2 0x140 DUP3 ADD DUP4 SWAP1 MSTORE PUSH2 0x160 DUP3 ADD DUP4 SWAP1 MSTORE PUSH2 0x180 DUP3 ADD DUP4 SWAP1 MSTORE PUSH2 0x1A0 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH2 0x1C0 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x1041 DUP2 PUSH2 0x242E JUMP JUMPDEST DUP1 MLOAD PUSH2 0x1041 DUP2 PUSH2 0x242E JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x13AD JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x13C0 PUSH2 0x13BB DUP3 PUSH2 0x23A0 JUMP JUMPDEST PUSH2 0x2379 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x13E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x1409 JUMPI DUP2 CALLDATALOAD PUSH2 0x13F7 DUP2 PUSH2 0x2461 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x13E4 JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1424 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1432 PUSH2 0x13BB DUP3 PUSH2 0x23A0 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x1453 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x1409 JUMPI DUP2 MLOAD PUSH2 0x1469 DUP2 PUSH2 0x2461 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1456 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x1041 DUP2 PUSH2 0x2453 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x3 DUP2 LT PUSH2 0x1041 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x1041 DUP2 PUSH2 0x2470 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x1041 DUP2 PUSH2 0x2470 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x14BB JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x14C9 PUSH2 0x13BB DUP3 PUSH2 0x23C0 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x14E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1509 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1517 PUSH2 0x13BB DUP3 PUSH2 0x23C0 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x152E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x11DF DUP2 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x2402 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E0 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1552 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x155B DUP2 PUSH2 0x2379 JUMP JUMPDEST SWAP2 POP POP DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1576 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1582 DUP6 DUP4 DUP7 ADD PUSH2 0x14F9 JUMP JUMPDEST DUP4 MSTORE PUSH2 0x1591 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x187B JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x15A3 DUP6 PUSH1 0x40 DUP7 ADD PUSH2 0x184F JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x15B5 DUP6 PUSH1 0x60 DUP7 ADD PUSH2 0x1891 JUMP JUMPDEST PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x15C7 DUP6 PUSH1 0x80 DUP7 ADD PUSH2 0x1891 JUMP JUMPDEST PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x15D9 DUP6 PUSH1 0xA0 DUP7 ADD PUSH2 0x1891 JUMP JUMPDEST PUSH1 0xA0 DUP5 ADD MSTORE PUSH2 0x15EB DUP6 PUSH1 0xC0 DUP7 ADD PUSH2 0x14A0 JUMP JUMPDEST PUSH1 0xC0 DUP5 ADD MSTORE PUSH2 0x15FD DUP6 PUSH1 0xE0 DUP7 ADD PUSH2 0x1392 JUMP JUMPDEST PUSH1 0xE0 DUP5 ADD MSTORE PUSH2 0x100 SWAP2 POP PUSH2 0x1613 DUP6 DUP4 DUP7 ADD PUSH2 0x1891 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE PUSH2 0x120 SWAP2 POP PUSH2 0x1628 DUP6 DUP4 DUP7 ADD PUSH2 0x1865 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE PUSH2 0x140 SWAP2 POP PUSH2 0x163D DUP6 DUP4 DUP7 ADD PUSH2 0x1392 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE PUSH2 0x160 SWAP2 POP PUSH2 0x1652 DUP6 DUP4 DUP7 ADD PUSH2 0x1865 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE PUSH2 0x180 SWAP2 POP PUSH2 0x1667 DUP6 DUP4 DUP7 ADD PUSH2 0x1865 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE PUSH2 0x1A0 SWAP2 POP PUSH2 0x167C DUP6 DUP4 DUP7 ADD PUSH2 0x1392 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE PUSH2 0x1C0 SWAP2 POP DUP2 DUP5 ADD MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x1696 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x16A2 DUP7 DUP3 DUP8 ADD PUSH2 0x1414 JUMP JUMPDEST DUP4 DUP6 ADD MSTORE POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E0 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x16C2 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x16CB DUP2 PUSH2 0x2379 JUMP JUMPDEST SWAP2 POP POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x16E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x16F2 DUP6 DUP4 DUP7 ADD PUSH2 0x14AB JUMP JUMPDEST DUP4 MSTORE PUSH2 0x1701 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1870 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1713 DUP6 PUSH1 0x40 DUP7 ADD PUSH2 0x1844 JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x1725 DUP6 PUSH1 0x60 DUP7 ADD PUSH2 0x1886 JUMP JUMPDEST PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x1737 DUP6 PUSH1 0x80 DUP7 ADD PUSH2 0x1886 JUMP JUMPDEST PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x1749 DUP6 PUSH1 0xA0 DUP7 ADD PUSH2 0x1886 JUMP JUMPDEST PUSH1 0xA0 DUP5 ADD MSTORE PUSH2 0x175B DUP6 PUSH1 0xC0 DUP7 ADD PUSH2 0x1495 JUMP JUMPDEST PUSH1 0xC0 DUP5 ADD MSTORE PUSH2 0x176D DUP6 PUSH1 0xE0 DUP7 ADD PUSH2 0x1387 JUMP JUMPDEST PUSH1 0xE0 DUP5 ADD MSTORE PUSH2 0x100 SWAP2 POP PUSH2 0x1783 DUP6 DUP4 DUP7 ADD PUSH2 0x1886 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE PUSH2 0x120 SWAP2 POP PUSH2 0x1798 DUP6 DUP4 DUP7 ADD PUSH2 0x185A JUMP JUMPDEST DUP3 DUP5 ADD MSTORE PUSH2 0x140 SWAP2 POP PUSH2 0x17AD DUP6 DUP4 DUP7 ADD PUSH2 0x1387 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE PUSH2 0x160 SWAP2 POP PUSH2 0x17C2 DUP6 DUP4 DUP7 ADD PUSH2 0x185A JUMP JUMPDEST DUP3 DUP5 ADD MSTORE PUSH2 0x180 SWAP2 POP PUSH2 0x17D7 DUP6 DUP4 DUP7 ADD PUSH2 0x185A JUMP JUMPDEST DUP3 DUP5 ADD MSTORE PUSH2 0x1A0 SWAP2 POP PUSH2 0x17EC DUP6 DUP4 DUP7 ADD PUSH2 0x1387 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE PUSH2 0x1C0 SWAP2 POP DUP2 DUP5 ADD CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x1806 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x16A2 DUP7 DUP3 DUP8 ADD PUSH2 0x139D JUMP JUMPDEST DUP1 MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1041 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ PUSH2 0x1041 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x1041 DUP2 PUSH2 0x247F JUMP JUMPDEST DUP1 MLOAD PUSH2 0x1041 DUP2 PUSH2 0x247F JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x1041 DUP2 PUSH2 0x2490 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x1041 DUP2 PUSH2 0x2490 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x1041 DUP2 PUSH2 0x24A2 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x1041 DUP2 PUSH2 0x24A2 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x1041 DUP2 PUSH2 0x24B5 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x1041 DUP2 PUSH2 0x24B5 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x18B0 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x18BB DUP2 PUSH2 0x242E JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x18D7 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP7 ADD DUP8 PUSH1 0x1F DUP3 ADD SLT PUSH2 0x18E8 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP3 POP DUP2 DUP4 GT ISZERO PUSH2 0x18F8 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP8 PUSH1 0x20 DUP1 DUP6 MUL DUP4 ADD ADD GT ISZERO PUSH2 0x190B JUMPI DUP5 DUP6 REVERT JUMPDEST SWAP5 SWAP8 PUSH1 0x20 SWAP1 SWAP6 ADD SWAP7 POP SWAP1 SWAP5 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x192E JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1939 DUP2 PUSH2 0x242E JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1959 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x196F JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 DUP5 ADD DUP6 PUSH1 0x1F DUP3 ADD SLT PUSH2 0x1980 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP1 MLOAD SWAP2 POP PUSH2 0x1990 PUSH2 0x13BB DUP4 PUSH2 0x23A0 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP4 DUP2 ADD SWAP1 DUP3 DUP6 ADD DUP6 DUP6 MUL DUP5 ADD DUP7 ADD DUP10 LT ISZERO PUSH2 0x19AC JUMPI DUP7 DUP8 REVERT JUMPDEST DUP7 SWAP4 POP JUMPDEST DUP5 DUP5 LT ISZERO PUSH2 0x19CE JUMPI DUP1 MLOAD DUP4 MSTORE PUSH1 0x1 SWAP4 SWAP1 SWAP4 ADD SWAP3 SWAP2 DUP6 ADD SWAP2 DUP6 ADD PUSH2 0x19B0 JUMP JUMPDEST POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x19EB JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1A04 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x1A16 DUP2 PUSH2 0x2453 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1A32 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1A48 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1A54 DUP5 DUP3 DUP6 ADD PUSH2 0x16AF JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1A6D JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1A83 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1A54 DUP5 DUP3 DUP6 ADD PUSH2 0x153F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP6 SUB PUSH1 0xA0 DUP2 SLT ISZERO PUSH2 0x1AA4 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1ABA JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x1AC6 DUP8 DUP3 DUP9 ADD PUSH2 0x16AF JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x1AD7 DUP2 PUSH2 0x2453 JUMP JUMPDEST SWAP3 POP PUSH1 0x60 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0 DUP3 ADD SLT ISZERO PUSH2 0x1B08 JUMPI DUP2 DUP3 REVERT JUMPDEST POP PUSH2 0x1B13 PUSH1 0x60 PUSH2 0x2379 JUMP JUMPDEST PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x1B21 DUP2 PUSH2 0x24B5 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x80 SWAP1 SWAP5 ADD CALLDATALOAD PUSH1 0x40 DUP6 ADD MSTORE POP SWAP1 SWAP4 SWAP1 SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B51 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1B68 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP5 ADD DUP1 DUP7 SUB SWAP3 POP PUSH1 0xE0 DUP4 SLT ISZERO PUSH2 0x1B7D JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x1B87 PUSH1 0xA0 PUSH2 0x2379 JUMP JUMPDEST DUP2 MLOAD DUP4 DUP2 GT ISZERO PUSH2 0x1B95 JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH2 0x1BA1 DUP9 DUP3 DUP6 ADD PUSH2 0x153F JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x60 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP6 ADD SLT ISZERO PUSH2 0x1BD3 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x1BDD PUSH1 0x60 PUSH2 0x2379 JUMP JUMPDEST SWAP4 POP PUSH2 0x1BEC DUP8 PUSH1 0x20 DUP5 ADD PUSH2 0x1812 JUMP JUMPDEST DUP5 MSTORE PUSH2 0x1BFB DUP8 PUSH1 0x40 DUP5 ADD PUSH2 0x1832 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MSTORE PUSH2 0x1C0D DUP8 PUSH1 0x60 DUP5 ADD PUSH2 0x147B JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MSTORE DUP4 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x1C2F DUP8 PUSH1 0xA0 DUP5 ADD PUSH2 0x1486 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x1C41 DUP8 PUSH1 0xC0 DUP5 ADD PUSH2 0x147B JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C61 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x103E DUP2 PUSH2 0x24A2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C7D JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x103E DUP2 PUSH2 0x24B5 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1CD4 JUMPI DUP2 MLOAD PUSH1 0xF SIGNEXTEND DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1CB5 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1CD4 JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1CF2 JUMP JUMPDEST PUSH1 0x0 SIGNEXTEND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x1D2D DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x2402 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E0 DUP3 MLOAD DUP2 DUP6 MSTORE PUSH2 0x1D75 DUP3 DUP7 ADD DUP3 PUSH2 0x1D15 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD SWAP3 POP PUSH2 0x1D89 PUSH1 0x20 DUP8 ADD DUP5 PUSH2 0x1F4B JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MLOAD SWAP3 POP PUSH2 0x1D9D PUSH1 0x40 DUP8 ADD DUP5 PUSH2 0x1F38 JUMP JUMPDEST PUSH1 0x60 DUP6 ADD MLOAD SWAP3 POP PUSH2 0x1DB1 PUSH1 0x60 DUP8 ADD DUP5 PUSH2 0x1F56 JUMP JUMPDEST PUSH1 0x80 DUP6 ADD MLOAD SWAP3 POP PUSH2 0x1DC5 PUSH1 0x80 DUP8 ADD DUP5 PUSH2 0x1F56 JUMP JUMPDEST PUSH1 0xA0 DUP6 ADD MLOAD SWAP3 POP PUSH2 0x1DD9 PUSH1 0xA0 DUP8 ADD DUP5 PUSH2 0x1F56 JUMP JUMPDEST PUSH1 0xC0 DUP6 ADD MLOAD SWAP3 POP PUSH2 0x1DED PUSH1 0xC0 DUP8 ADD DUP5 PUSH2 0x1D0E JUMP JUMPDEST PUSH1 0xE0 DUP6 ADD MLOAD SWAP3 POP PUSH2 0x1E01 PUSH1 0xE0 DUP8 ADD DUP5 PUSH2 0x1C88 JUMP JUMPDEST PUSH2 0x100 SWAP3 POP DUP3 DUP6 ADD MLOAD SWAP2 POP PUSH2 0x1E18 DUP4 DUP8 ADD DUP4 PUSH2 0x1F56 JUMP JUMPDEST PUSH2 0x120 SWAP3 POP DUP3 DUP6 ADD MLOAD SWAP2 POP PUSH2 0x1E2F DUP4 DUP8 ADD DUP4 PUSH2 0x1F41 JUMP JUMPDEST PUSH2 0x140 SWAP3 POP DUP3 DUP6 ADD MLOAD SWAP2 POP PUSH2 0x1E46 DUP4 DUP8 ADD DUP4 PUSH2 0x1C88 JUMP JUMPDEST PUSH2 0x160 SWAP3 POP DUP3 DUP6 ADD MLOAD SWAP2 POP PUSH2 0x1E5D DUP4 DUP8 ADD DUP4 PUSH2 0x1F41 JUMP JUMPDEST PUSH2 0x180 SWAP3 POP DUP3 DUP6 ADD MLOAD SWAP2 POP PUSH2 0x1E74 DUP4 DUP8 ADD DUP4 PUSH2 0x1F41 JUMP JUMPDEST PUSH2 0x1A0 SWAP3 POP DUP3 DUP6 ADD MLOAD SWAP2 POP PUSH2 0x1E8B DUP4 DUP8 ADD DUP4 PUSH2 0x1C88 JUMP JUMPDEST PUSH2 0x1C0 SWAP3 POP DUP3 DUP6 ADD MLOAD SWAP2 POP DUP6 DUP2 SUB DUP4 DUP8 ADD MSTORE PUSH2 0x1EA7 DUP2 DUP4 PUSH2 0x1CA2 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0xE0 DUP5 MSTORE PUSH2 0x1EC6 PUSH1 0xE0 DUP6 ADD DUP3 PUSH2 0x1D5F JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP2 POP PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 MLOAD AND PUSH1 0x20 DUP7 ADD MSTORE PUSH2 0xFFFF PUSH1 0x20 DUP4 ADD MLOAD AND PUSH1 0x40 DUP7 ADD MSTORE PUSH1 0x40 DUP3 ADD MLOAD ISZERO ISZERO PUSH1 0x60 DUP7 ADD MSTORE PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x80 DUP7 ADD MSTORE PUSH1 0x60 DUP5 ADD MLOAD SWAP2 POP PUSH1 0x3 DUP3 LT PUSH2 0x1F1B JUMPI INVALID JUMPDEST DUP2 PUSH1 0xA0 DUP7 ADD MSTORE PUSH1 0x80 DUP5 ADD MLOAD ISZERO ISZERO PUSH1 0xC0 DUP7 ADD MSTORE DUP1 SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH3 0xFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH4 0xFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH5 0xFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0xFF AND SWAP1 MSTORE JUMP JUMPDEST SWAP8 DUP9 MSTORE PUSH1 0xD8 SWAP7 SWAP1 SWAP7 SHL PUSH32 0xFFFFFFFFFF000000000000000000000000000000000000000000000000000000 AND PUSH1 0x20 DUP9 ADD MSTORE PUSH1 0xE8 SWAP5 SWAP1 SWAP5 SHL PUSH32 0xFFFFFF0000000000000000000000000000000000000000000000000000000000 AND PUSH1 0x25 DUP8 ADD MSTORE PUSH1 0xF8 SWAP3 DUP4 SHL PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 SWAP1 DUP2 AND PUSH1 0x28 DUP9 ADD MSTORE SWAP2 DUP4 SHL DUP3 AND PUSH1 0x29 DUP8 ADD MSTORE DUP3 SHL DUP2 AND PUSH1 0x2A DUP7 ADD MSTORE PUSH1 0x0 SWAP3 SWAP1 SWAP3 SIGNEXTEND DUP2 SHL PUSH1 0x2B DUP6 ADD MSTORE SWAP2 SWAP1 SWAP2 SHL AND PUSH1 0x2C DUP3 ADD MSTORE PUSH1 0x2D ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH1 0x20 PUSH2 0x202B DUP3 DUP6 DUP4 DUP10 ADD PUSH2 0x2402 JUMP JUMPDEST DUP5 MLOAD SWAP2 DUP5 ADD DUP2 DUP7 ADD DUP5 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x2054 JUMPI DUP2 MLOAD PUSH1 0xF SIGNEXTEND DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 SWAP1 DUP4 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2035 JUMP JUMPDEST POP SWAP1 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x2073 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x2402 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 DUP7 ADD SWAP2 POP PUSH1 0x40 DUP5 DUP3 MUL DUP8 ADD ADD SWAP3 POP DUP4 DUP8 ADD DUP6 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x2114 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0 DUP9 DUP7 SUB ADD DUP5 MSTORE PUSH2 0x2102 DUP6 DUP4 MLOAD PUSH2 0x1EB1 JUMP JUMPDEST SWAP5 POP SWAP3 DUP6 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x20C8 JUMP JUMPDEST POP SWAP3 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x103E PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1CDF JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP1 DUP4 MSTORE PUSH2 0x2147 DUP2 DUP5 ADD DUP7 PUSH2 0x1CDF JUMP JUMPDEST DUP4 DUP2 SUB PUSH1 0x20 DUP6 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP6 MLOAD DUP1 DUP4 MSTORE DUP7 DUP3 ADD SWAP3 DUP3 ADD SWAP1 DUP6 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x219C JUMPI DUP5 MLOAD DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 MSTORE DUP5 ADD MLOAD DUP5 DUP5 ADD MSTORE SWAP4 DUP4 ADD SWAP4 SWAP2 DUP6 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x2161 JUMP JUMPDEST POP SWAP1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP3 MSTORE PUSH5 0xFFFFFFFFFF DUP6 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0xFFFF DUP5 AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x1EA7 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x1D15 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x103E PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1D15 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x22 SWAP1 DUP3 ADD MSTORE PUSH32 0x4F6E6C79206F776E65722063616E2063616C6C20746869732066756E6374696F PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6E2E000000000000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x15 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F6F2066617220696E20746865206675747572650000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1B SWAP1 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x15 SWAP1 DUP3 ADD MSTORE PUSH32 0x7265676973746572206E6F7420706F737369626C650000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 MSTORE PUSH2 0x2316 PUSH1 0xA0 DUP4 ADD DUP7 PUSH2 0x1D5F JUMP JUMPDEST SWAP1 POP DUP4 ISZERO ISZERO PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0xFF DUP4 MLOAD AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x80 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x103E PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1EB1 JUMP JUMPDEST PUSH5 0xFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0xFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x2398 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x23B6 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x23D6 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x241D JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2405 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xFF9 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x2450 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x2450 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0xF SIGNEXTEND DUP2 EQ PUSH2 0x2450 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x0 SIGNEXTEND DUP2 EQ PUSH2 0x2450 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0xFFFFFF DUP2 AND DUP2 EQ PUSH2 0x2450 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x2450 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH5 0xFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x2450 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x2450 JUMPI PUSH1 0x0 DUP1 REVERT INVALID STOP STOP STOP STOP STOP STOP STOP STOP STOP STATICCALL PUSH30 0x3B53800000000A8C0000000001FA40000000001C200000000000 STOP LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG1 SWAP11 BYTE LT 0xEF 0x28 DUP1 SWAP7 SWAP3 0xB4 0xD3 0xB6 0x26 0xDF 0xB2 0xC0 DUP4 0x4E 0xF8 0x2B EXTCODESIZE 0xBF 0xCB SMOD SAR SWAP7 MOD PUSH31 0xB15EA97564736F6C6343000603003300000000000000000000000000000000 ",
				"sourceMap": "1769:12546:2:-:0;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;1769:12546:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12:1:-1;9;2:12;7875:251:2;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;5606:1137;;;:::i;:::-;;;;;;;;;7196:673;;;;;;;;;:::i;:::-;;;;;;;;13716:597;;;;;;;;;:::i;:::-;;13121:174;;;;;;;;;:::i;4281:1319::-;;;:::i;:::-;;;;;;;;10060:530;;;;;;;;;:::i;6749:441::-;;;;;;;;;:::i;:::-;;;;;;;;9362:692;;;;;;;;;:::i;:::-;;;;;;;;8473:669;;;;;;;;;:::i;:::-;;;;;;;;7875:251;8062:18;;:57;;;;;8025:14;;8062:18;;;:37;;:57;;8100:18;;8062:57;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;8062:57:2;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;8062:57:2;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;8062:57:2;;;;;;;;;8055:64;;7875:251;;;;:::o;5606:1137::-;5785:50;;;5804:29;5785:50;;;;;;;;;5689:29;;;;5785:50;;;;17:15:-1;;109:14;5785:50:2;88:42:-1;144:17;;-1:-1;;5770:65:2;-1:-1:-1;2311:66:2;5770:65;5867:51;5846:74;;;;;;;;;;;;;;;;;:84;6009:5;;;;;;5940:12;;:58;;;;;;;;;;;;;;;;;:75;2746:9;6025:12;6046:45;6025:68;;;;;;;;;;;;;;;;;:97;2840:3;6132:12;6153:44;6132:67;;;;;;;;;;;;;:95;;;;;6238:18;6259:19;;6238:40;;6322:10;6305:28;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;-1:-1:-1;6359:15:2;;6288:45;;-1:-1:-1;6359:15:2;;6344:12;6405:284;6424:10;6418:3;:16;6405:284;;;6480:107;;;;;;;;;;;;;;-1:-1:-1;6544:22:2;;;:16;6480:107;6544:22;;;;;;:28;6480:107;;;;;;;6458:19;;:14;;6473:3;;6458:19;;;;;;;;;;;;;;;;:129;;;;6647:22;;;;;;;;:16;:22;;;;;;:31;;;;;;;;;6437:5;6405:284;;;-1:-1:-1;;;5606:1137:2;;:::o;7196:673::-;7584:50;;;;;;;;;;;;;;;;7502:49;;7616:10;7584:50;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;-1:-1:-1;7567:67:2;-1:-1:-1;7644:11:2;7666:166;7680:23;;;7666:166;;;7749:72;7775:4;7781:11;:28;7793:10;;7804:3;7793:15;;;;;;;;;;;;;7781:28;;;;;;;;;;;:39;;;7749:25;:72::i;:::-;7727:14;7742:3;7727:19;;;;;;;;;;;;;;;;;:94;7706:5;;7666:166;;;-1:-1:-1;7196:673:2;;;;;:::o;13716:597::-;3522:5;;;;3508:10;:19;3500:66;;;;;;;;;;;;;;;;;;;;;;13838:22:::1;::::0;::::1;;::::0;;;:16:::1;:22;::::0;;;;:29:::1;;::::0;;;::::1;;;13834:148;;;13915:22;::::0;::::1;;::::0;;;:16:::1;:22;::::0;;;;:36;;;13965:7:::1;;13834:148;14059:15;::::0;;14109:110:::1;::::0;;::::1;::::0;::::1;::::0;;;;;14059:15:::1;::::0;;::::1;14109:110;::::0;;::::1;::::0;;;14059:15;14109:110;;;;;;14084:22;;::::1;14041:15;14084:22:::0;;;:16:::1;:22:::0;;;;;;;:135;;;;;;;;::::1;::::0;;;;::::1;;::::0;::::1;::::0;;;;::::1;::::0;;;::::1;;::::0;;;::::1;::::0;;;::::1;::::0;;;14229:22;;;;::::1;;::::0;;;14283:19:::1;::::0;;:23;;::::1;14261:45:::0;;3576:1:::1;13716:597:::0;;:::o;13121:174::-;3522:5;;;;3508:10;:19;3500:66;;;;;;;;;;;;;;13251:24:::1;::::0;;;:12:::1;:24;::::0;;;;;:37;;;::::1;::::0;::::1;;::::0;;;::::1;::::0;;13121:174::o;4281:1319::-;4374:35;4425:27;4455:18;;;;;;;;;;;:34;;;:36;;;;;;;;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;4455:36:2;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;4455:36:2;;;;;;39:16:-1;36:1;17:17;2:54;101:4;4455:36:2;80:15:-1;;;97:9;76:31;65:43;;120:4;113:20;4455:36:2;;;;;;;;;4425:66;-1:-1:-1;4591:51:2;4516:10;4535:43;4516:64;;;;;;;;;;;;;;;;;:127;2311:66;4657:10;4676:51;4657:72;;;;;;;;;;;;;;;;;:82;4951:18;;;;4857:10;4876:54;4857:75;;;;;;;;;;;;;;;;;:114;5079:11;;5005:10;5024:50;5005:71;;;;;;;;;;;;;;;;;:85;5540:15;;5474:10;5493:42;5474:63;;;;;;;;;;;;;;;;;:81;5583:10;-1:-1:-1;4281:1319:2;:::o;10060:530::-;10173:51;;:::i;:::-;10227:18;;:60;;;;;:18;;;;;:48;;:60;;10276:10;;10227:60;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;10227:60:2;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10227:60:2;;;;;;39:16:-1;36:1;17:17;2:54;101:4;10227:60:2;80:15:-1;;;97:9;76:31;65:43;;120:4;113:20;10227:60:2;;;;;;;;;10173:114;;10348:14;:33;;;:38;;10385:1;10348:38;;10341:46;;;;10407:34;10426:14;10407:18;:34::i;:::-;10398:69;;;;;;;;;;;;;;10477:106;10511:14;10539:10;10563;10477:20;:106::i;:::-;10060:530;;;:::o;6749:441::-;6960:43;;:::i;:::-;7032:18;;:62;;;;;:18;;;;;:44;;:62;;7077:4;;7083:10;;7032:62;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;7032:62:2;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;7032:62:2;;;;;;39:16:-1;36:1;17:17;2:54;101:4;7032:62:2;80:15:-1;;;97:9;76:31;65:43;;120:4;113:20;7032:62:2;;;;;;;;;7159:24;;;;:12;:24;;;;;;;;;7135:48;;:21;;;:48;-1:-1:-1;7019:75:2;6749:441;-1:-1:-1;6749:441:2:o;9362:692::-;9661:18;9704:34;9723:14;9704:18;:34::i;:::-;9695:69;;;;;;;;;;;;;;9787:18;;:116;;;;;:18;;;;;:31;;:116;;9832:14;;9860:10;;9884:9;;9787:116;;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;9787:116:2;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;9787:116:2;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;9787:116:2;;;;;;;;;9774:129;;9913:107;9948:14;9976:10;10000;9913:20;:107::i;:::-;9362:692;;;;;:::o;8473:669::-;8688:25;;;;8671:43;;8614:21;8671:43;;;:16;:43;;;;;:49;:54;8670:113;;;;-1:-1:-1;8777:5:2;;;;8763:10;:19;;8670:113;8653:177;;;-1:-1:-1;8814:5:2;8807:12;;8653:177;2746:9;8858:157;;:136;8957:14;:35;;;8949:44;;8858:86;8912:14;:30;;;8904:39;;8867:14;:30;;;8859:39;;8858:45;;:86;;;;:::i;:::-;:90;:136;:90;:136;:::i;:::-;:157;;8857:210;;;;-1:-1:-1;9061:5:2;;9033:24;;;;9061:5;9033:33;;;9061:5;;9033:33;8857:210;8840:273;;;-1:-1:-1;9098:4:2;9091:11;;8840:273;-1:-1:-1;9130:5:2;8473:669;;;:::o;10596:2519::-;10778:22;10803:49;10837:14;10803:33;:49::i;:::-;10867:27;;;;:11;:27;;;;;:44;;;:27;;-1:-1:-1;10867:44:2;;;;;10863:2246;;10996:264;;;;;;;;;;;11099:30;;;;10996:264;;;;;;;;;;11160:15;10996:264;;;;;;;;2840:3;10996:264;;;;;;-1:-1:-1;10966:27:2;;;:11;:27;;;;;;;:294;;;;;;;;;;;;;;;;10996:264;10966:294;;;;;;;;;;;10996:264;10966:294;;;;;;;;;;;;;;;;;;;;;;;;;;;;11293:5;11279:10;11293:5;;;;11279:19;11275:95;;;11318:24;;;;:12;:24;;;;;:37;;;;;;;;;;11275:95;11384:26;11463:14;:29;;;11495:1;11463:33;11413:84;;11427:14;:29;;;11419:38;;11414:1;:43;;11413:84;;11384:113;;11533:18;11515:15;;:36;11555:1;11515:41;11511:134;;;11594:15;;;:36;;11576:54;;11511:134;11712:21;;;;11659:34;;11742:57;11712:88;:93;11707:406;;-1:-1:-1;11893:29:2;;;;11707:406;;;12030:68;12064:14;:33;;;12030;:68::i;:::-;11999:99;;11707:406;12540:14;:29;;;12214:452;;12493:14;:29;;;12214:452;;12396:28;12295:129;;12391:1;12331:55;12357:28;12331:55;;:25;:55::i;:::-;12297:89;;:14;:33;;;:89;;;;;;;;12296:96;;;;12295:129;12214:452;;;12250:14;12442;:33;;;2840:3;12621:14;:31;;;12214:452;;;;;;;;;;;;;;;;;;10863:2246;;;;;12734:27;;;;:11;:27;;;;;:43;;;12701:30;;;;12734:43;;;;12701:76;;;;;12700:194;;;;-1:-1:-1;12849:27:2;;;;:11;:27;;;;;:44;;;;;;;;12814:32;;;;;;;;:79;;;;12795:98;:15;:98;;12700:194;12683:426;;;12918:29;12950:27;;;:11;:27;;;;;12991:34;;;13068:30;;;;13039:26;;;;:59;;;;;;;;;;;;;;12683:426;10596:2519;;;;:::o;836:176:7:-;894:7;925:5;;;948:6;;;;940:46;;;;;;;;;;;;;;1004:1;-1:-1:-1;836:176:7;;;;;:::o;8018:1341:1:-;8146:22;8325:17;8416:14;:31;;;8399:49;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;8399::1;;;8389:60;;;;;;8489:14;:33;;;8578:14;:30;;;8646:14;:21;;;8681:14;:29;;;8725:14;:26;;;8822:14;:21;;;8908:14;:29;;;8359:638;;;;;;;;;;;;;;;;;;;;26:21:-1;;;22:32;;6:49;;8359:638:1;;;9099:21;;;;8359:638;;-1:-1:-1;9129:58:1;9099:89;9094:226;;9273:22;;;;9217:92;;;;9251:4;;9217:92;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;9217:92:1;;;9210:99;;9094:226;9336:15;;;;;;;;8018:1341;-1:-1:-1;;8018:1341:1:o;3733:1232::-;3850:14;;;3943:57;:27;;;3983:15;3943:57;:31;:57;:::i;:::-;3910:90;;4061:18;4036:22;:43;4028:77;;;;;;;;;;;;;;4144:17;4119:22;:42;4115:811;;;4211:39;4205:46;4188:63;;4115:811;;;4295:16;4270:22;:41;4266:660;;;4360:40;4354:47;;4266:660;4445:12;4420:22;:37;4416:510;;;4508:39;4502:46;;4416:510;4592:11;4567:22;:36;4563:363;;;4653:38;4647:45;;4563:363;4736:7;4711:22;:32;4707:219;;;4792:39;4786:46;;4707:219;4882:43;4859:67;;4707:219;-1:-1:-1;4944:14:1;3733:1232;-1:-1:-1;;3733:1232:1:o;3259:375::-;3374:6;3396:18;3417:13;;;;;;;;;;;;;;;;;3482:1;3455:28;;3028:1;3454:52;3576:18;3570:25;;-1:-1:-1;;3259:375:1;;;:::o;1276:134:7:-;1334:7;1360:43;1364:1;1367;1360:43;;;;;;;;;;;;;;;;;1820:7;1855:12;1847:6;;;;1839:29;;;;;;;;;;;;;;;-1:-1:-1;;;1890:5:7;;;1734:187::o;1769:12546:2:-;;;;;;;;;;-1:-1:-1;1769:12546:2;;;;;;;;:::o;:::-;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;1769:12546:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;-1:-1:-1;1769:12546:2;;;;;;;;;;;;;;;;;:::o;5:130:-1:-;72:20;;97:33;72:20;97:33;;142:134;220:13;;238:33;220:13;238:33;;678:696;;790:3;783:4;775:6;771:17;767:27;757:2;;-1:-1;;798:12;757:2;845:6;832:20;867:75;882:59;934:6;882:59;;;867:75;;;970:21;;;858:84;-1:-1;1014:4;1027:14;;;;1002:17;;;1116;;;1107:27;;;;1104:36;-1:-1;1101:2;;;1153:1;;1143:12;1101:2;1178:1;1163:205;1188:6;1185:1;1182:13;1163:205;;;3654:6;3641:20;3666:32;3692:5;3666:32;;;1256:49;;1319:14;;;;1347;;;;1210:1;1203:9;1163:205;;;1167:14;;;;;750:624;;;;;1399:711;;1522:3;1515:4;1507:6;1503:17;1499:27;1489:2;;-1:-1;;1530:12;1489:2;1570:6;1564:13;1592:75;1607:59;1659:6;1607:59;;1592:75;1695:21;;;1583:84;-1:-1;1739:4;1752:14;;;;1727:17;;;1841;;;1832:27;;;;1829:36;-1:-1;1826:2;;;1878:1;;1868:12;1826:2;1903:1;1888:216;1913:6;1910:1;1907:13;1888:216;;;3793:6;3787:13;3805:32;3831:5;3805:32;;;1981:60;;2055:14;;;;2083;;;;1935:1;1928:9;1888:216;;2997:128;3072:13;;3090:30;3072:13;3090:30;;3410:158;3500:13;;60834:1;60824:12;;60814:2;;60850:1;;60840:12;3849:124;3913:20;;3938:30;3913:20;3938:30;;3980:128;4055:13;;4073:30;4055:13;4073:30;;4116:434;;4214:3;4207:4;4199:6;4195:17;4191:27;4181:2;;-1:-1;;4222:12;4181:2;4269:6;4256:20;4291:61;4306:45;4344:6;4306:45;;4291:61;4282:70;;4372:6;4365:5;4358:21;4476:3;4408:4;4467:6;4400;4458:16;;4455:25;4452:2;;;4493:1;;4483:12;4452:2;59049:6;4408:4;4400:6;4396:17;4408:4;4434:5;4430:16;59026:30;59105:1;59087:16;;;4408:4;59087:16;59080:27;4434:5;4174:376;-1:-1;;4174:376;4559:436;;4668:3;4661:4;4653:6;4649:17;4645:27;4635:2;;-1:-1;;4676:12;4635:2;4716:6;4710:13;4738:61;4753:45;4791:6;4753:45;;4738:61;4729:70;;4819:6;4812:5;4805:21;4923:3;4855:4;4914:6;4847;4905:16;;4902:25;4899:2;;;4940:1;;4930:12;4899:2;4950:39;4982:6;4855:4;4881:5;4877:16;4855:4;4847:6;4843:17;4950:39;;5046:2839;;5173:6;;5161:9;5156:3;5152:19;5148:32;5145:2;;;-1:-1;;5183:12;5145:2;5211:22;5173:6;5211:22;;;5202:31;;;5301:17;5295:24;5339:18;;5331:6;5328:30;5325:2;;;5316:1;;5361:12;5325:2;5406:66;5468:3;5459:6;5448:9;5444:22;5406:66;;;5388:16;5381:92;5581:59;5636:3;5548:2;5616:9;5612:22;5581:59;;;5548:2;5567:5;5563:16;5556:85;5746:59;5801:3;5713:2;5781:9;5777:22;5746:59;;;5713:2;5732:5;5728:16;5721:85;5902:58;5956:3;5869:2;5936:9;5932:22;5902:58;;;5869:2;5888:5;5884:16;5877:84;6066:58;6120:3;6032;6100:9;6096:22;6066:58;;;6032:3;6052:5;6048:16;6041:84;6227:58;6281:3;6193;6261:9;6257:22;6227:58;;;6193:3;6213:5;6209:16;6202:84;6383:57;6436:3;6349;6416:9;6412:22;6383:57;;;6349:3;6369:5;6365:16;6358:83;6542:60;6598:3;6508;6578:9;6574:22;6542:60;;;6508:3;6528:5;6524:16;6517:86;6674:3;;;6710:58;6764:3;6674;6744:9;6740:22;6710:58;;;6674:3;6694:5;6690:18;6683:86;6841:3;;;6877:59;6932:3;6841;6912:9;6908:22;6877:59;;;6841:3;6861:5;6857:18;6850:87;7003:3;;;7039:60;7095:3;7003;7075:9;7071:22;7039:60;;;7003:3;7023:5;7019:18;7012:88;7172:3;;;7208:59;7263:3;7172;7243:9;7239:22;7208:59;;;7172:3;7192:5;7188:18;7181:87;7345:3;;;7381:59;7436:3;7345;7416:9;7412:22;7381:59;;;7345:3;7365:5;7361:18;7354:87;7507:3;;;7543:60;7599:3;7507;7579:9;7575:22;7543:60;;;7507:3;7527:5;7523:18;7516:88;7689:3;;;;7678:9;7674:19;7668:26;5339:18;7706:6;7703:30;7700:2;;;5316:1;;7736:12;7700:2;7783:80;7859:3;7850:6;7839:9;7835:22;7783:80;;;7689:3;7767:5;7763:18;7756:108;;;;5139:2746;;;;;7935:2681;;8055:6;;8043:9;8038:3;8034:19;8030:32;8027:2;;;-1:-1;;8065:12;8027:2;8093:22;8055:6;8093:22;;;8084:31;;;8190:17;8177:31;8228:18;;8220:6;8217:30;8214:2;;;8205:1;;8250:12;8214:2;8295:55;8346:3;8337:6;8326:9;8322:22;8295:55;;;8277:16;8270:81;8459:48;8503:3;8426:2;8483:9;8479:22;8459:48;;;8426:2;8445:5;8441:16;8434:74;8613:48;8657:3;8580:2;8637:9;8633:22;8613:48;;;8580:2;8599:5;8595:16;8588:74;8758:47;8801:3;8725:2;8781:9;8777:22;8758:47;;;8725:2;8744:5;8740:16;8733:73;8911:47;8954:3;8877;8934:9;8930:22;8911:47;;;8877:3;8897:5;8893:16;8886:73;9061:47;9104:3;9027;9084:9;9080:22;9061:47;;;9027:3;9047:5;9043:16;9036:73;9206:46;9248:3;9172;9228:9;9224:22;9206:46;;;9172:3;9192:5;9188:16;9181:72;9354:49;9399:3;9320;9379:9;9375:22;9354:49;;;9320:3;9340:5;9336:16;9329:75;9475:3;;;9511:47;9554:3;9475;9534:9;9530:22;9511:47;;;9475:3;9495:5;9491:18;9484:75;9631:3;;;9667:48;9711:3;9631;9691:9;9687:22;9667:48;;;9631:3;9651:5;9647:18;9640:76;9782:3;;;9818:49;9863:3;9782;9843:9;9839:22;9818:49;;;9782:3;9802:5;9798:18;9791:77;9940:3;;;9976:48;10020:3;9940;10000:9;9996:22;9976:48;;;9940:3;9960:5;9956:18;9949:76;10102:3;;;10138:48;10182:3;10102;10162:9;10158:22;10138:48;;;10102:3;10122:5;10118:18;10111:76;10253:3;;;10289:49;10334:3;10253;10314:9;10310:22;10289:49;;;10253:3;10273:5;10269:18;10262:77;10431:3;;;;10420:9;10416:19;10403:33;8228:18;10448:6;10445:30;10442:2;;;8205:1;;10478:12;10442:2;10525:69;10590:3;10581:6;10570:9;10566:22;10525:69;;16064:134;16142:13;;58112:34;58101:46;;61165:35;;61155:2;;61214:1;;61204:12;16205:132;16282:13;;58231:6;58220:18;;61288:34;;61278:2;;61336:1;;61326:12;16344:128;16410:20;;16435:32;16410:20;16435:32;;16479:132;16556:13;;16574:32;16556:13;16574:32;;16896:128;16962:20;;16987:32;16962:20;16987:32;;17031:132;17108:13;;17126:32;17108:13;17126:32;;17170:128;17236:20;;17261:32;17236:20;17261:32;;17305:132;17382:13;;17400:32;17382:13;17400:32;;17444:126;17509:20;;17534:31;17509:20;17534:31;;17577:130;17653:13;;17671:31;17653:13;17671:31;;17714:522;;;;17870:2;17858:9;17849:7;17845:23;17841:32;17838:2;;;-1:-1;;17876:12;17838:2;85:6;72:20;97:33;124:5;97:33;;;17928:63;-1:-1;18056:2;18041:18;;18028:32;18080:18;18069:30;;;18066:2;;;-1:-1;;18102:12;18066:2;18203:6;18192:9;18188:22;431:3;424:4;416:6;412:17;408:27;398:2;;-1:-1;;439:12;398:2;482:6;469:20;459:30;;18080:18;501:6;498:30;495:2;;;-1:-1;;531:12;495:2;626:3;18056:2;;610:6;606:17;567:6;592:32;;589:41;586:2;;;-1:-1;;633:12;586:2;17832:404;;18056:2;563:17;;;;-1:-1;18130:90;;-1:-1;;;;17832:404;18243:366;;;18364:2;18352:9;18343:7;18339:23;18335:32;18332:2;;;-1:-1;;18370:12;18332:2;85:6;72:20;97:33;124:5;97:33;;;18422:63;18522:2;18561:22;;;;3199:20;;-1:-1;;;18326:283;18989:392;;19129:2;;19117:9;19108:7;19104:23;19100:32;19097:2;;;-1:-1;;19135:12;19097:2;19186:17;19180:24;19224:18;19216:6;19213:30;19210:2;;;-1:-1;;19246:12;19210:2;19348:6;19337:9;19333:22;2264:3;2257:4;2249:6;2245:17;2241:27;2231:2;;-1:-1;;2272:12;2231:2;2312:6;2306:13;2292:27;;2334:80;2349:64;2406:6;2349:64;;2334:80;2442:21;;;2499:14;;;;2474:17;;;2588;;;2579:27;;;;2576:36;-1:-1;2573:2;;;-1:-1;;2615:12;2573:2;-1:-1;2641:10;;2635:217;2660:6;2657:1;2654:13;2635:217;;;16833:13;;2728:61;;2682:1;2675:9;;;;;2803:14;;;;2831;;2635:217;;;-1:-1;19266:99;19091:290;-1:-1;;;;;;;19091:290;19388:263;;19503:2;19491:9;19482:7;19478:23;19474:32;19471:2;;;-1:-1;;19509:12;19471:2;-1:-1;3347:13;;19465:186;-1:-1;19465:186;19658:360;;;19776:2;19764:9;19755:7;19751:23;19747:32;19744:2;;;-1:-1;;19782:12;19744:2;3212:6;3199:20;19834:63;;19934:2;19974:9;19970:22;2930:20;2955:30;2979:5;2955:30;;;19942:60;;;;19738:280;;;;;;20025:389;;20160:2;20148:9;20139:7;20135:23;20131:32;20128:2;;;-1:-1;;20166:12;20128:2;20224:17;20211:31;20262:18;20254:6;20251:30;20248:2;;;-1:-1;;20284:12;20248:2;20314:84;20390:7;20381:6;20370:9;20366:22;20314:84;;;20304:94;20122:292;-1:-1;;;;20122:292;20421:404;;20567:2;20555:9;20546:7;20542:23;20538:32;20535:2;;;-1:-1;;20573:12;20535:2;20624:17;20618:24;20662:18;20654:6;20651:30;20648:2;;;-1:-1;;20684:12;20648:2;20714:95;20801:7;20792:6;20781:9;20777:22;20714:95;;20832:688;;;;21013:9;21004:7;21000:23;21025:3;21000:23;20996:33;20993:2;;;-1:-1;;21032:12;20993:2;21090:17;21077:31;21128:18;21120:6;21117:30;21114:2;;;-1:-1;;21150:12;21114:2;21180:84;21256:7;21247:6;21236:9;21232:22;21180:84;;;21170:94;;;21301:2;21341:9;21337:22;2930:20;2955:30;2979:5;2955:30;;;21309:60;-1:-1;15571:4;15550:19;;;15546:30;15543:2;;;-1:-1;;15579:12;15543:2;;15607:20;15571:4;15607:20;;;21406:2;21476:9;21472:22;17509:20;17534:31;17559:5;17534:31;;;15681:73;;15571:4;15866:22;;3199:20;21301:2;15827:16;;15820:75;16007:22;;;;3199:20;21406:2;15968:16;;15961:75;-1:-1;20987:533;;;;-1:-1;20987:533;21527:396;;21669:2;21657:9;21648:7;21644:23;21640:32;21637:2;;;-1:-1;;21675:12;21637:2;21726:17;21720:24;21764:18;;21756:6;21753:30;21750:2;;;-1:-1;;21786:12;21750:2;21890:6;21879:9;21875:22;13670:9;13665:3;13661:19;;;13682:4;13661:19;13657:30;13654:2;;;-1:-1;;13690:12;13654:2;13718:20;13733:4;13718:20;;;13804:17;13798:24;21764:18;13834:6;13831:30;13828:2;;;-1:-1;;13864:12;13828:2;13909:87;13992:3;13983:6;13972:9;13968:22;13909:87;;;13891:16;13884:113;;14869:4;14848:19;;;14844:30;14841:2;;;-1:-1;;14877:12;14841:2;14905:20;14869:4;14905:20;;;14896:29;;15006:60;15062:3;21669:2;14158:9;14154:22;15006:60;;;14988:16;14981:86;15172:59;15227:3;15203:22;14158:9;15203:22;15172:59;;;21669:2;15158:5;15154:16;15147:85;15329:57;15382:3;14869:4;14158:9;15358:22;15329:57;;;15203:22;15315:5;15311:16;15304:83;14098:84;21669:2;14084:5;14080:16;14073:110;14250:3;14320:9;14316:22;3347:13;15203:22;14270:5;14266:16;14259:86;14445:72;14513:3;13733:4;14493:9;14489:22;14445:72;;;14869:4;14431:5;14427:16;14420:98;14619:57;14672:3;14585;14652:9;14648:22;14619:57;;;14250:3;14601:16;;14594:83;14605:5;21631:292;-1:-1;;;;;;21631:292;21930:239;;22033:2;22021:9;22012:7;22008:23;22004:32;22001:2;;;-1:-1;;22039:12;22001:2;17249:6;17236:20;17261:32;17287:5;17261:32;;22176:259;;22289:2;22277:9;22268:7;22264:23;22260:32;22257:2;;;-1:-1;;22295:12;22257:2;17659:6;17653:13;17671:31;17696:5;17671:31;;23532:103;58323:42;58312:54;23593:37;;23587:48;23791:646;;23963:5;54454:12;55976:6;55971:3;55964:19;56013:4;;56008:3;56004:14;23975:82;;56013:4;24123:5;53793:14;-1:-1;24162:253;24187:6;24184:1;24181:13;24162:253;;;24248:13;;57926:2;57915:21;29189:36;;22592:14;;;;55439;;;;24209:1;24202:9;24162:253;;;-1:-1;24421:10;;23899:538;-1:-1;;;;;23899:538;27325:690;;27518:5;54454:12;55976:6;55971:3;55964:19;56013:4;;56008:3;56004:14;27530:93;;56013:4;27694:5;53793:14;-1:-1;27733:260;27758:6;27755:1;27752:13;27733:260;;;27819:13;;28296:37;;23504:14;;;;55439;;;;27780:1;27773:9;27733:260;;29352:94;-1:-1;58007:20;29407:34;;29401:45;29600:347;;29745:5;54454:12;55976:6;55971:3;55964:19;29839:52;29884:6;56013:4;56008:3;56004:14;56013:4;29865:5;29861:16;29839:52;;;59948:2;59928:14;59944:7;59924:28;29903:39;;;;56013:4;29903:39;;29692:255;-1:-1;;29692:255;32444:2804;;32607:6;32693:16;32687:23;32607:6;32730:14;32723:38;32776:69;32607:6;32602:3;32598:16;32826:12;32776:69;;;32944:4;32937:5;32933:16;32927:23;32907:43;;32956:61;32944:4;33006:3;33002:14;32988:12;32956:61;;;33107:4;33100:5;33096:16;33090:23;33070:43;;33119:61;33107:4;33169:3;33165:14;33151:12;33119:61;;;33261:4;33254:5;33250:16;33244:23;33224:43;;33273:59;33261:4;33321:3;33317:14;33303:12;33273:59;;;33421:4;33414:5;33410:16;33404:23;33384:43;;33433:59;33421:4;33481:3;33477:14;33463:12;33433:59;;;33578:4;33571:5;33567:16;33561:23;33541:43;;33590:59;33578:4;33638:3;33634:14;33620:12;33590:59;;;33730:4;33723:5;33719:16;33713:23;33693:43;;33742:57;33730:4;33788:3;33784:14;33770:12;33742:57;;;33884:4;33877:5;33873:16;33867:23;33847:43;;33896:63;33884:4;33948:3;33944:14;33930:12;33896:63;;;34048:6;;;;34041:5;34037:18;34031:25;34011:45;;34062:61;34048:6;34110:3;34106:16;34092:12;34062:61;;;34213:6;;;;34206:5;34202:18;34196:25;34176:45;;34227:63;34213:6;34277:3;34273:16;34259:12;34227:63;;;34374:6;;;;34367:5;34363:18;34357:25;34337:45;;34388:65;34374:6;34440:3;34436:16;34422:12;34388:65;;;34543:6;;;;34536:5;34532:18;34526:25;34506:45;;34557:63;34543:6;34607:3;34603:16;34589:12;34557:63;;;34715:6;;;;34708:5;34704:18;34698:25;34678:45;;34729:63;34715:6;34779:3;34775:16;34761:12;34729:63;;;34876:6;;;;34869:5;34865:18;34859:25;34839:45;;34890:65;34876:6;34942:3;34938:16;34924:12;34890:65;;;35037:6;;;;35030:5;35026:18;35020:25;35000:45;;35093:3;35087:4;35083:14;35037:6;35069:3;35065:16;35058:40;35113:97;35205:4;35191:12;35113:97;;;35232:11;32580:2668;-1:-1;;;;;;32580:2668;38210:1165;;38447:16;38441:23;38365:4;38484:14;38477:38;38530:111;38365:4;38360:3;38356:14;38622:12;38530:111;;;38733:4;38726:5;38722:16;38716:23;38696:43;;58112:34;40898:16;40892:23;58101:46;38733:4;38849:3;38845:14;42659:37;58231:6;38733:4;41067:5;41063:16;41057:23;58220:18;41132:14;38849:3;41132:14;42767:36;41132:14;41222:5;41218:16;41212:23;57612:13;57605:21;41283:14;38849:3;41283:14;28078:34;41132:14;38938:5;38934:16;38928:23;39014:4;39009:3;39005:14;28296:37;41283:14;39097:5;39093:16;39087:23;39067:43;;60358:1;60351:5;60348:12;60338:2;;60364:9;60338:2;58919:36;39183:4;39178:3;39174:14;29058:60;39014:4;39267:5;39263:16;39257:23;57612:13;57605:21;39337:4;39332:3;39328:14;28078:34;39359:11;;;;;38338:1037;;;;;42932:100;58450:8;58439:20;42991:36;;42985:47;43304:100;58622:10;58611:22;43363:36;;43357:47;43411:100;58717:12;58706:24;43470:36;;43464:47;43790:97;58813:4;58802:16;43847:35;;43841:46;44159:1158;28296:37;;;60040:3;60036:15;;;;;;44545:2;44536:12;;43722:56;60144:3;60140:15;;;;;;44645:11;;;43126:56;60248:3;60244:15;;;;;;;44753:11;;;44093:54;60244:15;;;;;44859:11;;;44093:54;60244:15;;;;44965:11;;;44093:54;44159:1158;58007:20;;;;60244:15;;45071:11;;;29536:52;60244:15;;;;;45175:11;;;44093:54;45281:11;;;44436:881;45324:471;;28784:5;54454:12;28928:4;28895:52;28940:6;28935:3;28928:4;28921:5;28917:16;28895:52;;;54454:12;;;28959:16;;53793:14;;;-1:-1;24901:261;24926:6;24923:1;24920:13;24901:261;;;24987:13;;57926:2;57915:21;29189:36;;22592:14;;;;55439;;;;24948:1;24941:9;24901:261;;;-1:-1;45780:10;;45521:274;-1:-1;;;;;;;45521:274;45802:258;;28784:5;54454:12;28895:52;28940:6;28935:3;28928:4;28921:5;28917:16;28895:52;;;28959:16;;;;;45925:135;-1:-1;;45925:135;46067:324;58323:42;58312:54;;;;23593:37;;46377:2;46362:18;;28296:37;46213:2;46198:18;;46184:207;46398:453;;46612:2;;46601:9;46597:18;46612:2;46633:17;46626:47;46687:154;25535:5;54454:12;55976:6;55971:3;55964:19;56004:14;46601:9;56004:14;25547:116;;56004:14;46612:2;25720:6;25716:17;46601:9;25707:27;;25695:39;;46612:2;25828:5;53793:14;-1:-1;25867:399;25892:6;25889:1;25886:13;25867:399;;;25944:20;46601:9;25948:4;25944:20;;25939:3;25932:33;22962:96;23054:3;25999:6;25993:13;22962:96;;;26013:118;-1:-1;26245:14;;;;55439;;;;25914:1;25907:9;25867:399;;;-1:-1;46679:162;;46583:268;-1:-1;;;;;;;46583:268;46858:361;;47026:2;47047:17;47040:47;47101:108;47026:2;47015:9;47011:18;47195:6;47101:108;;47226:712;;47518:2;;47539:17;47532:47;47593:108;47518:2;47507:9;47503:18;47687:6;47593:108;;;47739:20;;;47734:2;47719:18;;;47712:48;;;;54454:12;;55964:19;;;53793:14;;;;56004;;;-1:-1;26935:329;26960:6;26957:1;26954:13;26935:329;;;27021:13;;42323:23;;58323:42;58312:54;23593:37;;42484:16;;42478:23;42555:14;;;28296:37;55439:14;;;;23322;;;;26982:1;26975:9;26935:329;;;-1:-1;47766:162;;47489:449;-1:-1;;;;;;;;47489:449;47945:201;57612:13;;57605:21;28078:34;;48057:2;48042:18;;48028:118;48153:213;28296:37;;;48271:2;48256:18;;48242:124;48373:619;;28326:5;28303:3;28296:37;58717:12;43499:5;58706:24;48750:2;48739:9;48735:18;43470:36;58231:6;42796:5;58220:18;48831:2;48820:9;48816:18;42767:36;48587:3;48868:2;48857:9;48853:18;48846:48;48908:74;48587:3;48576:9;48572:19;48968:6;48908:74;;48999:301;;49137:2;49158:17;49151:47;49212:78;49137:2;49126:9;49122:18;49276:6;49212:78;;49307:407;49498:2;49512:47;;;31210:2;49483:18;;;55964:19;31246:34;56004:14;;;31226:55;31315:4;31301:12;;;31294:26;31339:12;;;49469:245;49721:407;49912:2;49926:47;;;31590:2;49897:18;;;55964:19;31626:23;56004:14;;;31606:44;31669:12;;;49883:245;50135:407;50326:2;50340:47;;;31920:2;50311:18;;;55964:19;31956:29;56004:14;;;31936:50;32005:12;;;50297:245;50549:407;50740:2;50754:47;;;32256:2;50725:18;;;55964:19;32292:23;56004:14;;;32272:44;32335:12;;;50711:245;50963:704;;51247:3;51269:17;51262:47;51323:120;51247:3;51236:9;51232:19;51429:6;51323:120;;;51315:128;;28105:5;57612:13;57605:21;51516:2;51505:9;51501:18;28078:34;58813:4;41619:16;41613:23;58802:16;51653:2;51642:9;51638:18;43847:35;51516:2;41770:5;41766:16;41760:23;41837:14;51642:9;41837:14;28296:37;51653:2;41921:5;41917:16;41911:23;41988:14;51642:9;41988:14;28296:37;51218:449;;;;;;;51674:369;;51846:2;51867:17;51860:47;51921:112;51846:2;51835:9;51831:18;52019:6;51921:112;;52050:209;58717:12;58706:24;;;;43470:36;;52166:2;52151:18;;52137:122;52266:205;58813:4;58802:16;;;;43847:35;;52380:2;52365:18;;52351:120;52478:256;52540:2;52534:9;52566:17;;;52641:18;52626:34;;52662:22;;;52623:62;52620:2;;;52698:1;;52688:12;52620:2;52540;52707:22;52518:216;;-1:-1;52518:216;52741:299;;52895:18;52887:6;52884:30;52881:2;;;-1:-1;;52917:12;52881:2;-1:-1;52962:4;52950:17;;;53015:15;;52818:222;53358:318;;53498:18;53490:6;53487:30;53484:2;;;-1:-1;;53520:12;53484:2;-1:-1;53597:4;53574:17;53593:9;53570:33;53661:4;53651:15;;53421:255;59122:268;59187:1;59194:101;59208:6;59205:1;59202:13;59194:101;;;59275:11;;;59269:18;59256:11;;;59249:39;59230:2;59223:10;59194:101;;;59310:6;59307:1;59304:13;59301:2;;;-1:-1;;59187:1;59357:16;;59350:27;59171:219;60387:117;58323:42;60474:5;58312:54;60449:5;60446:35;60436:2;;60495:1;;60485:12;60436:2;60430:74;;60511:111;60592:5;57612:13;57605:21;60570:5;60567:32;60557:2;;60613:1;;60603:12;60866:115;60951:5;57926:2;57915:21;60927:5;60924:34;60914:2;;60972:1;;60962:12;60988:111;58021:5;-1:-1;58007:20;61047:5;61044:32;61034:2;;-1:-1;;61080:12;61352:115;58450:8;61437:5;58439:20;61413:5;61410:34;61400:2;;61458:1;;61448:12;61598:115;58622:10;61683:5;58611:22;61659:5;61656:34;61646:2;;61704:1;;61694:12;61720:115;58717:12;61805:5;58706:24;61781:5;61778:34;61768:2;;61826:1;;61816:12;61842:113;58813:4;61925:5;58802:16;61902:5;61899:33;61889:2;;61946:1;;61936:12"
			}
		}
	},
	"sources": {
		"DigiOptionsMarketLister.sol": {
			"id": 2
		},
		"DigiOptionsBaseInterface.sol": {
			"id": 0
		},
		"factsigner/contracts/FactsignerDefines.sol": {
			"id": 9
		},
		"factsigner/contracts/FactsignerVerify.sol": {
			"id": 10
		},
		"SafeMath.sol": {
			"id": 7
		},
		"DigiOptionsLib.sol": {
			"id": 1
		},
		"DigiOptionsMarkets.sol": {
			"id": 3
		},
		"SafeCast.sol": {
			"id": 6
		},
		"SignedSafeMath.sol": {
			"id": 8
		}
	},
	"sourceCodes": {
		"DigiOptionsMarketLister.sol": "/*\n freedex-protocol / User Driven Option Markets Contract used by https://www.digioptions.com\n\n Designed to work with signatures from [www.factsigner.com](https://www.factsigner.com)\n\n Public repository:\n https://github.com/berlincode/digioptions-contracts.js\n\n elastic.code@gmail.com\n mail@digioptions.com\n\n\n MIT License\n\n Copyright (c) digioptions.com (https://www.digioptions.com)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n*/\n\npragma solidity ^0.6.1;\npragma experimental ABIEncoderV2;\n\nimport \"./DigiOptionsBaseInterface.sol\";\nimport \"./DigiOptionsMarkets.sol\";\nimport \"./DigiOptionsLib.sol\";\n//import_\"@openzeppelin/contracts/math/SafeMath.sol\";\n//import_\"@openzeppelin/contracts/drafts/SignedSafeMath.sol\";\nimport \"./SafeMath.sol\";\nimport \"./SignedSafeMath.sol\";\n\n\ncontract DigiOptionsMarketLister is DigiOptionsBaseInterface {\n    using SafeMath for uint256;\n    using SignedSafeMath for int256;\n\n    /*\n        we use a simple linked list - since the SignerListEntry is part of a map\n        the value remains directly accessible by the signer's address \n    */\n    struct SignerListEntry {\n        uint256 value;\n        address addrNext;\n        bool exists; // TODO use\n    }\n\n    struct SignerData {\n        address addr;\n        uint256 value;\n    }\n\n    uint256 constant private VERSION = (\n        (0 << 32) + /* major */\n        (50 << 16) + /* minor */\n        0 /* bugfix */\n    );\n\n    /* constants which are set during construction */\n    uint256 private blockNumber;\n    address private owner;\n    DigiOptionsMarkets private digiOptionsMarkets;\n\n    uint256 private existingMarkets; /* one bit for each marketCategory and marketInterval */\n\n    /* control variables/constants */\n    uint64 constant private transactionFeeMax = 10 finney; // 0.01 = 1.0% //TODO not in finney\n    uint16 constant private openDelaySeconds = 600;\n\n    address internal signerAddrFirst; /* the first signer (if exists) */\n    mapping(address => SignerListEntry) private signerEntriesMap; // stores which signing addresses are allowed to register\n    uint256 private signerMapNumEntries = 0;\n\n    /* variables */\n    struct MarketBest {\n        bytes32 marketHash; // TODO bytes16?\n        uint64 transactionFee0; // TODO remove or keep it?\n        uint40 time;\n        uint16 openDelaySeconds;\n    }\n    mapping(bytes32 => MarketBest) internal marketsBest; // mapping from baseMarketHash\n    mapping(bytes32 => bool) internal isTestMarket; // mapping from marketHash\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Only owner can call this function.\");\n        _;\n    }\n\n    event MarketCreateLister(\n        bytes32 marketKey, /* marketsContract stores marketHash ; marketListerContract stores baseMarketHash */\n        uint48 indexed expirationDatetimeFilter,\n        uint40 expirationDatetime,\n        uint8 indexed marketInterval,\n        uint8 indexed marketCategory,\n        uint16 openDelaySeconds,\n        string underlyingString\n    );\n\n    constructor (DigiOptionsMarkets addr)\n        public\n    {\n        owner = msg.sender;\n        blockNumber = block.number;\n        digiOptionsMarkets = addr;\n    }\n\n    /* TODO re-enabled after 0x-tools support solc-0.6.0\n    // default fallback\n    receive () external payable {\n        revert();\n    }\n    */\n\n    function getContractInfo (\n    )\n        external\n        override\n\tvirtual\n        returns (uint256[] memory contractInfoValues)\n    {\n        uint256[] memory infoValues = digiOptionsMarkets.getContractInfo();\n\n        {\n            infoValues[uint256(DigiOptionsLib.InfoValues.CONTRACT_TYPE_IDX)] = uint256(DigiOptionsLib.ContractType.DIGIOPTIONSMARKETLISTER);\n            infoValues[uint256(DigiOptionsLib.InfoValues.VERSION_MARKET_LISTER_IDX)] = VERSION;\n            //infoValues[uint256(DigiOptionsLib.InfoValues.VERSION_MARKETS_IDX)] // keep versionMarkets\n            infoValues[uint256(DigiOptionsLib.InfoValues.DIGIOPTIONS_MARKETS_ADDR_IDX)] = uint256(address(digiOptionsMarkets));\n        }\n        {\n            infoValues[uint256(DigiOptionsLib.InfoValues.BLOCK_NUMBER_CREATED_IDX)] = blockNumber;\n            //infoValues[uint256(DigiOptionsLib.InfoValues.TIMESTAMP_MARKET_CREATED_IDX)] // keep timestampMarketsCreated\n            //infoValues[uint256(DigiOptionsLib.InfoValues.OFFER_MAX_BLOCKS_INTO_FUTURE_IDX)] // keep offerMaxBlocksInto_future\n            //infoValues[uint256(DigiOptionsLib.InfoValues.PAYOUT_PER_NANO_OPTION_EXP_IDX)] // keep payoutPerNanoOption\n            infoValues[uint256(DigiOptionsLib.InfoValues.EXISTING_MARKETS)] = existingMarkets;\n        }\n\n        return infoValues;\n    }\n\n    function getMarketListerInfo(\n    )\n        external\n        view\n        returns (uint256[] memory listerValues, SignerData[] memory signerDataList)\n    {\n        listerValues = new uint[](uint256(DigiOptionsLib.InfoLister.MAX));\n\n        listerValues[uint256(DigiOptionsLib.InfoLister.VERSION_MARKET_LISTER_IDX)] = VERSION;\n        listerValues[uint256(DigiOptionsLib.InfoLister.OWNER_IDX)] = uint256(owner);\n        listerValues[uint256(DigiOptionsLib.InfoLister.TRANSACTION_FEE_MAX)] = uint256(transactionFeeMax);\n        listerValues[uint256(DigiOptionsLib.InfoLister.OPEN_DELAY_SECONDS)] = uint256(openDelaySeconds);\n\n        uint256 numEntries = signerMapNumEntries;\n        signerDataList = new SignerData[](numEntries);\n\n        address addr = signerAddrFirst;\n        uint256 idx;\n        for (idx=0 ; idx < numEntries ; idx++){\n\n            signerDataList[idx] = SignerData({\n                addr: addr,\n                value: signerEntriesMap[addr].value\n            });\n            // move on with next entry\n            addr = signerEntriesMap[addr].addrNext;\n        }\n\n        return (listerValues, signerDataList);\n    }\n\n    function getMarketDataByMarketHash (\n        address addr, // marketData.userState for this address\n        bytes32 marketHash\n    )\n        public\n        view\n        override\n        virtual\n        returns (DigiOptionsLib.MarketData memory marketData)\n    {\n        marketData = digiOptionsMarkets.getMarketDataByMarketHash(addr, marketHash);\n        // override testMarket\n        marketData.testMarket = isTestMarket[marketHash];\n    }\n\n    function getMarketDataListByMarketKeys (\n        address addr, // marketData.userState for this address\n        bytes32[] calldata marketKeys // marketsContract uses marketHash / marketListerContract uses baseMarketHash\n    )\n        external\n        view\n        override\n        virtual\n        returns (DigiOptionsLib.MarketData[] memory marketDataList)\n    {\n        marketDataList = new DigiOptionsLib.MarketData[](marketKeys.length);\n        uint256 idx;\n\n        for (idx= 0 ; idx < marketKeys.length ; idx++) {\n            marketDataList[idx] = getMarketDataByMarketHash(addr, marketsBest[marketKeys[idx]].marketHash);\n        }\n        return marketDataList;\n    }\n\n    function calcMarketInterval (\n        uint40 expirationDatetime\n    )\n        external\n        view\n        override\n        virtual\n        returns (uint8 interval)\n    {\n        return digiOptionsMarkets.calcMarketInterval(expirationDatetime);\n    }\n\n    /* TODO remove\n    function test()\n        public\n        view\n        returns (address owner, address sender)\n    {\n            return (owner, msg.sender);\n    }\n    */\n\n    /*\n    check, if a market might be possible to register (it does not need to be created for this\n    and it is not checked if creating is possible at all)\n    */\n    function registerMarketTest (\n        DigiOptionsLib.MarketBaseData memory marketBaseData\n    )\n        public\n        view\n        returns (bool registerPossible)\n    {\n\n\n        if (\n            (signerEntriesMap[marketBaseData.signerAddr].value == 0) && // TODO check bits!\n            (msg.sender != owner)\n        ){\n            return false;\n        }\n\n        if (\n            ((uint256(marketBaseData.transactionFee0)).add(uint256(marketBaseData.transactionFee1)).add(uint256(marketBaseData.transactionFeeSigner)) <= transactionFeeMax) &&\n            (marketBaseData.feeTaker0 == owner)\n        ){\n            return true;\n        }\n\n        return false;\n    }\n\n    /*\n        This is just a convenient wrapper for both, creating and registering a market.\n        Remember you can always do this in two transactions and just use this contract\n        for registration.\n    */\n    function createMarket (\n        DigiOptionsLib.MarketBaseData memory marketBaseData,\n        bool testMarket,\n        FactsignerVerify.Signature memory signature\n    )\n        public // this should be external (see https://github.com/ethereum/solidity/issues/5479)\n        override\n        returns (bytes32 marketHash)\n    {\n        require (registerMarketTest(marketBaseData), 'register not possible');\n        marketHash = digiOptionsMarkets.createMarket(\n            marketBaseData,\n            testMarket,\n            signature\n        );\n        registerMarketIntern (\n            marketBaseData,\n            marketHash,\n            testMarket\n        );\n        return marketHash;\n    }\n\n    function registerMarket (\n        bytes32 marketHash,\n        bool testMarket\n    )\n        public\n    {\n        DigiOptionsLib.MarketBaseData memory marketBaseData = digiOptionsMarkets.getMarketBaseDataByMarketHash(marketHash);\n\n        /* check that the market exists */\n        assert(marketBaseData.expirationDatetime != 0);\n\n        require (registerMarketTest(marketBaseData), 'register not possible');\n        registerMarketIntern(\n            marketBaseData,\n            marketHash,\n            testMarket\n        );\n    }\n\n    function registerMarketIntern (\n        DigiOptionsLib.MarketBaseData memory marketBaseData,\n        bytes32 marketHash,\n        bool testMarket\n    )\n        internal\n    {\n        bytes32 baseMarketHash = DigiOptionsLib.calcBaseMarketHash(marketBaseData);\n\n        if (marketsBest[baseMarketHash].openDelaySeconds == 0) {\n            // does not yet exist\n            marketsBest[baseMarketHash] = MarketBest(\n                {\n                marketHash: marketHash,\n                transactionFee0: marketBaseData.transactionFee0,\n                time: uint40(block.timestamp),\n                openDelaySeconds: openDelaySeconds\n                }\n            );\n\n            if (msg.sender == owner) {\n                isTestMarket[marketHash] = testMarket;\n            }\n\n            uint256 existingMarketsBit = (1 << uint256(marketBaseData.marketInterval)) << (marketBaseData.marketCategory * 8);\n            if (existingMarkets & existingMarketsBit == 0) {\n                existingMarkets = existingMarkets | existingMarketsBit;\n            }\n\n            uint8 marketIntervalForEventFilter;\n            if ((marketBaseData.config & uint8(FactsignerDefines.ConfigMask.ConfigIntervalTypeIsUsedMask) != 0)) {\n                /* interval used */\n                marketIntervalForEventFilter = marketBaseData.marketInterval;\n            } else {\n                /* interval unused */\n                marketIntervalForEventFilter = DigiOptionsLib.calcMarketInterval(marketBaseData.expirationDatetime);\n            }\n\n            // emit only once for each market (even if it will be replaced later)\n            emit MarketCreateLister(\n                baseMarketHash, // marketKey\n                ((marketBaseData.expirationDatetime/DigiOptionsLib.getDivider(marketIntervalForEventFilter)) << 8) + marketIntervalForEventFilter,\n                marketBaseData.expirationDatetime,\n                marketBaseData.marketInterval,\n                marketBaseData.marketCategory,\n                openDelaySeconds,\n                marketBaseData.underlyingString\n            );\n        } else if (\n            (marketBaseData.transactionFee0 > marketsBest[baseMarketHash].transactionFee0) &&\n            (block.timestamp <= marketsBest[baseMarketHash].time + marketsBest[baseMarketHash].openDelaySeconds)\n        ){\n            MarketBest storage marketBest = marketsBest[baseMarketHash];\n            marketBest.marketHash = marketHash;\n            marketBest.transactionFee0 = marketBaseData.transactionFee0;\n        }\n    }\n\n    function setTestMarket (\n        bytes32 marketHash,\n        bool testMarket\n    )\n        public\n        onlyOwner\n    {\n        isTestMarket[marketHash] = testMarket;\n    }\n\n    /*\n    function setOpenDelaySeconds (\n        uint16 openDelaySeconds_\n    )\n        public\n        onlyOwner\n    {\n        if (openDelaySeconds_ > 0) {\n            openDelaySeconds = openDelaySeconds_;\n        }\n    }\n    */\n\n    /*\n    function setTransactionFeeMax (\n        uint64 transactionFeeMax_\n    )\n        public\n        onlyOwner\n    {\n        transactionFeeMax = transactionFeeMax_;\n    }\n    */\n\n    function setSigner (\n        address addr,\n        uint256 value\n    )\n        public\n        onlyOwner\n    {\n        if (signerEntriesMap[addr].exists){\n            // just modify value\n            signerEntriesMap[addr].value = value;\n            return;\n        }\n\n        // add new entry at the head of the list\n        address addrTmp = signerAddrFirst;\n        signerEntriesMap[addr] = SignerListEntry({\n            value: value,\n            addrNext: addrTmp,\n            exists: true\n        });\n        signerAddrFirst = addr;\n        signerMapNumEntries = signerMapNumEntries + 1;\n    }\n}\n",
		"DigiOptionsBaseInterface.sol": "/*\n freedex-protocol / User Driven Option Markets Contract used by https://www.digioptions.com\n\n Base data structures and the interface functions that\n are implemented by both contracts (DigiOptionsMarkets and\n DigioptionsMarketLister)\n\n Public repository:\n https://github.com/berlincode/digioptions-contracts.js\n\n elastic.code@gmail.com\n mail@digioptions.com\n\n\n MIT License\n\n Copyright (c) digioptions.com (https://www.digioptions.com)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n*/\n\npragma solidity ^0.6.1;\npragma experimental ABIEncoderV2;\n\nimport \"factsigner/contracts/FactsignerDefines.sol\";\nimport \"factsigner/contracts/FactsignerVerify.sol\";\n//import_\"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"./SafeMath.sol\";\nimport \"./DigiOptionsLib.sol\";\n\nabstract contract DigiOptionsBaseInterface {\n\n    function getContractInfo (\n    )\n        external\n        virtual\n        returns (uint256[] memory contractInfoValues);\n\n    function getMarketDataByMarketHash (\n        address addr, // marketData.userState for this address\n        bytes32 marketHash\n    )\n        public\n        view\n        virtual\n        returns (DigiOptionsLib.MarketData memory marketData);\n\n    function getMarketDataListByMarketKeys (\n        address addr, // marketData.userState for this address\n        bytes32[] calldata marketKeys // marketsContract uses marketHash / marketListerContract uses baseMarketHash\n    )\n        external\n        view\n        virtual\n        returns (DigiOptionsLib.MarketData[] memory marketDataList);\n\n    // TODO implement createMarketTest\n\n    function createMarket (\n        DigiOptionsLib.MarketBaseData memory marketBaseData,\n        bool testMarket,\n        FactsignerVerify.Signature memory signature\n    )\n        public\n        virtual\n        returns (bytes32 marketHash);\n\n    function calcMarketInterval (\n        uint40 expirationDatetime\n    )\n        external\n        view\n        virtual\n        returns (uint8 interval);\n\n}\n",
		"factsigner/contracts/FactsignerDefines.sol": "/*\n Contract defines for https://www.factsigner.com\n\n Public repository:\n https://github.com/berlincode/factsigner\n\n Version 7.0.0\n\n\n MIT License\n\n Copyright (c) factsigner.com (https://www.factsigner.com)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n*/\n\npragma solidity ^0.6.1;\n\nlibrary FactsignerDefines\n{\n    // TODO we use a enum here as a hack until\n    // https://github.com/ethereum/solidity/issues/1290 is solved\n    enum ConfigMask {\n        ConfigMaskDummy0,\n        ConfigMarketTypeIsStrikedMask, // = 1\n        ConfigMaskDummy2,\n        ConfigMaskDummy3,\n        ConfigIntervalTypeIsUsedMask // = 4\n    }\n\n    enum SettlementType {\n        FINAL, // = 0\n        PRELIMINARY_FIRST // = 1\n        //PRELIMINARY_MAX // = 65535\n    }\n\n    enum MarketInterval {\n        NONE, // = 0\n        // the following constants are just proposed assignments\n        YEARLY, // = 1\n        QUATERLY, // 2\n        MONTHLY, // = 3\n        WEEKLY, // = 4\n        DAILY, // = 5\n        HOURLY, // = 6\n        SHORT_TERM // = 7\n    }\n\n}\n",
		"factsigner/contracts/FactsignerVerify.sol": "/*\n Signature validation for https://www.factsigner.com\n\n Public repository:\n https://github.com/berlincode/factsigner\n\n Version 7.0.0\n\n\n MIT License\n\n Copyright (c) factsigner.com (https://www.factsigner.com)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n*/\n\npragma solidity ^0.6.1;\n\nlibrary FactsignerVerify {\n\n    struct Signature {\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n    }\n\n    bytes constant factsignerPrefix = \"\\x19Factsigner Signed Message:\\n32\";\n    function verifyFactsignerMessage(\n        bytes32 message,\n        Signature memory signature\n    ) internal pure returns (address)\n    {\n        bytes32 prefixedHash = keccak256(\n            abi.encodePacked(\n                factsignerPrefix,\n                message\n            )\n        );\n        address signer = ecrecover(\n            prefixedHash,\n            signature.v,\n            signature.r,\n            signature.s\n        );\n        return signer;\n    }\n}\n",
		"SafeMath.sol": "pragma solidity ^0.6.1;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\n\n\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n",
		"DigiOptionsLib.sol": "pragma solidity ^0.6.1;\n\nimport \"factsigner/contracts/FactsignerDefines.sol\";\n\n//import_\"@openzeppelin/contracts/math/SafeMath.sol\";\n//import_\"@openzeppelin/contracts/drafts/SignedSafeMath.sol\";\nimport \"./SafeMath.sol\";\n//import \"./SignedSafeMath.sol\";\n\n\nlibrary DigiOptionsLib {\n    using SafeMath for uint256;\n\n    /*\n        For future updgrade we want getContractInfo() to remain its signature('getContractInfo(uint256[]')\n        so we declared the return values as dynamic list. The meaning of each entry is defined via\n        follwing enum.\n    */\n    enum InfoValues { // rename InfoContract\n        CONTRACT_TYPE_IDX, // 0\n        VERSION_MARKET_LISTER_IDX, // 1\n        VERSION_MARKETS_IDX, // 2\n        DIGIOPTIONS_MARKETS_ADDR_IDX, // 3\n        BLOCK_NUMBER_CREATED_IDX, // 4\n        TIMESTAMP_MARKET_CREATED_IDX, // 5\n        OFFER_MAX_BLOCKS_INTO_FUTURE_IDX, // 6\n        ATOMIC_OPTION_PAYOUT_WEI_EXP_IDX, // 7\n        EXISTING_MARKETS, // 8\n\n        MAX // meta info\n    }\n\n    enum InfoLister {\n        VERSION_MARKET_LISTER_IDX, // 0\n        OWNER_IDX,\n        TRANSACTION_FEE_MAX,\n        OPEN_DELAY_SECONDS,\n\n        MAX // meta info\n    }\n\n    enum ContractType {\n        UNKNOWN,\n        DIGIOPTIONSMARKETS, // == 1\n        DIGIOPTIONSMARKETLISTER // == 2\n    }\n\n    enum UserState {\n        NONE,\n        EXISTS,\n        PAYED_OUT\n    }\n\n    struct Signature {\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n    }\n\n    struct MarketBaseData {\n        /* constant core market data, part of marketHash calculation */\n\n        string underlyingString;\n        uint40 expirationDatetime; /* used for sorting contracts */\n        uint24 objectionPeriod; /* e.g. 3600 seconds */\n\n        uint8 config;\n        uint8 marketCategory;\n\n        uint8 baseUnitExp;\n        int8 ndigit;\n\n        address signerAddr; /* address used to check the signed result (e.g. of factsigner) */\n\n        uint8 marketInterval;\n        uint32 transactionFee0; /* fee in wei for every ether of value (payed by orderTaker) // TODO in wei? */\n        address feeTaker0;\n        uint32 transactionFee1; /* fee in wei for every ether of value (payed by orderTaker) */\n        uint32 transactionFeeSigner; /* fee in wei for every ether of value (payed by orderTaker) */\n        address feeTaker1;\n        int128[] strikes;\n    }\n\n    struct MarketState {\n        /* winningOptionID is only valid if settled == true */\n        uint128 fee; // total payed fee (for all fee takers)\n        uint16 winningOptionID;\n        bool settled;\n    }\n\n    struct MarketData {\n        MarketBaseData marketBaseData;\n        MarketState marketState;\n        bytes32 marketHash;\n        UserState userState;\n        bool testMarket; // only used by MarketLister\n    }\n\n\n// TODO remove long term? (and add 2-year?)\n// TODO remove uint8() conversion\n// TODO time offset between marketsContract and marketListerContract?\n\n    /* until const arrays are supported in solidity we use our custom function */\n    uint256 constant DIVIDER_ENTRY_BYTES = 6;\n    bytes constant DIVIDER_TABLE = \"\\\n\\x00\\x00\\x00\\x00\\x00\\x00\\\n\\x00\\x00\\x00\\xfa\\x7d\\x00\\\n\\x00\\x00\\x00\\x3b\\x53\\x80\\\n\\x00\\x00\\x00\\x0a\\x8c\\x00\\\n\\x00\\x00\\x00\\x01\\xfa\\x40\\\n\\x00\\x00\\x00\\x00\\x1c\\x20\\\n\\x00\\x00\\x00\\x00\\x00\\x00\\\n\";\n\n    function getDivider(\n        uint256 calculatedMarketInterval\n    )\n        internal\n        pure\n        returns (uint48)\n    {\n        bytes memory table = DIVIDER_TABLE;\n        uint offset = (calculatedMarketInterval + 1) * DIVIDER_ENTRY_BYTES;\n        uint48 value;\n        assembly {\n            value := mload(add(table, offset))\n        }\n\n        return value;\n    }\n\n\n// TODO this is only 'view' and not internal because of block.timestamp - maybe change that\n    function calcMarketInterval (\n        uint40 expirationDatetime\n    )\n        internal\n        view\n        returns (uint8 interval)\n    {\n        uint8 marketInterval;\n        uint256 secondsUntilExpiration = uint256(expirationDatetime).sub(uint256(block.timestamp));\n// TODO > or >= ?\n        require(secondsUntilExpiration < 730 * 24 * 60 * 60, \"too far in the future\");\n        if (secondsUntilExpiration > 45 * 24 * 60 * 60) // > 45 days\n            marketInterval = uint8(FactsignerDefines.MarketInterval.YEARLY);\n        else if (secondsUntilExpiration > 8 * 24 * 60 * 60) // > 8 days\n            marketInterval = uint8(FactsignerDefines.MarketInterval.MONTHLY);\n        else if (secondsUntilExpiration > 36 * 60 * 60) // > 36 hours\n            marketInterval = uint8(FactsignerDefines.MarketInterval.WEEKLY);\n        else if (secondsUntilExpiration > 2 * 60 * 60) // > 2 hours\n            marketInterval = uint8(FactsignerDefines.MarketInterval.DAILY);\n        else if (secondsUntilExpiration > 15 * 60) // > 15 min\n            marketInterval = uint8(FactsignerDefines.MarketInterval.HOURLY);\n        else\n            marketInterval = uint8(FactsignerDefines.MarketInterval.SHORT_TERM);\n\n        return marketInterval;\n    }\n\n    function calcFactHash (\n        DigiOptionsLib.MarketBaseData memory marketBaseData\n    )\n        internal\n        pure // this should be external (see https://github.com/ethereum/solidity/issues/5479)\n        returns (bytes32 factHash)\n    {\n        bytes memory data;\n        data = abi.encodePacked(\n            keccak256(abi.encodePacked(marketBaseData.underlyingString)), /* 'name' utf8 encoded */\n            marketBaseData.expirationDatetime, /* 'settlement' unix epoch seconds UTC */\n            marketBaseData.objectionPeriod, /* e.g. 3600 seconds */\n            marketBaseData.config,\n            marketBaseData.marketCategory,\n\n            marketBaseData.baseUnitExp, /* e.g. 18 -> baseUnit = 10**18 = 1000000000000000000 */\n            marketBaseData.ndigit /* 'ndigit' number of digits (may be negative) */\n        );\n        // if this is a named market we simply use strikes as factsigner's namedRanges\n        if ((marketBaseData.config & uint8(FactsignerDefines.ConfigMask.ConfigMarketTypeIsStrikedMask) == 0)) {\n            data = abi.encodePacked(\n                data,\n                marketBaseData.strikes\n            );\n        }\n        return keccak256(data);\n    }\n\n    function calcMarketHash (\n        DigiOptionsLib.MarketBaseData memory marketBaseData\n    )\n        internal\n        pure\n        returns (bytes32 marketHash)\n    {\n        bytes memory data;\n        data = abi.encodePacked(\n//TODO from facthash?\n            keccak256(abi.encodePacked(marketBaseData.underlyingString)), /* 'name' utf8 encoded */\n            marketBaseData.expirationDatetime, /* 'settlement' unix epoch seconds UTC */\n            marketBaseData.objectionPeriod, /* e.g. 3600 seconds */\n            marketBaseData.config,\n            marketBaseData.marketCategory,\n\n            marketBaseData.baseUnitExp, /* e.g. 18 -> baseUnit = 10**18 = 1000000000000000000 */\n            marketBaseData.ndigit, /* 'ndigit' number of digits (may be negative) */\n\n            marketBaseData.marketInterval,\n            // TODO feetaker but not transactionFee?\n            marketBaseData.feeTaker0,\n            marketBaseData.feeTaker1,\n            marketBaseData.signerAddr /* address used to check the signed result (e.g. of factsigner) */\n\n            // TODO? we need to add ALL MarketBaseData\n            //marketBaseData.transactionFee0, /* fee in wei for every ether of value (payed by orderTaker) */\n            //marketBaseData.transactionFee1//, /* fee in wei for every ether of value (payed by orderTaker) */\n            //marketBaseData.strikes\n        );\n        data = abi.encodePacked(\n            data,\n            marketBaseData.transactionFee0, /* fee in wei for every ether of value (payed by orderTaker) // TODO wei? */\n            marketBaseData.transactionFee1, /* fee in wei for every ether of value (payed by orderTaker) */\n            marketBaseData.transactionFeeSigner, /* fee in wei for every ether of value (payed by orderTaker) */\n            marketBaseData.strikes\n        );\n        return keccak256(data);\n    }\n\n    function calcBaseMarketHash (\n        MarketBaseData memory marketBaseData\n    )\n        internal\n        pure\n        returns (bytes32 baseMarketHash)\n    {\n        /* baseMarketHash is similar to marketHash but does not contain all elements. It's basically a factHash with added marketInterval */\n        bytes memory data;\n        data = abi.encodePacked(\n            keccak256(abi.encodePacked(marketBaseData.underlyingString)), /* 'name' utf8 encoded */\n            marketBaseData.expirationDatetime, /* 'settlement' unix epoch seconds UTC */\n            marketBaseData.objectionPeriod, /* e.g. 3600 seconds */\n            marketBaseData.config,\n            marketBaseData.marketCategory,\n\n            marketBaseData.baseUnitExp, /* e.g. 18 -> baseUnit = 10**18 = 1000000000000000000 */\n            marketBaseData.ndigit, /* 'ndigit' number of digits (may be negative) */\n\n            marketBaseData.marketInterval  // !! TODO\n// TODO add marketBaseData.signerAddr\n        );\n        // if this is a named market we simply use strikes as factsigner's namedRanges\n        if ((marketBaseData.config & uint8(FactsignerDefines.ConfigMask.ConfigMarketTypeIsStrikedMask) == 0)) {\n            data = abi.encodePacked(\n                data,\n                marketBaseData.strikes\n            );\n        }\n        return keccak256(data);\n\n    }\n\n\n    bytes constant OFFER_PREFIX = \"\\x19Ethereum Signed Message:\\n32\"; // TODO\n    function verifyOffer(\n        bytes32 message,\n        Signature memory signature\n    )\n        internal\n        pure\n        returns (address addr)\n    {\n        bytes32 prefixedHash = keccak256(\n            abi.encodePacked(\n                OFFER_PREFIX,\n                message\n            )\n        );\n        address signer = ecrecover(\n            prefixedHash,\n            signature.v,\n            signature.r,\n            signature.s\n        );\n        return signer;\n    }\n}\n",
		"DigiOptionsMarkets.sol": "/*\n freedex-protocol / User Driven Option Markets Contract used by https://www.digioptions.com\n\n Designed to work with signatures from [www.factsigner.com](https://www.factsigner.com)\n\n Public repository:\n https://github.com/berlincode/digioptions-contracts.js\n\n elastic.code@gmail.com\n mail@digioptions.com\n\n\n MIT License\n\n Copyright (c) digioptions.com (https://www.digioptions.com)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n*/\n\npragma solidity ^0.6.1;\npragma experimental ABIEncoderV2;\n\nimport \"./DigiOptionsBaseInterface.sol\";\nimport \"./DigiOptionsLib.sol\";\nimport \"./SafeCast.sol\";\nimport \"factsigner/contracts/FactsignerDefines.sol\";\nimport \"factsigner/contracts/FactsignerVerify.sol\";\n//import_\"@openzeppelin/contracts/math/SafeMath.sol\";\n//import_\"@openzeppelin/contracts/drafts/SignedSafeMath.sol\";\nimport \"./SafeMath.sol\";\nimport \"./SignedSafeMath.sol\";\n\n\ncontract DigiOptionsMarkets is DigiOptionsBaseInterface {\n    using SafeCast for int256;\n    using SafeCast for uint256;\n    using SafeCast for int128;\n    using SafeCast for uint128;\n    using SafeMath for uint256;\n    using SignedSafeMath for int256;\n\n    uint256 constant private VERSION = (\n        (0 << 32) + /* major */\n        (50 << 16) + /* minor */\n        0 /* bugfix */\n    );\n    uint256 constant private OFFER_MAX_BLOCKS_INTO_FUTURE = 12;\n\n    // each nanoOption is worth 10**9 = 1000000000 wei in case of win\n    uint256 constant private ATOMIC_OPTION_PAYOUT_WEI_EXP = 9;\n    int256 constant private ATOMIC_OPTION_PAYOUT_WEI = int256(uint256(10)**ATOMIC_OPTION_PAYOUT_WEI_EXP);\n\n    uint8 constant private RANGESTATE_NOT_USED = 0;\n    uint8 constant private RANGESTATE_TRADED = 1;\n    uint8 constant private RANGESTATE_PAYED_OUT = 2;\n\n    int256 constant private INT256_MAX = int256(~(uint256(1) << 255));\n\n    struct Position {\n        int128 value;\n        uint8 rangeState;\n    }\n\n    struct Market {\n        DigiOptionsLib.MarketState marketState;\n        DigiOptionsLib.MarketBaseData marketBaseData;\n        mapping(address => mapping(uint256 => Position)) positions; // position mapping for each user\n\n        mapping(bytes32 => uint256)  offersAccepted; // remember how many options from an offer are already taken\n    }\n\n    struct OrderOffer {\n        bytes32 marketHash;\n        uint16 optionID;\n        bool buy; // does the offer owner want to buy or sell options\n        uint256 pricePerOption;\n        uint256 size;\n        uint256 offerID;\n        uint256 blockExpires;\n        address offerOwner;\n    }\n\n    struct OrderOfferSigned {\n        OrderOffer orderOffer;\n        DigiOptionsLib.Signature signature;\n    }\n\n    /* variables */\n    uint256 private timestamp;\n    uint256 private blockNumber;\n    uint256 private existingMarkets; /* one bit for each marketCategory and marketInterval */\n\n    mapping(address => uint256) internal liquidityUser;\n    mapping(bytes32 => Market) internal markets;\n\n    mapping(address => uint32) internal userMarketsIdx;\n\n    event MarketCreate(\n        bytes32 marketKey, /* marketsContract stores marketHash ; marketListerContract stores baseMarketHash */\n        uint48 indexed expirationDatetimeFilter,\n        uint40 expirationDatetime,\n        uint8 indexed marketInterval,\n        uint8 indexed marketCategory,\n        string underlyingString\n    );\n    event MarketSettlement(\n        bytes32 marketHash\n    );\n    // this may result in liquidity change\n    event LiquidityAddWithdraw(address indexed addr, uint256 datetime, int256 amount);\n    event PositionChange(\n        // TODO optimize order for storage density?\n        uint256 indexed buyer,\n        uint256 indexed seller,\n        bytes32 indexed marketHash,\n        uint256 datetime, // TODO we might remove this and use info from block\n        uint16 optionID,\n        uint256 pricePerOption,\n        uint256 size,\n        bytes32 offerHash\n    );\n\n    /* This is the constructor */\n    constructor ()\n        public\n    {\n        blockNumber = block.number;\n        timestamp = block.timestamp;\n    }\n\n    /* TODO re-enabled after 0x-tools support solc-0.6.0\n    // default fallback\n    receive ()\n        external\n        payable\n    {\n        liquidityAdd();\n    }\n    */\n\n    function getContractInfo (\n    )\n        external\n        override\n        virtual\n        returns (uint256[] memory contractInfoValues)\n    {\n        uint256[] memory infoValues = new uint[](uint256(DigiOptionsLib.InfoValues.MAX));\n\n        infoValues[uint256(DigiOptionsLib.InfoValues.CONTRACT_TYPE_IDX)] = uint256(DigiOptionsLib.ContractType.DIGIOPTIONSMARKETS);\n        infoValues[uint256(DigiOptionsLib.InfoValues.VERSION_MARKET_LISTER_IDX)] = 0; // versionMarketLister\n        infoValues[uint256(DigiOptionsLib.InfoValues.VERSION_MARKETS_IDX)] = VERSION; // versionMarkets\n        infoValues[uint256(DigiOptionsLib.InfoValues.DIGIOPTIONS_MARKETS_ADDR_IDX)] = uint256(address(this)); // digiOptionsMarketsAddr\n        infoValues[uint256(DigiOptionsLib.InfoValues.BLOCK_NUMBER_CREATED_IDX)] = blockNumber; // blockNumberCreated\n        infoValues[uint256(DigiOptionsLib.InfoValues.TIMESTAMP_MARKET_CREATED_IDX)] = timestamp; // timestampMarketsCreated\n        infoValues[uint256(DigiOptionsLib.InfoValues.OFFER_MAX_BLOCKS_INTO_FUTURE_IDX)] = OFFER_MAX_BLOCKS_INTO_FUTURE;\n        infoValues[uint256(DigiOptionsLib.InfoValues.ATOMIC_OPTION_PAYOUT_WEI_EXP_IDX)] = ATOMIC_OPTION_PAYOUT_WEI_EXP;\n        infoValues[uint256(DigiOptionsLib.InfoValues.EXISTING_MARKETS)] = existingMarkets;\n\n        return infoValues;\n    }\n\n    // TODO test\n    function liquidityGet()\n        public\n        view\n        returns (uint256 liquidity)\n    {\n        return liquidityUser[msg.sender];\n    }\n\n    function liquidityWithdraw (uint256 amount) external {\n        require (amount <= liquidityUser[msg.sender], \"Not enough liquidity.\");\n\n        /* Remember to reduce the liquidity BEFORE */\n        /* sending to prevent re-entrancy attacks */\n        liquidityUser[msg.sender] = liquidityUser[msg.sender].sub(amount);\n        msg.sender.transfer(amount);\n        emit LiquidityAddWithdraw(msg.sender, block.timestamp, int256(-amount));\n    }\n\n    /* returns all relevant market data - if marketHash does not exist marketBaseData.expirationDatetime is 0*/\n    function getMarketDataByMarketHash (\n        address addr, // marketData.userState for this address\n        bytes32 marketHash\n    )\n        public\n        view\n        override\n        virtual\n        returns (DigiOptionsLib.MarketData memory marketData)\n    {\n        Market storage market = markets[marketHash];\n        DigiOptionsLib.MarketBaseData memory marketBaseData = market.marketBaseData;\n        DigiOptionsLib.MarketState memory marketState = market.marketState;\n\n        return DigiOptionsLib.MarketData({\n            marketBaseData: marketBaseData,\n            marketState: marketState,\n            marketHash: marketHash,\n            userState: getUserState(addr, market),\n            testMarket: false // only used by MarketLister\n        });\n    }\n\n    function getMarketBaseDataByMarketHash (bytes32 marketHash)\n        public\n        view\n        returns (DigiOptionsLib.MarketBaseData memory marketBaseData)\n    {\n        Market storage market = markets[marketHash];\n        return market.marketBaseData;\n    }\n\n    function getMarketDataListByMarketKeys (\n        address addr, // marketData.userState for this address\n        bytes32[] calldata marketKeys // marketsContract uses marketHash / marketListerContract uses baseMarketHash\n    )\n        external\n        view\n        override\n        virtual\n        returns (DigiOptionsLib.MarketData[] memory marketDataList)\n    {\n        marketDataList = new DigiOptionsLib.MarketData[](marketKeys.length);\n        uint256 idx;\n\n        for (idx= 0 ; idx < marketKeys.length ; idx++) {\n            marketDataList[idx] = getMarketDataByMarketHash(addr, marketKeys[idx]);\n        }\n        return marketDataList;\n    }\n\n    function calcMarketInterval (\n        uint40 expirationDatetime\n    )\n        external\n        view\n        override\n        virtual\n        returns (uint8 interval)\n    {\n        return DigiOptionsLib.calcMarketInterval(expirationDatetime);\n    }\n\n    function getUserState (\n        address addr,\n        Market storage market\n    )\n        internal\n        view\n        returns (DigiOptionsLib.UserState userState)\n    {\n        mapping(uint256 => Position) storage positions = market.positions[addr];\n\n        if (market.marketState.settled){\n            Position memory winningPosition = positions[market.marketState.winningOptionID];\n            if (\n                (winningPosition.rangeState == RANGESTATE_PAYED_OUT) ||\n                ((winningPosition.rangeState == RANGESTATE_TRADED) && (winningPosition.value == 0))  // TODO fixme == 0\n                ){\n                return DigiOptionsLib.UserState.PAYED_OUT;\n            }\n        }\n        // TODO this is not correct for named markets\n        for (uint256 optionID = 0; optionID <= market.marketBaseData.strikes.length; optionID++) {\n            if (positions[optionID].rangeState > RANGESTATE_NOT_USED) {\n                return DigiOptionsLib.UserState.EXISTS;\n            }\n        }\n        return DigiOptionsLib.UserState.NONE;\n    }\n\n    function getLiquidityAndPositions (bytes32 marketHash)\n        external\n        view\n        returns (uint256 liquidity, Position[] memory positions, DigiOptionsLib.UserState userState)\n    {\n        Market storage market = markets[marketHash];\n        DigiOptionsLib.MarketBaseData memory marketBaseData = market.marketBaseData;\n\n        // return user's total contract liquidity and positions for selected market\n        // TODO this is not correct for named markets\n        positions = new Position[](marketBaseData.strikes.length + 1);\n\n        for (uint256 optionID = 0; optionID <= marketBaseData.strikes.length; optionID++) {\n            positions[optionID] = market.positions[msg.sender][optionID];\n        }\n        return (\n            liquidityUser[msg.sender],\n            positions,\n            getUserState(msg.sender, market)\n        );\n    }\n\n    function liquidityAdd ()\n        public\n        payable\n    {\n        if (msg.value > 0) {\n            liquidityUser[msg.sender] = liquidityUser[msg.sender].add(msg.value);\n            emit LiquidityAddWithdraw(msg.sender, block.timestamp, int256(msg.value));\n        }\n    }\n\n    function createMarket (\n        DigiOptionsLib.MarketBaseData memory marketBaseData,\n        bool testMarket,\n        FactsignerVerify.Signature memory signature\n    )\n        public // this should be external (see https://github.com/ethereum/solidity/issues/5479)\n        override\n        returns (bytes32 marketHash)\n    {\n        assert(marketBaseData.expirationDatetime != 0);\n\n        { // scope here to safe stack space\n        bytes32 factHash = DigiOptionsLib.calcFactHash(marketBaseData);\n        require(\n            FactsignerVerify.verifyFactsignerMessage(\n                factHash,\n                signature\n            ) == marketBaseData.signerAddr,\n            \"Signature invalid.\"\n        );\n\n        marketHash = DigiOptionsLib.calcMarketHash(marketBaseData);\n        }\n\n        /* Check that the market does not already exists */\n        if (markets[marketHash].marketBaseData.expirationDatetime != 0)\n            return marketHash;\n\n        assert(marketBaseData.baseUnitExp == 18); // TODO remove this in the future\n\n        assert(marketBaseData.marketCategory < 64); // limit marketCategory (for now)\n\n        // TODO finney\n        assert((uint256(marketBaseData.transactionFee0)).add(uint256(marketBaseData.transactionFee1)).add(uint256(marketBaseData.transactionFeeSigner)) <= 50 finney); // max 5%\n\n        uint256 cnt; // TODO rename optionID\n        if ((marketBaseData.config & uint8(FactsignerDefines.ConfigMask.ConfigMarketTypeIsStrikedMask)) != 0) {\n            /* striked market */\n            /* check that we have at least one strike */\n            assert(marketBaseData.strikes.length > 0);\n            assert(marketBaseData.strikes.length < 32765); // our first optionID is 0\n\n            /* check strikes are ordered */\n            for (cnt = 1; cnt < marketBaseData.strikes.length; cnt++) {\n                assert(marketBaseData.strikes[cnt-1] < marketBaseData.strikes[cnt]);\n            }\n\n            /* check that the final settlement precision high enough for the supplied strikes */\n            assert(int16(marketBaseData.baseUnitExp) >= marketBaseData.ndigit);\n            for (cnt = 0; cnt < marketBaseData.strikes.length; cnt++) {\n                assert((marketBaseData.strikes[cnt] % int256(10**uint256((int256(marketBaseData.baseUnitExp)-marketBaseData.ndigit)))) == 0);\n            }\n        } else {\n            /* named market */\n            /* check that we have at least two named ranges */\n            assert(marketBaseData.strikes.length > 1);\n            assert(marketBaseData.strikes.length <= 32765); // our first optionID is 0\n        }\n        assert(marketBaseData.marketCategory < 32); // limit marketCategory (for now)\n\n        uint256 existingMarketsBit = (1 << uint256(marketBaseData.marketInterval)) << (marketBaseData.marketCategory * 8);\n        if (existingMarkets & existingMarketsBit == 0) {\n            existingMarkets = existingMarkets | existingMarketsBit;\n        }\n\n        uint8 marketIntervalForEventFilter = DigiOptionsLib.calcMarketInterval(marketBaseData.expirationDatetime);\n        if ((marketBaseData.config & uint8(FactsignerDefines.ConfigMask.ConfigIntervalTypeIsUsedMask) != 0)) {\n            /* interval used */\n            assert(marketBaseData.marketInterval == marketIntervalForEventFilter);\n        } else {\n            /* interval unused */\n            assert(marketBaseData.marketInterval == uint8(FactsignerDefines.MarketInterval.NONE));\n        }\n\n        markets[marketHash].marketBaseData = marketBaseData;\n\n\n        emit MarketCreate(\n            marketHash, // marketKey\n            ((marketBaseData.expirationDatetime/DigiOptionsLib.getDivider(marketIntervalForEventFilter)) << 8) + marketIntervalForEventFilter,\n            marketBaseData.expirationDatetime,\n            marketBaseData.marketInterval,\n            marketBaseData.marketCategory,\n            marketBaseData.underlyingString\n        );\n        return marketHash;\n    }\n\n    function settlement (\n        bytes32 marketHash, /* market to settle */\n        FactsignerVerify.Signature memory signature,\n        int256 value,\n        address[] memory users,\n        bytes32[] memory offerHash\n    )\n        public // this should be external (see https://github.com/ethereum/solidity/issues/5479)\n    {\n        Market storage market = markets[marketHash];\n\n        /* anybody with access to the signed value (from signerAddr) can settle the market */\n\n        require(\n            FactsignerVerify.verifyFactsignerMessage(\n                keccak256(\n                    abi.encodePacked(\n                        DigiOptionsLib.calcFactHash(market.marketBaseData),\n                        value,\n                        uint16(FactsignerDefines.SettlementType.FINAL)\n                    )\n                ),\n                signature\n            ) == market.marketBaseData.signerAddr,\n            \"Signature invalid.\"\n        );\n\n        // just return if already settled\n        if (market.marketState.settled)\n            return;\n\n        uint256 winningOptionID;\n        uint256 cnt;\n        if ((market.marketBaseData.config & uint8(FactsignerDefines.ConfigMask.ConfigMarketTypeIsStrikedMask)) != 0) {\n            /* striked market */\n            winningOptionID = market.marketBaseData.strikes.length;\n            for (cnt = 0; cnt < market.marketBaseData.strikes.length; cnt++) {\n                if (value < market.marketBaseData.strikes[cnt]) {\n                    winningOptionID = cnt;\n                    break;\n                }\n            }\n        } else {\n            /* named market */\n            winningOptionID = 0; // default in case nothing matches\n            for (cnt = 0; cnt < market.marketBaseData.strikes.length; cnt++) {\n                if (value == market.marketBaseData.strikes[cnt]) {\n                    winningOptionID = cnt;\n                    break;\n                }\n            }\n        }\n        // TODO one transaction\n        market.marketState.winningOptionID = uint16(winningOptionID);\n        market.marketState.settled = true;\n\n        emit MarketSettlement(marketHash);\n\n// TODO handle payout\n/*\n        // TODO split fee and add fee to feeTaker1, too\n        uint256 microOptionsTraded = market.fee.div( // TODO rename\n            uint256(market.marketBaseData.transactionFee0).add(uint256(market.marketBaseData.transactionFee1))..add(uint256(marketBaseData.transactionFeeSigner))\n        );\n        //liquidityUser[market.marketBaseData.feeTaker0] = liquidityUser[market.marketBaseData.feeTaker0].add(market.fee);\n*/\n        // TODO rename feeT\n        uint256 feeT = uint256(market.marketBaseData.transactionFee0).add(uint256(market.marketBaseData.transactionFee1)).add(uint256(market.marketBaseData.transactionFeeSigner));\n        if (feeT > 0){ // TODO remove?\n            // TODO rename a\n            uint256 a = uint256(market.marketState.fee) / feeT;\n            liquidityUser[market.marketBaseData.feeTaker0] = liquidityUser[market.marketBaseData.feeTaker0].add(a.mul(market.marketBaseData.transactionFee0));\n            liquidityUser[market.marketBaseData.feeTaker1] = liquidityUser[market.marketBaseData.feeTaker1].add(a.mul(market.marketBaseData.transactionFee1));\n            liquidityUser[market.marketBaseData.signerAddr] = liquidityUser[market.marketBaseData.signerAddr].add(a.mul(market.marketBaseData.transactionFeeSigner));\n        }\n/*\n        liquidityUser[market.marketBaseData.feeTaker1] = liquidityUser[market.marketBaseData.feeTaker1].add(microOptionsTraded.mul(market.marketBaseData.transactionFee1));\n\n        // emit event once if all users have been payed out\n        //emit MarketSettlement(marketHash);\n*/\n\n        freeLiquidity(\n            marketHash,\n            users,\n            offerHash // TODO offerHash\n        );\n    }\n\n    function freeLiquidity(\n        bytes32 marketHash,\n        address[] memory users,\n        bytes32[] memory offerHash\n    )\n        public\n    {\n        Market storage market = markets[marketHash];\n\n        DigiOptionsLib.MarketState memory marketState = market.marketState;\n\n        // TODO fetch marketState once\n        uint16 winningOptionID = marketState.winningOptionID;\n        require(marketState.settled == true, \"Market not yet settled.\");\n\n        uint256 idx;\n        int256 minPosition;\n        for (idx = 0; idx < users.length; idx++) {\n\n            address user = users[idx];\n            //mapping(uint256 => Position) storage positions = market.positions[user];\n\n            if (getUserState(user, market) != DigiOptionsLib.UserState.PAYED_OUT) {\n\n                minPosition = getMinPosition(\n                    market,\n                    user\n                );\n\n                int256 result = int256(market.positions[user][winningOptionID].value).sub(minPosition);\n\n                market.positions[user][winningOptionID].rangeState = RANGESTATE_PAYED_OUT;\n            \n                liquidityUser[user] = liquidityUser[user].add(result.mul(ATOMIC_OPTION_PAYOUT_WEI).castToUint());\n/*\n                emit PositionChange(\n                    //uint256(buyer) + uint256(market.userData[msg.sender].state),\n                    uint256(buyer),\n                    uint256(seller),\n                    orderOffer.marketHash,\n                    block.timestamp,\n                    orderOffer.optionID,\n                    orderOffer.pricePerOption,\n                    sizeAcceptPossible,\n                    offerHash\n                );\n*/\n            }\n\n        }\n    }\n\n    function orderExecuteTest (\n        OrderOfferSigned memory orderOfferSigned,\n        uint256 sizeAccept // TODO rename to sizeAcceptMax?\n    )\n        public\n        view\n        returns (\n            uint256 sizeAcceptPossible,\n            bytes32 offerHash,\n            int256 liquidityOfferOwner, // only valid if sizeAcceptPossible > 0\n            int256 liquidityOfferTaker, // only valid if sizeAcceptPossible > 0\n            uint256 transactionFeeAmount // only valid if sizeAcceptPossible > 0\n        )\n    {\n\n        OrderOffer memory orderOffer = orderOfferSigned.orderOffer;\n        Market storage market = markets[orderOffer.marketHash];\n\n        offerHash = keccak256(\n            abi.encodePacked(\n                address(this), // this checks that the signature is valid only for this contract\n                orderOffer.marketHash,\n                orderOffer.optionID,\n                orderOffer.buy,\n                orderOffer.pricePerOption,\n                orderOffer.size,\n                orderOffer.offerID,\n                orderOffer.blockExpires,\n                orderOffer.offerOwner\n            )\n        );\n        if (!(\n                (DigiOptionsLib.verifyOffer(\n                    offerHash,\n                    orderOfferSigned.signature\n                ) == orderOffer.offerOwner)\n            )) {\n            sizeAccept = 0;\n            // TODO return immediately?\n        }\n\n        if (market.offersAccepted[offerHash].add(sizeAccept) > orderOffer.size)\n            sizeAccept = orderOffer.size.sub(market.offersAccepted[offerHash]);\n\n        uint256 value = sizeAccept.mul(orderOffer.pricePerOption);\n// TODO precalcuate\n        transactionFeeAmount = sizeAccept.mul(\n            uint256(market.marketBaseData.transactionFee0).add(uint256(market.marketBaseData.transactionFee1)).add(uint256(market.marketBaseData.transactionFeeSigner))\n        );\n\n\n        liquidityOfferOwner = getLiquidityAfterTrade(\n            market,\n            orderOffer.buy,\n            orderOffer,\n            orderOffer.offerOwner,\n            sizeAccept,\n            value\n        );\n        liquidityOfferTaker = getLiquidityAfterTrade(\n            market,\n            !orderOffer.buy,\n            orderOffer,\n            msg.sender,\n            sizeAccept,\n            value\n        ).sub(transactionFeeAmount.castToInt());\n\n        if (!(\n                (orderOffer.optionID <= market.marketBaseData.strikes.length) && // TODO depends on striked or named market?\n                (block.number <= orderOffer.blockExpires) &&\n                (block.number.add(OFFER_MAX_BLOCKS_INTO_FUTURE) >= orderOffer.blockExpires) &&\n                // offerTaker and offerOwner must not be the same (because liquidity is calculated seperately)\n                (orderOffer.offerOwner != msg.sender) &&\n                (liquidityOfferOwner >= int256(0)) &&\n                (liquidityOfferTaker >= int256(0))\n            )) {\n            sizeAccept = 0;\n        }\n        return (\n            sizeAccept,\n            offerHash,\n            liquidityOfferOwner, // only valid if sizeAcceptPossible > 0\n            liquidityOfferTaker, // only valid if sizeAcceptPossible > 0\n            transactionFeeAmount // only valid if sizeAcceptPossible > 0\n        );\n    }\n\n    function orderExecuteSingle (\n        OrderOfferSigned memory orderOfferSigned,\n        uint256 sizeAcceptMax /* maximum */\n    )\n        private\n        returns (uint256 sizeAcceptRemain)\n    {\n        OrderOffer memory orderOffer;\n\n        orderOffer = orderOfferSigned.orderOffer;\n        bytes32 offerHash;\n        uint256 sizeAcceptPossible;\n\n        Market storage market = markets[orderOffer.marketHash];\n\n        address buyer; // buys options / money giver\n        address seller; // sells options / money getter\n        if (orderOffer.buy) {\n            buyer = orderOffer.offerOwner;\n            seller = msg.sender;\n        } else {\n            buyer = msg.sender;\n            seller = orderOffer.offerOwner;\n        }\n\n        int256 liquidityOfferOwner; // only valid if sizeAcceptPossible > 0\n        int256 liquidityOfferTaker; // only valid if sizeAcceptPossible > 0\n        uint256 transactionFeeAmount; // only valid if sizeAcceptPossible > 0\n        (\n            sizeAcceptPossible,\n            offerHash,\n            liquidityOfferOwner, // only valid if sizeAcceptPossible > 0\n            liquidityOfferTaker, // only valid if sizeAcceptPossible > 0\n            transactionFeeAmount // only valid if sizeAcceptPossible > 0\n        ) = orderExecuteTest (\n            orderOfferSigned,\n            sizeAcceptMax\n        );\n        if (sizeAcceptPossible == 0) {\n            return sizeAcceptMax;\n        }\n\n        liquidityUser[orderOffer.offerOwner] = liquidityOfferOwner.castToUint();\n        liquidityUser[msg.sender] = liquidityOfferTaker.castToUint();\n        market.marketState.fee = uint256(market.marketState.fee).add(transactionFeeAmount).castToUint128(); // TODO\n\n        {\n        // update positions\n        Position memory pos;\n        {\n            mapping(uint256 => Position) storage positions = market.positions[buyer];\n            pos = positions[orderOffer.optionID];\n            pos.rangeState = RANGESTATE_TRADED;\n            pos.value = int256(pos.value).add(int256(sizeAcceptPossible)).castToInt128();\n            positions[orderOffer.optionID] = pos;\n        }\n\n        {\n            mapping(uint256 => Position) storage positions = market.positions[seller];\n            pos = positions[orderOffer.optionID];\n            pos.value = int256(pos.value).sub(int256(sizeAcceptPossible)).castToInt128();\n            pos.rangeState = RANGESTATE_TRADED;\n            positions[orderOffer.optionID] = pos;\n        }\n        }\n\n        // remember that (some amount of) the offers is taken\n        market.offersAccepted[offerHash] = market.offersAccepted[offerHash].add(sizeAcceptPossible);\n\n        emit PositionChange(\n            //uint256(buyer) + uint256(market.userData[msg.sender].state),\n            uint256(buyer),\n            uint256(seller),\n            orderOffer.marketHash,\n            block.timestamp,\n            orderOffer.optionID,\n            orderOffer.pricePerOption,\n            sizeAcceptPossible,\n            offerHash\n        );\n\n        return sizeAcceptMax.sub(sizeAcceptPossible);\n    }\n\n    // OrderOfferSigned array should contain only sell orders or only buys orders for the same optionID and marketHash (not mixed)\n    function orderExecute (\n        OrderOfferSigned[] memory orderOfferSignedList,\n        uint256 sizeAcceptMax /* maximum for all supplied orderOfferSigned structs */\n    )\n        public // this should be external (see https://github.com/ethereum/solidity/issues/5479)\n    {\n        OrderOfferSigned memory orderOfferSigned;\n\n        for (uint256 orderOfferIdx=0; orderOfferIdx < orderOfferSignedList.length; orderOfferIdx++) {\n            orderOfferSigned = orderOfferSignedList[orderOfferIdx];\n\n            //Market storage market = markets[orderOfferSigned.orderOffer.marketHash];\n\n            sizeAcceptMax = orderExecuteSingle (\n                orderOfferSigned,\n                sizeAcceptMax\n            );\n        }\n    }\n\n    function getLiquidityAfterTrade(\n        Market storage market,\n        bool isBuyer,\n        OrderOffer memory orderOffer,\n        address userAddr,\n        uint256 sizeAccept,\n        uint256 value\n    )\n        internal\n        view\n        returns (int256 _liquidity)\n    {\n        int256 liquidity = liquidityUser[userAddr].castToInt();\n        int256 sizeAccept_;\n\n        if (! isBuyer) {\n            liquidity = liquidity.add(value.castToInt()); // seller gets money\n            sizeAccept_ = int256(0).sub(sizeAccept.castToInt());\n        } else {\n            liquidity = liquidity.sub(value.castToInt()); // buyer pays money\n            sizeAccept_ = sizeAccept.castToInt();\n        }\n\n        int256 minPositionBeforeTrade;\n        int256 minPositionAfterTrade;\n        (minPositionBeforeTrade, minPositionAfterTrade) = getMinPositionAfterTrade(\n            market,\n            userAddr,\n            orderOffer.optionID,\n            sizeAccept_\n        );\n\n        liquidity = liquidity.add((minPositionAfterTrade.sub(minPositionBeforeTrade)).mul(ATOMIC_OPTION_PAYOUT_WEI));\n\n        return liquidity;\n    }\n\n    function getMinPositionAfterTrade (\n        Market storage market,\n        address userAddr,\n        /* optional to calc the minimal position after a change */\n        uint16 optionID,\n        int256 positionChange\n    ) internal view\n        returns (int256 minPositionBeforeTrade_, int256 minPositionAfterTrade_)\n    {\n        int256 minPositionBeforeTrade = INT256_MAX;\n        int256 minPositionAfterTrade = INT256_MAX;\n\n        uint256 length = market.marketBaseData.strikes.length;\n        mapping(uint256 => Position) storage positions = market.positions[userAddr];\n        int256 position;\n        for (uint256 s = 0; s <= length; s++) {\n\n            position = positions[s].value;\n            if (position < minPositionBeforeTrade)\n                minPositionBeforeTrade = position;\n\n            if (s == optionID)\n                position = position.add(positionChange);\n\n            if (position < minPositionAfterTrade)\n                minPositionAfterTrade = position;\n        }\n        return (minPositionBeforeTrade, minPositionAfterTrade);\n    }\n\n    function getMinPosition (\n        Market storage market,\n        address userAddr\n    ) internal view\n        returns (int256 minPosition_)\n    {\n        int256 minPosition = INT256_MAX;\n\n        uint256 length = market.marketBaseData.strikes.length;\n        mapping(uint256 => Position) storage positions = market.positions[userAddr];\n        int256 position;\n        for (uint256 s = 0; s <= length; s++) {\n\n            position = positions[s].value;\n            if (position < minPosition)\n                minPosition = position;\n\n        }\n        return (minPosition);\n    }\n\n}\n",
		"SafeCast.sol": "pragma solidity ^0.6.1;\n\n\nlibrary SafeCast {\n    /**\n     * Cast unsigned a to signed a.\n     */\n    function castToInt(uint256 a) internal pure returns(int256) {\n        assert(a < (1 << 255));\n        return int(a);\n    }\n\n    /**\n     * Cast signed a to unsigned a.\n     */\n    function castToUint(int256 a) internal pure returns(uint256) {\n        assert(a >= 0);\n        return uint(a);\n    }\n\n    // TODO FIXME\n    function castToInt128(int256 a) internal pure returns(int128) {\n        //assert(a < (1 << 255));\n        return int128(a);\n    }\n\n    // TODO FIXME\n    function castToUint128(uint256 a) internal pure returns(uint128) {\n        //assert(a < (1 << 255));\n        return uint128(a);\n    }\n}\n",
		"SignedSafeMath.sol": "pragma solidity ^0.6.1;\n\n/**\n * @title SignedSafeMath\n * @dev Signed math operations with safety checks that revert on error.\n */\n\n\nlibrary SignedSafeMath {\n    int256 constant private INT256_MIN = -2**255;\n\n    /**\n     * @dev Multiplies two signed integers, reverts on overflow.\n     */\n    function mul(int256 a, int256 b) internal pure returns (int256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        require(!(a == -1 && b == INT256_MIN), \"SignedSafeMath: multiplication overflow\");\n\n        int256 c = a * b;\n        require(c / a == b, \"SignedSafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two signed integers truncating the quotient, reverts on division by zero.\n     */\n    function div(int256 a, int256 b) internal pure returns (int256) {\n        require(b != 0, \"SignedSafeMath: division by zero\");\n        require(!(b == -1 && a == INT256_MIN), \"SignedSafeMath: division overflow\");\n\n        int256 c = a / b;\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two signed integers, reverts on overflow.\n     */\n    function sub(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a - b;\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \"SignedSafeMath: subtraction overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two signed integers, reverts on overflow.\n     */\n    function add(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a + b;\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \"SignedSafeMath: addition overflow\");\n\n        return c;\n    }\n}\n"
	},
	"sourceTreeHashHex": "0x5d879cfd3d2569213f15d10c7dd270b56bd0300d0f88c648cc3fb7dca7e0c8d8",
	"compiler": {
		"name": "solc",
		"version": "soljson-v0.6.3+commit.8dda9521.js",
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 20000,
				"details": {
					"yul": true,
					"deduplicate": true,
					"cse": true,
					"constantOptimizer": true
				}
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap"
					]
				}
			},
			"remappings": [
				"factsigner=/home/ulf/github/digioptions-contracts.js/node_modules/factsigner"
			]
		}
	},
	"chains": {}
}