{
	"schemaVersion": "2.0.0",
	"contractName": "DigiOptionsTest",
	"compilerOutput": {
		"abi": [
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "string",
								"name": "underlyingString",
								"type": "string"
							},
							{
								"internalType": "uint40",
								"name": "expirationDatetime",
								"type": "uint40"
							},
							{
								"internalType": "uint24",
								"name": "objectionPeriod",
								"type": "uint24"
							},
							{
								"internalType": "uint8",
								"name": "config",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "marketCategory",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "baseUnitExp",
								"type": "uint8"
							},
							{
								"internalType": "int8",
								"name": "ndigit",
								"type": "int8"
							},
							{
								"internalType": "address",
								"name": "signerAddr",
								"type": "address"
							},
							{
								"internalType": "uint8",
								"name": "marketInterval",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "transactionFee0",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "transactionFee1",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "transactionFeeSigner",
								"type": "uint8"
							},
							{
								"internalType": "address",
								"name": "feeTaker0",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "feeTaker1",
								"type": "address"
							},
							{
								"internalType": "int128[]",
								"name": "strikes",
								"type": "int128[]"
							}
						],
						"internalType": "struct DigiOptionsLib.MarketBaseData",
						"name": "marketBaseData",
						"type": "tuple"
					}
				],
				"name": "calcBaseMarketHash",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "baseMarketHash",
						"type": "bytes32"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "string",
								"name": "underlyingString",
								"type": "string"
							},
							{
								"internalType": "uint40",
								"name": "expirationDatetime",
								"type": "uint40"
							},
							{
								"internalType": "uint24",
								"name": "objectionPeriod",
								"type": "uint24"
							},
							{
								"internalType": "uint8",
								"name": "config",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "marketCategory",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "baseUnitExp",
								"type": "uint8"
							},
							{
								"internalType": "int8",
								"name": "ndigit",
								"type": "int8"
							},
							{
								"internalType": "address",
								"name": "signerAddr",
								"type": "address"
							},
							{
								"internalType": "uint8",
								"name": "marketInterval",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "transactionFee0",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "transactionFee1",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "transactionFeeSigner",
								"type": "uint8"
							},
							{
								"internalType": "address",
								"name": "feeTaker0",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "feeTaker1",
								"type": "address"
							},
							{
								"internalType": "int128[]",
								"name": "strikes",
								"type": "int128[]"
							}
						],
						"internalType": "struct DigiOptionsLib.MarketBaseData",
						"name": "marketBaseData",
						"type": "tuple"
					}
				],
				"name": "calcFactHashTest",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "marketHash",
						"type": "bytes32"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "string",
								"name": "underlyingString",
								"type": "string"
							},
							{
								"internalType": "uint40",
								"name": "expirationDatetime",
								"type": "uint40"
							},
							{
								"internalType": "uint24",
								"name": "objectionPeriod",
								"type": "uint24"
							},
							{
								"internalType": "uint8",
								"name": "config",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "marketCategory",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "baseUnitExp",
								"type": "uint8"
							},
							{
								"internalType": "int8",
								"name": "ndigit",
								"type": "int8"
							},
							{
								"internalType": "address",
								"name": "signerAddr",
								"type": "address"
							},
							{
								"internalType": "uint8",
								"name": "marketInterval",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "transactionFee0",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "transactionFee1",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "transactionFeeSigner",
								"type": "uint8"
							},
							{
								"internalType": "address",
								"name": "feeTaker0",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "feeTaker1",
								"type": "address"
							},
							{
								"internalType": "int128[]",
								"name": "strikes",
								"type": "int128[]"
							}
						],
						"internalType": "struct DigiOptionsLib.MarketBaseData",
						"name": "marketBaseData",
						"type": "tuple"
					}
				],
				"name": "calcMarketHashTest",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "marketHash",
						"type": "bytes32"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint40",
						"name": "expirationDatetime",
						"type": "uint40"
					}
				],
				"name": "calcMarketIntervalTest",
				"outputs": [
					{
						"internalType": "uint8",
						"name": "interval",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "calculatedMarketInterval",
						"type": "uint256"
					}
				],
				"name": "getDividerTest",
				"outputs": [
					{
						"internalType": "uint48",
						"name": "",
						"type": "uint48"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			}
		],
		"evm": {
			"bytecode": {
				"generatedSources": [],
				"linkReferences": {},
				"object": "0x608060405234801561001057600080fd5b50610d73806100206000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c8063b8a4bf1f11610050578063b8a4bf1f146100b5578063f5299fda146100d5578063fe0a7fa9146100e857610067565b80631dcb4ca91461006c578063b04f77c714610095575b600080fd5b61007f61007a366004610b1a565b6100fb565b60405161008c9190610cc5565b60405180910390f35b6100a86100a3366004610cab565b61010e565b60405161008c9190610ce1565b6100c86100c3366004610c93565b610119565b60405161008c9190610cce565b61007f6100e3366004610b1a565b610124565b61007f6100f6366004610b1a565b61012f565b60006101068261013a565b90505b919050565b6000610106826103ec565b6000610106826104dc565b60006101068261050a565b60006101068261076c565b6000606082600001516040516020018082805190602001908083835b6020831061019357805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101610156565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040528051906020012083602001518460400151856060015186608001518760a001518860c001518961010001518a61018001518b6101a001518c60e00151604051602001808c81526020018b64ffffffffff1660d81b81526005018a62ffffff1660e81b81526003018960ff1660f81b81526001018860ff1660f81b81526001018760ff1660f81b81526001018660000b60f81b81526001018560ff1660f81b81526001018473ffffffffffffffffffffffffffffffffffffffff1660601b81526014018373ffffffffffffffffffffffffffffffffffffffff1660601b81526014018273ffffffffffffffffffffffffffffffffffffffff1660601b81526014019b505050505050505050505050604051602081830303815290604052905080836101200151846101400151856101600151866101c001516040516020018086805190602001908083835b6020831061034e57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101610311565b6001836020036101000a0380198251168184511680821785525050505050509050018560ff1660f81b81526001018460ff1660f81b81526001018360ff1660f81b8152600101828051906020019060200280838360005b838110156103bd5781810151838201526020016103a5565b505050509050019550505050505060405160208183030381529060405290508080519060200120915050919050565b6000808061040164ffffffffff8516426108a0565b90506303c26700811061047557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f746f6f2066617220696e20746865206675747572650000000000000000000000604482015290519081900360640190fd5b623b538081111561048a5760015b91506104d5565b620a8c0081111561049c576003610483565b6201fa408111156104ae576004610483565b611c208111156104bf576005610483565b6103848111156104d0576006610483565b600791505b5092915050565b600060606040518060600160405280602a8152602001610d14602a9139600184016006020151915050919050565b6000606082600001516040516020018082805190602001908083835b6020831061056357805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101610526565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040528051906020012083602001518460400151856060015186608001518760a001518860c001518961010001518a60e00151604051602001808a81526020018964ffffffffff1660d81b81526005018862ffffff1660e81b81526003018760ff1660f81b81526001018660ff1660f81b81526001018560ff1660f81b81526001018460000b60f81b81526001018360ff1660f81b81526001018273ffffffffffffffffffffffffffffffffffffffff1660601b8152601401995050505050505050505060405160208183030381529060405290506001600481111561067657fe5b83606001511660ff166000141561075e5780836101c001516040516020018083805190602001908083835b602083106106de57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016106a1565b51815160209384036101000a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01801990921691161790528551919093019285810192500280838360005b83811015610741578181015183820152602001610729565b505050509050019250505060405160208183030381529060405290505b805160209091012092915050565b6000606082600001516040516020018082805190602001908083835b602083106107c557805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101610788565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040528051906020012083602001518460400151856060015186608001518760a001518860c00151604051602001808881526020018764ffffffffff1660d81b81526005018662ffffff1660e81b81526003018560ff1660f81b81526001018460ff1660f81b81526001018360ff1660f81b81526001018260000b60f81b815260010197505050505050505060405160208183030381529060405290506001600481111561067657fe5b60006108e283836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506108e9565b9392505050565b60008184841115610992576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561095757818101518382015260200161093f565b50505050905090810190601f1680156109845780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b803573ffffffffffffffffffffffffffffffffffffffff8116811461010957600080fd5b600082601f8301126109ce578081fd5b813567ffffffffffffffff8111156109e257fe5b60208082026109f2828201610cef565b83815293508184018583018287018401881015610a0e57600080fd5b60009250825b85811015610a3e57813580600f0b8114610a2c578485fd5b83529184019190840190600101610a14565b50505050505092915050565b8035600081900b811461010957600080fd5b600082601f830112610a6c578081fd5b813567ffffffffffffffff811115610a8057fe5b610ab160207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601610cef565b9150808252836020828501011115610ac857600080fd5b8060208401602084013760009082016020015292915050565b803562ffffff8116811461010957600080fd5b803564ffffffffff8116811461010957600080fd5b803560ff8116811461010957600080fd5b600060208284031215610b2b578081fd5b813567ffffffffffffffff80821115610b42578283fd5b81840191506101e0808387031215610b58578384fd5b610b6181610cef565b9050823582811115610b71578485fd5b610b7d87828601610a5c565b825250610b8c60208401610af4565b6020820152610b9d60408401610ae1565b6040820152610bae60608401610b09565b6060820152610bbf60808401610b09565b6080820152610bd060a08401610b09565b60a0820152610be160c08401610a4a565b60c0820152610bf260e0840161099a565b60e0820152610100610c05818501610b09565b90820152610120610c17848201610b09565b90820152610140610c29848201610b09565b90820152610160610c3b848201610b09565b90820152610180610c4d84820161099a565b908201526101a0610c5f84820161099a565b908201526101c08381013583811115610c76578586fd5b610c82888287016109be565b918301919091525095945050505050565b600060208284031215610ca4578081fd5b5035919050565b600060208284031215610cbc578081fd5b6108e282610af4565b90815260200190565b65ffffffffffff91909116815260200190565b60ff91909116815260200190565b60405181810167ffffffffffffffff81118282101715610d0b57fe5b60405291905056fe000000000000000000fa7d000000003b53800000000a8c0000000001fa40000000001c20000000000000a2646970667358221220e2778a377fde72a6fdbd693e158626b8b7d0d32d6db96daec05387d39fd721d164736f6c63430007040033",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD73 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x67 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xB8A4BF1F GT PUSH2 0x50 JUMPI DUP1 PUSH4 0xB8A4BF1F EQ PUSH2 0xB5 JUMPI DUP1 PUSH4 0xF5299FDA EQ PUSH2 0xD5 JUMPI DUP1 PUSH4 0xFE0A7FA9 EQ PUSH2 0xE8 JUMPI PUSH2 0x67 JUMP JUMPDEST DUP1 PUSH4 0x1DCB4CA9 EQ PUSH2 0x6C JUMPI DUP1 PUSH4 0xB04F77C7 EQ PUSH2 0x95 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7F PUSH2 0x7A CALLDATASIZE PUSH1 0x4 PUSH2 0xB1A JUMP JUMPDEST PUSH2 0xFB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8C SWAP2 SWAP1 PUSH2 0xCC5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xA8 PUSH2 0xA3 CALLDATASIZE PUSH1 0x4 PUSH2 0xCAB JUMP JUMPDEST PUSH2 0x10E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8C SWAP2 SWAP1 PUSH2 0xCE1 JUMP JUMPDEST PUSH2 0xC8 PUSH2 0xC3 CALLDATASIZE PUSH1 0x4 PUSH2 0xC93 JUMP JUMPDEST PUSH2 0x119 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8C SWAP2 SWAP1 PUSH2 0xCCE JUMP JUMPDEST PUSH2 0x7F PUSH2 0xE3 CALLDATASIZE PUSH1 0x4 PUSH2 0xB1A JUMP JUMPDEST PUSH2 0x124 JUMP JUMPDEST PUSH2 0x7F PUSH2 0xF6 CALLDATASIZE PUSH1 0x4 PUSH2 0xB1A JUMP JUMPDEST PUSH2 0x12F JUMP JUMPDEST PUSH1 0x0 PUSH2 0x106 DUP3 PUSH2 0x13A JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x106 DUP3 PUSH2 0x3EC JUMP JUMPDEST PUSH1 0x0 PUSH2 0x106 DUP3 PUSH2 0x4DC JUMP JUMPDEST PUSH1 0x0 PUSH2 0x106 DUP3 PUSH2 0x50A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x106 DUP3 PUSH2 0x76C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 PUSH1 0x0 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x193 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x156 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP4 PUSH1 0x20 ADD MLOAD DUP5 PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0x60 ADD MLOAD DUP7 PUSH1 0x80 ADD MLOAD DUP8 PUSH1 0xA0 ADD MLOAD DUP9 PUSH1 0xC0 ADD MLOAD DUP10 PUSH2 0x100 ADD MLOAD DUP11 PUSH2 0x180 ADD MLOAD DUP12 PUSH2 0x1A0 ADD MLOAD DUP13 PUSH1 0xE0 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP13 DUP2 MSTORE PUSH1 0x20 ADD DUP12 PUSH5 0xFFFFFFFFFF AND PUSH1 0xD8 SHL DUP2 MSTORE PUSH1 0x5 ADD DUP11 PUSH3 0xFFFFFF AND PUSH1 0xE8 SHL DUP2 MSTORE PUSH1 0x3 ADD DUP10 PUSH1 0xFF AND PUSH1 0xF8 SHL DUP2 MSTORE PUSH1 0x1 ADD DUP9 PUSH1 0xFF AND PUSH1 0xF8 SHL DUP2 MSTORE PUSH1 0x1 ADD DUP8 PUSH1 0xFF AND PUSH1 0xF8 SHL DUP2 MSTORE PUSH1 0x1 ADD DUP7 PUSH1 0x0 SIGNEXTEND PUSH1 0xF8 SHL DUP2 MSTORE PUSH1 0x1 ADD DUP6 PUSH1 0xFF AND PUSH1 0xF8 SHL DUP2 MSTORE PUSH1 0x1 ADD DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 SHL DUP2 MSTORE PUSH1 0x14 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 SHL DUP2 MSTORE PUSH1 0x14 ADD DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 SHL DUP2 MSTORE PUSH1 0x14 ADD SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP DUP1 DUP4 PUSH2 0x120 ADD MLOAD DUP5 PUSH2 0x140 ADD MLOAD DUP6 PUSH2 0x160 ADD MLOAD DUP7 PUSH2 0x1C0 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP7 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x34E JUMPI DUP1 MLOAD DUP3 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x311 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD DUP6 PUSH1 0xFF AND PUSH1 0xF8 SHL DUP2 MSTORE PUSH1 0x1 ADD DUP5 PUSH1 0xFF AND PUSH1 0xF8 SHL DUP2 MSTORE PUSH1 0x1 ADD DUP4 PUSH1 0xFF AND PUSH1 0xF8 SHL DUP2 MSTORE PUSH1 0x1 ADD DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3BD JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x3A5 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP6 POP POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH2 0x401 PUSH5 0xFFFFFFFFFF DUP6 AND TIMESTAMP PUSH2 0x8A0 JUMP JUMPDEST SWAP1 POP PUSH4 0x3C26700 DUP2 LT PUSH2 0x475 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x746F6F2066617220696E20746865206675747572650000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH3 0x3B5380 DUP2 GT ISZERO PUSH2 0x48A JUMPI PUSH1 0x1 JUMPDEST SWAP2 POP PUSH2 0x4D5 JUMP JUMPDEST PUSH3 0xA8C00 DUP2 GT ISZERO PUSH2 0x49C JUMPI PUSH1 0x3 PUSH2 0x483 JUMP JUMPDEST PUSH3 0x1FA40 DUP2 GT ISZERO PUSH2 0x4AE JUMPI PUSH1 0x4 PUSH2 0x483 JUMP JUMPDEST PUSH2 0x1C20 DUP2 GT ISZERO PUSH2 0x4BF JUMPI PUSH1 0x5 PUSH2 0x483 JUMP JUMPDEST PUSH2 0x384 DUP2 GT ISZERO PUSH2 0x4D0 JUMPI PUSH1 0x6 PUSH2 0x483 JUMP JUMPDEST PUSH1 0x7 SWAP2 POP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2A DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xD14 PUSH1 0x2A SWAP2 CODECOPY PUSH1 0x1 DUP5 ADD PUSH1 0x6 MUL ADD MLOAD SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 PUSH1 0x0 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x563 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x526 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP4 PUSH1 0x20 ADD MLOAD DUP5 PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0x60 ADD MLOAD DUP7 PUSH1 0x80 ADD MLOAD DUP8 PUSH1 0xA0 ADD MLOAD DUP9 PUSH1 0xC0 ADD MLOAD DUP10 PUSH2 0x100 ADD MLOAD DUP11 PUSH1 0xE0 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP11 DUP2 MSTORE PUSH1 0x20 ADD DUP10 PUSH5 0xFFFFFFFFFF AND PUSH1 0xD8 SHL DUP2 MSTORE PUSH1 0x5 ADD DUP9 PUSH3 0xFFFFFF AND PUSH1 0xE8 SHL DUP2 MSTORE PUSH1 0x3 ADD DUP8 PUSH1 0xFF AND PUSH1 0xF8 SHL DUP2 MSTORE PUSH1 0x1 ADD DUP7 PUSH1 0xFF AND PUSH1 0xF8 SHL DUP2 MSTORE PUSH1 0x1 ADD DUP6 PUSH1 0xFF AND PUSH1 0xF8 SHL DUP2 MSTORE PUSH1 0x1 ADD DUP5 PUSH1 0x0 SIGNEXTEND PUSH1 0xF8 SHL DUP2 MSTORE PUSH1 0x1 ADD DUP4 PUSH1 0xFF AND PUSH1 0xF8 SHL DUP2 MSTORE PUSH1 0x1 ADD DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 SHL DUP2 MSTORE PUSH1 0x14 ADD SWAP10 POP POP POP POP POP POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP PUSH1 0x1 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x676 JUMPI INVALID JUMPDEST DUP4 PUSH1 0x60 ADD MLOAD AND PUSH1 0xFF AND PUSH1 0x0 EQ ISZERO PUSH2 0x75E JUMPI DUP1 DUP4 PUSH2 0x1C0 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x6DE JUMPI DUP1 MLOAD DUP3 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x6A1 JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 DUP5 SUB PUSH2 0x100 EXP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE DUP6 MLOAD SWAP2 SWAP1 SWAP4 ADD SWAP3 DUP6 DUP2 ADD SWAP3 POP MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x741 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x729 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP JUMPDEST DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 PUSH1 0x0 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x7C5 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x788 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP4 PUSH1 0x20 ADD MLOAD DUP5 PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0x60 ADD MLOAD DUP7 PUSH1 0x80 ADD MLOAD DUP8 PUSH1 0xA0 ADD MLOAD DUP9 PUSH1 0xC0 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP9 DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH5 0xFFFFFFFFFF AND PUSH1 0xD8 SHL DUP2 MSTORE PUSH1 0x5 ADD DUP7 PUSH3 0xFFFFFF AND PUSH1 0xE8 SHL DUP2 MSTORE PUSH1 0x3 ADD DUP6 PUSH1 0xFF AND PUSH1 0xF8 SHL DUP2 MSTORE PUSH1 0x1 ADD DUP5 PUSH1 0xFF AND PUSH1 0xF8 SHL DUP2 MSTORE PUSH1 0x1 ADD DUP4 PUSH1 0xFF AND PUSH1 0xF8 SHL DUP2 MSTORE PUSH1 0x1 ADD DUP3 PUSH1 0x0 SIGNEXTEND PUSH1 0xF8 SHL DUP2 MSTORE PUSH1 0x1 ADD SWAP8 POP POP POP POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP PUSH1 0x1 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x676 JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH2 0x8E2 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1E DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 DUP2 MSTORE POP PUSH2 0x8E9 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP5 DUP5 GT ISZERO PUSH2 0x992 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x957 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x93F JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x984 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP SWAP1 SUB SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x109 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x9CE JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x9E2 JUMPI INVALID JUMPDEST PUSH1 0x20 DUP1 DUP3 MUL PUSH2 0x9F2 DUP3 DUP3 ADD PUSH2 0xCEF JUMP JUMPDEST DUP4 DUP2 MSTORE SWAP4 POP DUP2 DUP5 ADD DUP6 DUP4 ADD DUP3 DUP8 ADD DUP5 ADD DUP9 LT ISZERO PUSH2 0xA0E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP3 POP DUP3 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0xA3E JUMPI DUP2 CALLDATALOAD DUP1 PUSH1 0xF SIGNEXTEND DUP2 EQ PUSH2 0xA2C JUMPI DUP5 DUP6 REVERT JUMPDEST DUP4 MSTORE SWAP2 DUP5 ADD SWAP2 SWAP1 DUP5 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xA14 JUMP JUMPDEST POP POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x0 DUP2 SWAP1 SIGNEXTEND DUP2 EQ PUSH2 0x109 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xA6C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA80 JUMPI INVALID JUMPDEST PUSH2 0xAB1 PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP5 ADD AND ADD PUSH2 0xCEF JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0xAC8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH3 0xFFFFFF DUP2 AND DUP2 EQ PUSH2 0x109 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH5 0xFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x109 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x109 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB2B JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xB42 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP5 ADD SWAP2 POP PUSH2 0x1E0 DUP1 DUP4 DUP8 SUB SLT ISZERO PUSH2 0xB58 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0xB61 DUP2 PUSH2 0xCEF JUMP JUMPDEST SWAP1 POP DUP3 CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0xB71 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0xB7D DUP8 DUP3 DUP7 ADD PUSH2 0xA5C JUMP JUMPDEST DUP3 MSTORE POP PUSH2 0xB8C PUSH1 0x20 DUP5 ADD PUSH2 0xAF4 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0xB9D PUSH1 0x40 DUP5 ADD PUSH2 0xAE1 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0xBAE PUSH1 0x60 DUP5 ADD PUSH2 0xB09 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0xBBF PUSH1 0x80 DUP5 ADD PUSH2 0xB09 JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH2 0xBD0 PUSH1 0xA0 DUP5 ADD PUSH2 0xB09 JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0xBE1 PUSH1 0xC0 DUP5 ADD PUSH2 0xA4A JUMP JUMPDEST PUSH1 0xC0 DUP3 ADD MSTORE PUSH2 0xBF2 PUSH1 0xE0 DUP5 ADD PUSH2 0x99A JUMP JUMPDEST PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 PUSH2 0xC05 DUP2 DUP6 ADD PUSH2 0xB09 JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE PUSH2 0x120 PUSH2 0xC17 DUP5 DUP3 ADD PUSH2 0xB09 JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE PUSH2 0x140 PUSH2 0xC29 DUP5 DUP3 ADD PUSH2 0xB09 JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE PUSH2 0x160 PUSH2 0xC3B DUP5 DUP3 ADD PUSH2 0xB09 JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE PUSH2 0x180 PUSH2 0xC4D DUP5 DUP3 ADD PUSH2 0x99A JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE PUSH2 0x1A0 PUSH2 0xC5F DUP5 DUP3 ADD PUSH2 0x99A JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE PUSH2 0x1C0 DUP4 DUP2 ADD CALLDATALOAD DUP4 DUP2 GT ISZERO PUSH2 0xC76 JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH2 0xC82 DUP9 DUP3 DUP8 ADD PUSH2 0x9BE JUMP JUMPDEST SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xCA4 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xCBC JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x8E2 DUP3 PUSH2 0xAF4 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0xFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xD0B JUMPI INVALID JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP INVALID STOP STOP STOP STOP STOP STOP STOP STOP STOP STATICCALL PUSH30 0x3B53800000000A8C0000000001FA40000000001C200000000000 STOP LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE2 PUSH24 0x8A377FDE72A6FDBD693E158626B8B7D0D32D6DB96DAEC053 DUP8 0xD3 SWAP16 0xD7 0x21 0xD1 PUSH5 0x736F6C6343 STOP SMOD DIV STOP CALLER ",
				"sourceMap": "1695:1185:5:-:0;;;;;;;;;;;;;;;;;;;"
			},
			"deployedBytecode": {
				"generatedSources": [
					{
						"ast": {
							"nodeType": "YulBlock",
							"src": "0:5430:11",
							"statements": [
								{
									"nodeType": "YulBlock",
									"src": "6:3:11",
									"statements": []
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "65:147:11",
										"statements": [
											{
												"nodeType": "YulAssignment",
												"src": "75:29:11",
												"value": {
													"arguments": [
														{
															"name": "offset",
															"nodeType": "YulIdentifier",
															"src": "97:6:11"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "84:12:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "84:20:11"
												},
												"variableNames": [
													{
														"name": "value",
														"nodeType": "YulIdentifier",
														"src": "75:5:11"
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "190:16:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "199:1:11",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "202:1:11",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "192:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "192:12:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "192:12:11"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "126:5:11"
																},
																{
																	"arguments": [
																		{
																			"name": "value",
																			"nodeType": "YulIdentifier",
																			"src": "137:5:11"
																		},
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "144:42:11",
																			"type": "",
																			"value": "0xffffffffffffffffffffffffffffffffffffffff"
																		}
																	],
																	"functionName": {
																		"name": "and",
																		"nodeType": "YulIdentifier",
																		"src": "133:3:11"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "133:54:11"
																}
															],
															"functionName": {
																"name": "eq",
																"nodeType": "YulIdentifier",
																"src": "123:2:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "123:65:11"
														}
													],
													"functionName": {
														"name": "iszero",
														"nodeType": "YulIdentifier",
														"src": "116:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "116:73:11"
												},
												"nodeType": "YulIf",
												"src": "113:2:11"
											}
										]
									},
									"name": "abi_decode_t_address",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "offset",
											"nodeType": "YulTypedName",
											"src": "44:6:11",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "value",
											"nodeType": "YulTypedName",
											"src": "55:5:11",
											"type": ""
										}
									],
									"src": "14:198:11"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "286:788:11",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "335:24:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "array",
																		"nodeType": "YulIdentifier",
																		"src": "344:5:11"
																	},
																	{
																		"name": "array",
																		"nodeType": "YulIdentifier",
																		"src": "351:5:11"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "337:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "337:20:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "337:20:11"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "offset",
																			"nodeType": "YulIdentifier",
																			"src": "314:6:11"
																		},
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "322:4:11",
																			"type": "",
																			"value": "0x1f"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nodeType": "YulIdentifier",
																		"src": "310:3:11"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "310:17:11"
																},
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "329:3:11"
																}
															],
															"functionName": {
																"name": "slt",
																"nodeType": "YulIdentifier",
																"src": "306:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "306:27:11"
														}
													],
													"functionName": {
														"name": "iszero",
														"nodeType": "YulIdentifier",
														"src": "299:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "299:35:11"
												},
												"nodeType": "YulIf",
												"src": "296:2:11"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "368:34:11",
												"value": {
													"arguments": [
														{
															"name": "offset",
															"nodeType": "YulIdentifier",
															"src": "395:6:11"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "382:12:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "382:20:11"
												},
												"variables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "372:6:11",
														"type": ""
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "445:13:11",
													"statements": [
														{
															"expression": {
																"arguments": [],
																"functionName": {
																	"name": "invalid",
																	"nodeType": "YulIdentifier",
																	"src": "447:7:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "447:9:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "447:9:11"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "417:6:11"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "425:18:11",
															"type": "",
															"value": "0xffffffffffffffff"
														}
													],
													"functionName": {
														"name": "gt",
														"nodeType": "YulIdentifier",
														"src": "414:2:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "414:30:11"
												},
												"nodeType": "YulIf",
												"src": "411:2:11"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "467:14:11",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "477:4:11",
													"type": "",
													"value": "0x20"
												},
												"variables": [
													{
														"name": "_1",
														"nodeType": "YulTypedName",
														"src": "471:2:11",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "490:25:11",
												"value": {
													"arguments": [
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "504:6:11"
														},
														{
															"name": "_1",
															"nodeType": "YulIdentifier",
															"src": "512:2:11"
														}
													],
													"functionName": {
														"name": "mul",
														"nodeType": "YulIdentifier",
														"src": "500:3:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "500:15:11"
												},
												"variables": [
													{
														"name": "_2",
														"nodeType": "YulTypedName",
														"src": "494:2:11",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulAssignment",
												"src": "524:36:11",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "_2",
																	"nodeType": "YulIdentifier",
																	"src": "552:2:11"
																},
																{
																	"name": "_1",
																	"nodeType": "YulIdentifier",
																	"src": "556:2:11"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "548:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "548:11:11"
														}
													],
													"functionName": {
														"name": "allocateMemory",
														"nodeType": "YulIdentifier",
														"src": "533:14:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "533:27:11"
												},
												"variableNames": [
													{
														"name": "array",
														"nodeType": "YulIdentifier",
														"src": "524:5:11"
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "569:16:11",
												"value": {
													"name": "array",
													"nodeType": "YulIdentifier",
													"src": "580:5:11"
												},
												"variables": [
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "573:3:11",
														"type": ""
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "array",
															"nodeType": "YulIdentifier",
															"src": "601:5:11"
														},
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "608:6:11"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "594:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "594:21:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "594:21:11"
											},
											{
												"nodeType": "YulAssignment",
												"src": "624:21:11",
												"value": {
													"arguments": [
														{
															"name": "array",
															"nodeType": "YulIdentifier",
															"src": "635:5:11"
														},
														{
															"name": "_1",
															"nodeType": "YulIdentifier",
															"src": "642:2:11"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "631:3:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "631:14:11"
												},
												"variableNames": [
													{
														"name": "dst",
														"nodeType": "YulIdentifier",
														"src": "624:3:11"
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "654:26:11",
												"value": {
													"arguments": [
														{
															"name": "offset",
															"nodeType": "YulIdentifier",
															"src": "669:6:11"
														},
														{
															"name": "_1",
															"nodeType": "YulIdentifier",
															"src": "677:2:11"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "665:3:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "665:15:11"
												},
												"variables": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "658:3:11",
														"type": ""
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "726:16:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "735:1:11",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "738:1:11",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "728:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "728:12:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "728:12:11"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "offset",
																			"nodeType": "YulIdentifier",
																			"src": "703:6:11"
																		},
																		{
																			"name": "_2",
																			"nodeType": "YulIdentifier",
																			"src": "711:2:11"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nodeType": "YulIdentifier",
																		"src": "699:3:11"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "699:15:11"
																},
																{
																	"name": "_1",
																	"nodeType": "YulIdentifier",
																	"src": "716:2:11"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "695:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "695:24:11"
														},
														{
															"name": "end",
															"nodeType": "YulIdentifier",
															"src": "721:3:11"
														}
													],
													"functionName": {
														"name": "gt",
														"nodeType": "YulIdentifier",
														"src": "692:2:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "692:33:11"
												},
												"nodeType": "YulIf",
												"src": "689:2:11"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "751:10:11",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "760:1:11",
													"type": "",
													"value": "0"
												},
												"variables": [
													{
														"name": "i",
														"nodeType": "YulTypedName",
														"src": "755:1:11",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "770:12:11",
												"value": {
													"name": "i",
													"nodeType": "YulIdentifier",
													"src": "781:1:11"
												},
												"variables": [
													{
														"name": "i_1",
														"nodeType": "YulTypedName",
														"src": "774:3:11",
														"type": ""
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "846:222:11",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "860:30:11",
															"value": {
																"arguments": [
																	{
																		"name": "src",
																		"nodeType": "YulIdentifier",
																		"src": "886:3:11"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "873:12:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "873:17:11"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "864:5:11",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "947:16:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "956:1:11"
																				},
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "959:1:11"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "949:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "949:12:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "949:12:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "916:5:11"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "934:2:11",
																						"type": "",
																						"value": "15"
																					},
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "938:5:11"
																					}
																				],
																				"functionName": {
																					"name": "signextend",
																					"nodeType": "YulIdentifier",
																					"src": "923:10:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "923:21:11"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "913:2:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "913:32:11"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "906:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "906:40:11"
															},
															"nodeType": "YulIf",
															"src": "903:2:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "dst",
																		"nodeType": "YulIdentifier",
																		"src": "983:3:11"
																	},
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "988:5:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "976:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "976:18:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "976:18:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1007:19:11",
															"value": {
																"arguments": [
																	{
																		"name": "dst",
																		"nodeType": "YulIdentifier",
																		"src": "1018:3:11"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "1023:2:11"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1014:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1014:12:11"
															},
															"variableNames": [
																{
																	"name": "dst",
																	"nodeType": "YulIdentifier",
																	"src": "1007:3:11"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1039:19:11",
															"value": {
																"arguments": [
																	{
																		"name": "src",
																		"nodeType": "YulIdentifier",
																		"src": "1050:3:11"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "1055:2:11"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1046:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1046:12:11"
															},
															"variableNames": [
																{
																	"name": "src",
																	"nodeType": "YulIdentifier",
																	"src": "1039:3:11"
																}
															]
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"name": "i_1",
															"nodeType": "YulIdentifier",
															"src": "802:3:11"
														},
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "807:6:11"
														}
													],
													"functionName": {
														"name": "lt",
														"nodeType": "YulIdentifier",
														"src": "799:2:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "799:15:11"
												},
												"nodeType": "YulForLoop",
												"post": {
													"nodeType": "YulBlock",
													"src": "815:22:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "817:18:11",
															"value": {
																"arguments": [
																	{
																		"name": "i_1",
																		"nodeType": "YulIdentifier",
																		"src": "828:3:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "833:1:11",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "824:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "824:11:11"
															},
															"variableNames": [
																{
																	"name": "i_1",
																	"nodeType": "YulIdentifier",
																	"src": "817:3:11"
																}
															]
														}
													]
												},
												"pre": {
													"nodeType": "YulBlock",
													"src": "795:3:11",
													"statements": []
												},
												"src": "791:277:11"
											}
										]
									},
									"name": "abi_decode_t_array$_t_int128_$dyn",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "offset",
											"nodeType": "YulTypedName",
											"src": "260:6:11",
											"type": ""
										},
										{
											"name": "end",
											"nodeType": "YulTypedName",
											"src": "268:3:11",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "array",
											"nodeType": "YulTypedName",
											"src": "276:5:11",
											"type": ""
										}
									],
									"src": "217:857:11"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "1127:113:11",
										"statements": [
											{
												"nodeType": "YulAssignment",
												"src": "1137:29:11",
												"value": {
													"arguments": [
														{
															"name": "offset",
															"nodeType": "YulIdentifier",
															"src": "1159:6:11"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "1146:12:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "1146:20:11"
												},
												"variableNames": [
													{
														"name": "value",
														"nodeType": "YulIdentifier",
														"src": "1137:5:11"
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1218:16:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1227:1:11",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1230:1:11",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "1220:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1220:12:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1220:12:11"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "1188:5:11"
																},
																{
																	"arguments": [
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "1206:1:11",
																			"type": "",
																			"value": "0"
																		},
																		{
																			"name": "value",
																			"nodeType": "YulIdentifier",
																			"src": "1209:5:11"
																		}
																	],
																	"functionName": {
																		"name": "signextend",
																		"nodeType": "YulIdentifier",
																		"src": "1195:10:11"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "1195:20:11"
																}
															],
															"functionName": {
																"name": "eq",
																"nodeType": "YulIdentifier",
																"src": "1185:2:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "1185:31:11"
														}
													],
													"functionName": {
														"name": "iszero",
														"nodeType": "YulIdentifier",
														"src": "1178:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "1178:39:11"
												},
												"nodeType": "YulIf",
												"src": "1175:2:11"
											}
										]
									},
									"name": "abi_decode_t_int8",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "offset",
											"nodeType": "YulTypedName",
											"src": "1106:6:11",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "value",
											"nodeType": "YulTypedName",
											"src": "1117:5:11",
											"type": ""
										}
									],
									"src": "1079:161:11"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "1300:526:11",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1349:24:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "array",
																		"nodeType": "YulIdentifier",
																		"src": "1358:5:11"
																	},
																	{
																		"name": "array",
																		"nodeType": "YulIdentifier",
																		"src": "1365:5:11"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "1351:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1351:20:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1351:20:11"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "offset",
																			"nodeType": "YulIdentifier",
																			"src": "1328:6:11"
																		},
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "1336:4:11",
																			"type": "",
																			"value": "0x1f"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nodeType": "YulIdentifier",
																		"src": "1324:3:11"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "1324:17:11"
																},
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "1343:3:11"
																}
															],
															"functionName": {
																"name": "slt",
																"nodeType": "YulIdentifier",
																"src": "1320:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "1320:27:11"
														}
													],
													"functionName": {
														"name": "iszero",
														"nodeType": "YulIdentifier",
														"src": "1313:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "1313:35:11"
												},
												"nodeType": "YulIf",
												"src": "1310:2:11"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "1382:34:11",
												"value": {
													"arguments": [
														{
															"name": "offset",
															"nodeType": "YulIdentifier",
															"src": "1409:6:11"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "1396:12:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "1396:20:11"
												},
												"variables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "1386:6:11",
														"type": ""
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1459:13:11",
													"statements": [
														{
															"expression": {
																"arguments": [],
																"functionName": {
																	"name": "invalid",
																	"nodeType": "YulIdentifier",
																	"src": "1461:7:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1461:9:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1461:9:11"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "1431:6:11"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "1439:18:11",
															"type": "",
															"value": "0xffffffffffffffff"
														}
													],
													"functionName": {
														"name": "gt",
														"nodeType": "YulIdentifier",
														"src": "1428:2:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "1428:30:11"
												},
												"nodeType": "YulIf",
												"src": "1425:2:11"
											},
											{
												"nodeType": "YulAssignment",
												"src": "1481:126:11",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "1517:6:11"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1525:4:11",
																					"type": "",
																					"value": "0x1f"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "1513:3:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1513:17:11"
																		},
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "1532:66:11",
																			"type": "",
																			"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"
																		}
																	],
																	"functionName": {
																		"name": "and",
																		"nodeType": "YulIdentifier",
																		"src": "1509:3:11"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "1509:90:11"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "1601:4:11",
																	"type": "",
																	"value": "0x20"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "1505:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "1505:101:11"
														}
													],
													"functionName": {
														"name": "allocateMemory",
														"nodeType": "YulIdentifier",
														"src": "1490:14:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "1490:117:11"
												},
												"variableNames": [
													{
														"name": "array",
														"nodeType": "YulIdentifier",
														"src": "1481:5:11"
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "array",
															"nodeType": "YulIdentifier",
															"src": "1623:5:11"
														},
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "1630:6:11"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "1616:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "1616:21:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "1616:21:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1689:16:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1698:1:11",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1701:1:11",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "1691:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1691:12:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1691:12:11"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "offset",
																			"nodeType": "YulIdentifier",
																			"src": "1660:6:11"
																		},
																		{
																			"name": "length",
																			"nodeType": "YulIdentifier",
																			"src": "1668:6:11"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nodeType": "YulIdentifier",
																		"src": "1656:3:11"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "1656:19:11"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "1677:4:11",
																	"type": "",
																	"value": "0x20"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "1652:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "1652:30:11"
														},
														{
															"name": "end",
															"nodeType": "YulIdentifier",
															"src": "1684:3:11"
														}
													],
													"functionName": {
														"name": "gt",
														"nodeType": "YulIdentifier",
														"src": "1649:2:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "1649:39:11"
												},
												"nodeType": "YulIf",
												"src": "1646:2:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "array",
																	"nodeType": "YulIdentifier",
																	"src": "1731:5:11"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "1738:4:11",
																	"type": "",
																	"value": "0x20"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "1727:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "1727:16:11"
														},
														{
															"arguments": [
																{
																	"name": "offset",
																	"nodeType": "YulIdentifier",
																	"src": "1749:6:11"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "1757:4:11",
																	"type": "",
																	"value": "0x20"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "1745:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "1745:17:11"
														},
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "1764:6:11"
														}
													],
													"functionName": {
														"name": "calldatacopy",
														"nodeType": "YulIdentifier",
														"src": "1714:12:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "1714:57:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "1714:57:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "array",
																			"nodeType": "YulIdentifier",
																			"src": "1795:5:11"
																		},
																		{
																			"name": "length",
																			"nodeType": "YulIdentifier",
																			"src": "1802:6:11"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nodeType": "YulIdentifier",
																		"src": "1791:3:11"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "1791:18:11"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "1811:4:11",
																	"type": "",
																	"value": "0x20"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "1787:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "1787:29:11"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "1818:1:11",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "1780:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "1780:40:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "1780:40:11"
											}
										]
									},
									"name": "abi_decode_t_string",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "offset",
											"nodeType": "YulTypedName",
											"src": "1274:6:11",
											"type": ""
										},
										{
											"name": "end",
											"nodeType": "YulTypedName",
											"src": "1282:3:11",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "array",
											"nodeType": "YulTypedName",
											"src": "1290:5:11",
											"type": ""
										}
									],
									"src": "1245:581:11"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "1881:113:11",
										"statements": [
											{
												"nodeType": "YulAssignment",
												"src": "1891:29:11",
												"value": {
													"arguments": [
														{
															"name": "offset",
															"nodeType": "YulIdentifier",
															"src": "1913:6:11"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "1900:12:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "1900:20:11"
												},
												"variableNames": [
													{
														"name": "value",
														"nodeType": "YulIdentifier",
														"src": "1891:5:11"
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1972:16:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1981:1:11",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1984:1:11",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "1974:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1974:12:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1974:12:11"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "1942:5:11"
																},
																{
																	"arguments": [
																		{
																			"name": "value",
																			"nodeType": "YulIdentifier",
																			"src": "1953:5:11"
																		},
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "1960:8:11",
																			"type": "",
																			"value": "0xffffff"
																		}
																	],
																	"functionName": {
																		"name": "and",
																		"nodeType": "YulIdentifier",
																		"src": "1949:3:11"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "1949:20:11"
																}
															],
															"functionName": {
																"name": "eq",
																"nodeType": "YulIdentifier",
																"src": "1939:2:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "1939:31:11"
														}
													],
													"functionName": {
														"name": "iszero",
														"nodeType": "YulIdentifier",
														"src": "1932:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "1932:39:11"
												},
												"nodeType": "YulIf",
												"src": "1929:2:11"
											}
										]
									},
									"name": "abi_decode_t_uint24",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "offset",
											"nodeType": "YulTypedName",
											"src": "1860:6:11",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "value",
											"nodeType": "YulTypedName",
											"src": "1871:5:11",
											"type": ""
										}
									],
									"src": "1831:163:11"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "2049:117:11",
										"statements": [
											{
												"nodeType": "YulAssignment",
												"src": "2059:29:11",
												"value": {
													"arguments": [
														{
															"name": "offset",
															"nodeType": "YulIdentifier",
															"src": "2081:6:11"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "2068:12:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "2068:20:11"
												},
												"variableNames": [
													{
														"name": "value",
														"nodeType": "YulIdentifier",
														"src": "2059:5:11"
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2144:16:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2153:1:11",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2156:1:11",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "2146:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2146:12:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2146:12:11"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "2110:5:11"
																},
																{
																	"arguments": [
																		{
																			"name": "value",
																			"nodeType": "YulIdentifier",
																			"src": "2121:5:11"
																		},
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "2128:12:11",
																			"type": "",
																			"value": "0xffffffffff"
																		}
																	],
																	"functionName": {
																		"name": "and",
																		"nodeType": "YulIdentifier",
																		"src": "2117:3:11"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "2117:24:11"
																}
															],
															"functionName": {
																"name": "eq",
																"nodeType": "YulIdentifier",
																"src": "2107:2:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "2107:35:11"
														}
													],
													"functionName": {
														"name": "iszero",
														"nodeType": "YulIdentifier",
														"src": "2100:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "2100:43:11"
												},
												"nodeType": "YulIf",
												"src": "2097:2:11"
											}
										]
									},
									"name": "abi_decode_t_uint40",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "offset",
											"nodeType": "YulTypedName",
											"src": "2028:6:11",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "value",
											"nodeType": "YulTypedName",
											"src": "2039:5:11",
											"type": ""
										}
									],
									"src": "1999:167:11"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "2220:109:11",
										"statements": [
											{
												"nodeType": "YulAssignment",
												"src": "2230:29:11",
												"value": {
													"arguments": [
														{
															"name": "offset",
															"nodeType": "YulIdentifier",
															"src": "2252:6:11"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "2239:12:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "2239:20:11"
												},
												"variableNames": [
													{
														"name": "value",
														"nodeType": "YulIdentifier",
														"src": "2230:5:11"
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2307:16:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2316:1:11",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2319:1:11",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "2309:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2309:12:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2309:12:11"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "2281:5:11"
																},
																{
																	"arguments": [
																		{
																			"name": "value",
																			"nodeType": "YulIdentifier",
																			"src": "2292:5:11"
																		},
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "2299:4:11",
																			"type": "",
																			"value": "0xff"
																		}
																	],
																	"functionName": {
																		"name": "and",
																		"nodeType": "YulIdentifier",
																		"src": "2288:3:11"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "2288:16:11"
																}
															],
															"functionName": {
																"name": "eq",
																"nodeType": "YulIdentifier",
																"src": "2278:2:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "2278:27:11"
														}
													],
													"functionName": {
														"name": "iszero",
														"nodeType": "YulIdentifier",
														"src": "2271:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "2271:35:11"
												},
												"nodeType": "YulIf",
												"src": "2268:2:11"
											}
										]
									},
									"name": "abi_decode_t_uint8",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "offset",
											"nodeType": "YulTypedName",
											"src": "2199:6:11",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "value",
											"nodeType": "YulTypedName",
											"src": "2210:5:11",
											"type": ""
										}
									],
									"src": "2171:158:11"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "2435:1778:11",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2481:26:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "2490:6:11"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "2498:6:11"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "2483:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2483:22:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2483:22:11"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "dataEnd",
																	"nodeType": "YulIdentifier",
																	"src": "2456:7:11"
																},
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "2465:9:11"
																}
															],
															"functionName": {
																"name": "sub",
																"nodeType": "YulIdentifier",
																"src": "2452:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "2452:23:11"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "2477:2:11",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "slt",
														"nodeType": "YulIdentifier",
														"src": "2448:3:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "2448:32:11"
												},
												"nodeType": "YulIf",
												"src": "2445:2:11"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "2516:37:11",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "2543:9:11"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "2530:12:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "2530:23:11"
												},
												"variables": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "2520:6:11",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "2562:28:11",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "2572:18:11",
													"type": "",
													"value": "0xffffffffffffffff"
												},
												"variables": [
													{
														"name": "_1",
														"nodeType": "YulTypedName",
														"src": "2566:2:11",
														"type": ""
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2617:26:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "2626:6:11"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "2634:6:11"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "2619:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2619:22:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2619:22:11"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"name": "offset",
															"nodeType": "YulIdentifier",
															"src": "2605:6:11"
														},
														{
															"name": "_1",
															"nodeType": "YulIdentifier",
															"src": "2613:2:11"
														}
													],
													"functionName": {
														"name": "gt",
														"nodeType": "YulIdentifier",
														"src": "2602:2:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "2602:14:11"
												},
												"nodeType": "YulIf",
												"src": "2599:2:11"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "2652:32:11",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "2666:9:11"
														},
														{
															"name": "offset",
															"nodeType": "YulIdentifier",
															"src": "2677:6:11"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "2662:3:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "2662:22:11"
												},
												"variables": [
													{
														"name": "_2",
														"nodeType": "YulTypedName",
														"src": "2656:2:11",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "2693:16:11",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "2703:6:11",
													"type": "",
													"value": "0x01e0"
												},
												"variables": [
													{
														"name": "_3",
														"nodeType": "YulTypedName",
														"src": "2697:2:11",
														"type": ""
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2747:26:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "2756:6:11"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "2764:6:11"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "2749:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2749:22:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2749:22:11"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "dataEnd",
																	"nodeType": "YulIdentifier",
																	"src": "2729:7:11"
																},
																{
																	"name": "_2",
																	"nodeType": "YulIdentifier",
																	"src": "2738:2:11"
																}
															],
															"functionName": {
																"name": "sub",
																"nodeType": "YulIdentifier",
																"src": "2725:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "2725:16:11"
														},
														{
															"name": "_3",
															"nodeType": "YulIdentifier",
															"src": "2743:2:11"
														}
													],
													"functionName": {
														"name": "slt",
														"nodeType": "YulIdentifier",
														"src": "2721:3:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "2721:25:11"
												},
												"nodeType": "YulIf",
												"src": "2718:2:11"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "2782:31:11",
												"value": {
													"arguments": [
														{
															"name": "_3",
															"nodeType": "YulIdentifier",
															"src": "2810:2:11"
														}
													],
													"functionName": {
														"name": "allocateMemory",
														"nodeType": "YulIdentifier",
														"src": "2795:14:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "2795:18:11"
												},
												"variables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2786:5:11",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "2822:32:11",
												"value": {
													"arguments": [
														{
															"name": "_2",
															"nodeType": "YulIdentifier",
															"src": "2851:2:11"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "2838:12:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "2838:16:11"
												},
												"variables": [
													{
														"name": "offset_1",
														"nodeType": "YulTypedName",
														"src": "2826:8:11",
														"type": ""
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2883:26:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "2892:6:11"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "2900:6:11"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "2885:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2885:22:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2885:22:11"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"name": "offset_1",
															"nodeType": "YulIdentifier",
															"src": "2869:8:11"
														},
														{
															"name": "_1",
															"nodeType": "YulIdentifier",
															"src": "2879:2:11"
														}
													],
													"functionName": {
														"name": "gt",
														"nodeType": "YulIdentifier",
														"src": "2866:2:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "2866:16:11"
												},
												"nodeType": "YulIf",
												"src": "2863:2:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "value",
															"nodeType": "YulIdentifier",
															"src": "2925:5:11"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "_2",
																			"nodeType": "YulIdentifier",
																			"src": "2956:2:11"
																		},
																		{
																			"name": "offset_1",
																			"nodeType": "YulIdentifier",
																			"src": "2960:8:11"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nodeType": "YulIdentifier",
																		"src": "2952:3:11"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "2952:17:11"
																},
																{
																	"name": "dataEnd",
																	"nodeType": "YulIdentifier",
																	"src": "2971:7:11"
																}
															],
															"functionName": {
																"name": "abi_decode_t_string",
																"nodeType": "YulIdentifier",
																"src": "2932:19:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "2932:47:11"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "2918:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "2918:62:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "2918:62:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "3000:5:11"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "3007:2:11",
																	"type": "",
																	"value": "32"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "2996:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "2996:14:11"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "_2",
																			"nodeType": "YulIdentifier",
																			"src": "3036:2:11"
																		},
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "3040:2:11",
																			"type": "",
																			"value": "32"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nodeType": "YulIdentifier",
																		"src": "3032:3:11"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "3032:11:11"
																}
															],
															"functionName": {
																"name": "abi_decode_t_uint40",
																"nodeType": "YulIdentifier",
																"src": "3012:19:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "3012:32:11"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "2989:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "2989:56:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "2989:56:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "3065:5:11"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "3072:2:11",
																	"type": "",
																	"value": "64"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "3061:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "3061:14:11"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "_2",
																			"nodeType": "YulIdentifier",
																			"src": "3101:2:11"
																		},
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "3105:2:11",
																			"type": "",
																			"value": "64"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nodeType": "YulIdentifier",
																		"src": "3097:3:11"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "3097:11:11"
																}
															],
															"functionName": {
																"name": "abi_decode_t_uint24",
																"nodeType": "YulIdentifier",
																"src": "3077:19:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "3077:32:11"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "3054:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "3054:56:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "3054:56:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "3130:5:11"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "3137:2:11",
																	"type": "",
																	"value": "96"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "3126:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "3126:14:11"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "_2",
																			"nodeType": "YulIdentifier",
																			"src": "3165:2:11"
																		},
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "3169:2:11",
																			"type": "",
																			"value": "96"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nodeType": "YulIdentifier",
																		"src": "3161:3:11"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "3161:11:11"
																}
															],
															"functionName": {
																"name": "abi_decode_t_uint8",
																"nodeType": "YulIdentifier",
																"src": "3142:18:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "3142:31:11"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "3119:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "3119:55:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "3119:55:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "3194:5:11"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "3201:3:11",
																	"type": "",
																	"value": "128"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "3190:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "3190:15:11"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "_2",
																			"nodeType": "YulIdentifier",
																			"src": "3230:2:11"
																		},
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "3234:3:11",
																			"type": "",
																			"value": "128"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nodeType": "YulIdentifier",
																		"src": "3226:3:11"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "3226:12:11"
																}
															],
															"functionName": {
																"name": "abi_decode_t_uint8",
																"nodeType": "YulIdentifier",
																"src": "3207:18:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "3207:32:11"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "3183:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "3183:57:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "3183:57:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "3260:5:11"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "3267:3:11",
																	"type": "",
																	"value": "160"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "3256:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "3256:15:11"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "_2",
																			"nodeType": "YulIdentifier",
																			"src": "3296:2:11"
																		},
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "3300:3:11",
																			"type": "",
																			"value": "160"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nodeType": "YulIdentifier",
																		"src": "3292:3:11"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "3292:12:11"
																}
															],
															"functionName": {
																"name": "abi_decode_t_uint8",
																"nodeType": "YulIdentifier",
																"src": "3273:18:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "3273:32:11"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "3249:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "3249:57:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "3249:57:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "3326:5:11"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "3333:3:11",
																	"type": "",
																	"value": "192"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "3322:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "3322:15:11"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "_2",
																			"nodeType": "YulIdentifier",
																			"src": "3361:2:11"
																		},
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "3365:3:11",
																			"type": "",
																			"value": "192"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nodeType": "YulIdentifier",
																		"src": "3357:3:11"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "3357:12:11"
																}
															],
															"functionName": {
																"name": "abi_decode_t_int8",
																"nodeType": "YulIdentifier",
																"src": "3339:17:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "3339:31:11"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "3315:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "3315:56:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "3315:56:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "3391:5:11"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "3398:3:11",
																	"type": "",
																	"value": "224"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "3387:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "3387:15:11"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "_2",
																			"nodeType": "YulIdentifier",
																			"src": "3429:2:11"
																		},
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "3433:3:11",
																			"type": "",
																			"value": "224"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nodeType": "YulIdentifier",
																		"src": "3425:3:11"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "3425:12:11"
																}
															],
															"functionName": {
																"name": "abi_decode_t_address",
																"nodeType": "YulIdentifier",
																"src": "3404:20:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "3404:34:11"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "3380:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "3380:59:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "3380:59:11"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "3448:13:11",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "3458:3:11",
													"type": "",
													"value": "256"
												},
												"variables": [
													{
														"name": "_4",
														"nodeType": "YulTypedName",
														"src": "3452:2:11",
														"type": ""
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "3481:5:11"
																},
																{
																	"name": "_4",
																	"nodeType": "YulIdentifier",
																	"src": "3488:2:11"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "3477:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "3477:14:11"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "_2",
																			"nodeType": "YulIdentifier",
																			"src": "3516:2:11"
																		},
																		{
																			"name": "_4",
																			"nodeType": "YulIdentifier",
																			"src": "3520:2:11"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nodeType": "YulIdentifier",
																		"src": "3512:3:11"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "3512:11:11"
																}
															],
															"functionName": {
																"name": "abi_decode_t_uint8",
																"nodeType": "YulIdentifier",
																"src": "3493:18:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "3493:31:11"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "3470:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "3470:55:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "3470:55:11"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "3534:13:11",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "3544:3:11",
													"type": "",
													"value": "288"
												},
												"variables": [
													{
														"name": "_5",
														"nodeType": "YulTypedName",
														"src": "3538:2:11",
														"type": ""
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "3567:5:11"
																},
																{
																	"name": "_5",
																	"nodeType": "YulIdentifier",
																	"src": "3574:2:11"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "3563:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "3563:14:11"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "_2",
																			"nodeType": "YulIdentifier",
																			"src": "3602:2:11"
																		},
																		{
																			"name": "_5",
																			"nodeType": "YulIdentifier",
																			"src": "3606:2:11"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nodeType": "YulIdentifier",
																		"src": "3598:3:11"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "3598:11:11"
																}
															],
															"functionName": {
																"name": "abi_decode_t_uint8",
																"nodeType": "YulIdentifier",
																"src": "3579:18:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "3579:31:11"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "3556:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "3556:55:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "3556:55:11"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "3620:13:11",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "3630:3:11",
													"type": "",
													"value": "320"
												},
												"variables": [
													{
														"name": "_6",
														"nodeType": "YulTypedName",
														"src": "3624:2:11",
														"type": ""
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "3653:5:11"
																},
																{
																	"name": "_6",
																	"nodeType": "YulIdentifier",
																	"src": "3660:2:11"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "3649:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "3649:14:11"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "_2",
																			"nodeType": "YulIdentifier",
																			"src": "3688:2:11"
																		},
																		{
																			"name": "_6",
																			"nodeType": "YulIdentifier",
																			"src": "3692:2:11"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nodeType": "YulIdentifier",
																		"src": "3684:3:11"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "3684:11:11"
																}
															],
															"functionName": {
																"name": "abi_decode_t_uint8",
																"nodeType": "YulIdentifier",
																"src": "3665:18:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "3665:31:11"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "3642:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "3642:55:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "3642:55:11"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "3706:13:11",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "3716:3:11",
													"type": "",
													"value": "352"
												},
												"variables": [
													{
														"name": "_7",
														"nodeType": "YulTypedName",
														"src": "3710:2:11",
														"type": ""
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "3739:5:11"
																},
																{
																	"name": "_7",
																	"nodeType": "YulIdentifier",
																	"src": "3746:2:11"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "3735:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "3735:14:11"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "_2",
																			"nodeType": "YulIdentifier",
																			"src": "3774:2:11"
																		},
																		{
																			"name": "_7",
																			"nodeType": "YulIdentifier",
																			"src": "3778:2:11"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nodeType": "YulIdentifier",
																		"src": "3770:3:11"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "3770:11:11"
																}
															],
															"functionName": {
																"name": "abi_decode_t_uint8",
																"nodeType": "YulIdentifier",
																"src": "3751:18:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "3751:31:11"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "3728:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "3728:55:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "3728:55:11"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "3792:13:11",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "3802:3:11",
													"type": "",
													"value": "384"
												},
												"variables": [
													{
														"name": "_8",
														"nodeType": "YulTypedName",
														"src": "3796:2:11",
														"type": ""
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "3825:5:11"
																},
																{
																	"name": "_8",
																	"nodeType": "YulIdentifier",
																	"src": "3832:2:11"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "3821:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "3821:14:11"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "_2",
																			"nodeType": "YulIdentifier",
																			"src": "3862:2:11"
																		},
																		{
																			"name": "_8",
																			"nodeType": "YulIdentifier",
																			"src": "3866:2:11"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nodeType": "YulIdentifier",
																		"src": "3858:3:11"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "3858:11:11"
																}
															],
															"functionName": {
																"name": "abi_decode_t_address",
																"nodeType": "YulIdentifier",
																"src": "3837:20:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "3837:33:11"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "3814:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "3814:57:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "3814:57:11"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "3880:13:11",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "3890:3:11",
													"type": "",
													"value": "416"
												},
												"variables": [
													{
														"name": "_9",
														"nodeType": "YulTypedName",
														"src": "3884:2:11",
														"type": ""
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "3913:5:11"
																},
																{
																	"name": "_9",
																	"nodeType": "YulIdentifier",
																	"src": "3920:2:11"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "3909:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "3909:14:11"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "_2",
																			"nodeType": "YulIdentifier",
																			"src": "3950:2:11"
																		},
																		{
																			"name": "_9",
																			"nodeType": "YulIdentifier",
																			"src": "3954:2:11"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nodeType": "YulIdentifier",
																		"src": "3946:3:11"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "3946:11:11"
																}
															],
															"functionName": {
																"name": "abi_decode_t_address",
																"nodeType": "YulIdentifier",
																"src": "3925:20:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "3925:33:11"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "3902:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "3902:57:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "3902:57:11"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "3968:14:11",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "3979:3:11",
													"type": "",
													"value": "448"
												},
												"variables": [
													{
														"name": "_10",
														"nodeType": "YulTypedName",
														"src": "3972:3:11",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "3991:42:11",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "_2",
																	"nodeType": "YulIdentifier",
																	"src": "4024:2:11"
																},
																{
																	"name": "_10",
																	"nodeType": "YulIdentifier",
																	"src": "4028:3:11"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "4020:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "4020:12:11"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "4007:12:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "4007:26:11"
												},
												"variables": [
													{
														"name": "offset_2",
														"nodeType": "YulTypedName",
														"src": "3995:8:11",
														"type": ""
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4062:26:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "4071:6:11"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "4079:6:11"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "4064:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4064:22:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4064:22:11"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"name": "offset_2",
															"nodeType": "YulIdentifier",
															"src": "4048:8:11"
														},
														{
															"name": "_1",
															"nodeType": "YulIdentifier",
															"src": "4058:2:11"
														}
													],
													"functionName": {
														"name": "gt",
														"nodeType": "YulIdentifier",
														"src": "4045:2:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "4045:16:11"
												},
												"nodeType": "YulIf",
												"src": "4042:2:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "4108:5:11"
																},
																{
																	"name": "_10",
																	"nodeType": "YulIdentifier",
																	"src": "4115:3:11"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "4104:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "4104:15:11"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "_2",
																			"nodeType": "YulIdentifier",
																			"src": "4159:2:11"
																		},
																		{
																			"name": "offset_2",
																			"nodeType": "YulIdentifier",
																			"src": "4163:8:11"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nodeType": "YulIdentifier",
																		"src": "4155:3:11"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "4155:17:11"
																},
																{
																	"name": "dataEnd",
																	"nodeType": "YulIdentifier",
																	"src": "4174:7:11"
																}
															],
															"functionName": {
																"name": "abi_decode_t_array$_t_int128_$dyn",
																"nodeType": "YulIdentifier",
																"src": "4121:33:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "4121:61:11"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "4097:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "4097:86:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "4097:86:11"
											},
											{
												"nodeType": "YulAssignment",
												"src": "4192:15:11",
												"value": {
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "4202:5:11"
												},
												"variableNames": [
													{
														"name": "value0",
														"nodeType": "YulIdentifier",
														"src": "4192:6:11"
													}
												]
											}
										]
									},
									"name": "abi_decode_tuple_t_struct$_MarketBaseData_$125_memory_ptr",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "2401:9:11",
											"type": ""
										},
										{
											"name": "dataEnd",
											"nodeType": "YulTypedName",
											"src": "2412:7:11",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "2424:6:11",
											"type": ""
										}
									],
									"src": "2334:1879:11"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "4288:120:11",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4334:26:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "4343:6:11"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "4351:6:11"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "4336:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4336:22:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4336:22:11"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "dataEnd",
																	"nodeType": "YulIdentifier",
																	"src": "4309:7:11"
																},
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "4318:9:11"
																}
															],
															"functionName": {
																"name": "sub",
																"nodeType": "YulIdentifier",
																"src": "4305:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "4305:23:11"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "4330:2:11",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "slt",
														"nodeType": "YulIdentifier",
														"src": "4301:3:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "4301:32:11"
												},
												"nodeType": "YulIf",
												"src": "4298:2:11"
											},
											{
												"nodeType": "YulAssignment",
												"src": "4369:33:11",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "4392:9:11"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "4379:12:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "4379:23:11"
												},
												"variableNames": [
													{
														"name": "value0",
														"nodeType": "YulIdentifier",
														"src": "4369:6:11"
													}
												]
											}
										]
									},
									"name": "abi_decode_tuple_t_uint256",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "4254:9:11",
											"type": ""
										},
										{
											"name": "dataEnd",
											"nodeType": "YulTypedName",
											"src": "4265:7:11",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "4277:6:11",
											"type": ""
										}
									],
									"src": "4218:190:11"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "4482:127:11",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4528:26:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "4537:6:11"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "4545:6:11"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "4530:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4530:22:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4530:22:11"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "dataEnd",
																	"nodeType": "YulIdentifier",
																	"src": "4503:7:11"
																},
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "4512:9:11"
																}
															],
															"functionName": {
																"name": "sub",
																"nodeType": "YulIdentifier",
																"src": "4499:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "4499:23:11"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "4524:2:11",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "slt",
														"nodeType": "YulIdentifier",
														"src": "4495:3:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "4495:32:11"
												},
												"nodeType": "YulIf",
												"src": "4492:2:11"
											},
											{
												"nodeType": "YulAssignment",
												"src": "4563:40:11",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "4593:9:11"
														}
													],
													"functionName": {
														"name": "abi_decode_t_uint40",
														"nodeType": "YulIdentifier",
														"src": "4573:19:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "4573:30:11"
												},
												"variableNames": [
													{
														"name": "value0",
														"nodeType": "YulIdentifier",
														"src": "4563:6:11"
													}
												]
											}
										]
									},
									"name": "abi_decode_tuple_t_uint40",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "4448:9:11",
											"type": ""
										},
										{
											"name": "dataEnd",
											"nodeType": "YulTypedName",
											"src": "4459:7:11",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "4471:6:11",
											"type": ""
										}
									],
									"src": "4413:196:11"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "4715:76:11",
										"statements": [
											{
												"nodeType": "YulAssignment",
												"src": "4725:26:11",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "4737:9:11"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "4748:2:11",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "4733:3:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "4733:18:11"
												},
												"variableNames": [
													{
														"name": "tail",
														"nodeType": "YulIdentifier",
														"src": "4725:4:11"
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "4767:9:11"
														},
														{
															"name": "value0",
															"nodeType": "YulIdentifier",
															"src": "4778:6:11"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "4760:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "4760:25:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "4760:25:11"
											}
										]
									},
									"name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "4684:9:11",
											"type": ""
										},
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "4695:6:11",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "tail",
											"nodeType": "YulTypedName",
											"src": "4706:4:11",
											"type": ""
										}
									],
									"src": "4614:177:11"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "4895:97:11",
										"statements": [
											{
												"nodeType": "YulAssignment",
												"src": "4905:26:11",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "4917:9:11"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "4928:2:11",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "4913:3:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "4913:18:11"
												},
												"variableNames": [
													{
														"name": "tail",
														"nodeType": "YulIdentifier",
														"src": "4905:4:11"
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "4947:9:11"
														},
														{
															"arguments": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "4962:6:11"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "4970:14:11",
																	"type": "",
																	"value": "0xffffffffffff"
																}
															],
															"functionName": {
																"name": "and",
																"nodeType": "YulIdentifier",
																"src": "4958:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "4958:27:11"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "4940:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "4940:46:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "4940:46:11"
											}
										]
									},
									"name": "abi_encode_tuple_t_uint48__to_t_uint48__fromStack_reversed",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "4864:9:11",
											"type": ""
										},
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "4875:6:11",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "tail",
											"nodeType": "YulTypedName",
											"src": "4886:4:11",
											"type": ""
										}
									],
									"src": "4796:196:11"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "5094:87:11",
										"statements": [
											{
												"nodeType": "YulAssignment",
												"src": "5104:26:11",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "5116:9:11"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "5127:2:11",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "5112:3:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "5112:18:11"
												},
												"variableNames": [
													{
														"name": "tail",
														"nodeType": "YulIdentifier",
														"src": "5104:4:11"
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "5146:9:11"
														},
														{
															"arguments": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "5161:6:11"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "5169:4:11",
																	"type": "",
																	"value": "0xff"
																}
															],
															"functionName": {
																"name": "and",
																"nodeType": "YulIdentifier",
																"src": "5157:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "5157:17:11"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "5139:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "5139:36:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "5139:36:11"
											}
										]
									},
									"name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "5063:9:11",
											"type": ""
										},
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "5074:6:11",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "tail",
											"nodeType": "YulTypedName",
											"src": "5085:4:11",
											"type": ""
										}
									],
									"src": "4997:184:11"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "5230:198:11",
										"statements": [
											{
												"nodeType": "YulAssignment",
												"src": "5240:19:11",
												"value": {
													"arguments": [
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "5256:2:11",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "mload",
														"nodeType": "YulIdentifier",
														"src": "5250:5:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "5250:9:11"
												},
												"variableNames": [
													{
														"name": "memPtr",
														"nodeType": "YulIdentifier",
														"src": "5240:6:11"
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "5268:35:11",
												"value": {
													"arguments": [
														{
															"name": "memPtr",
															"nodeType": "YulIdentifier",
															"src": "5290:6:11"
														},
														{
															"name": "size",
															"nodeType": "YulIdentifier",
															"src": "5298:4:11"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "5286:3:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "5286:17:11"
												},
												"variables": [
													{
														"name": "newFreePtr",
														"nodeType": "YulTypedName",
														"src": "5272:10:11",
														"type": ""
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5378:13:11",
													"statements": [
														{
															"expression": {
																"arguments": [],
																"functionName": {
																	"name": "invalid",
																	"nodeType": "YulIdentifier",
																	"src": "5380:7:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "5380:9:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5380:9:11"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulIdentifier",
																	"src": "5321:10:11"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "5333:18:11",
																	"type": "",
																	"value": "0xffffffffffffffff"
																}
															],
															"functionName": {
																"name": "gt",
																"nodeType": "YulIdentifier",
																"src": "5318:2:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "5318:34:11"
														},
														{
															"arguments": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulIdentifier",
																	"src": "5357:10:11"
																},
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "5369:6:11"
																}
															],
															"functionName": {
																"name": "lt",
																"nodeType": "YulIdentifier",
																"src": "5354:2:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "5354:22:11"
														}
													],
													"functionName": {
														"name": "or",
														"nodeType": "YulIdentifier",
														"src": "5315:2:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "5315:62:11"
												},
												"nodeType": "YulIf",
												"src": "5312:2:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "5407:2:11",
															"type": "",
															"value": "64"
														},
														{
															"name": "newFreePtr",
															"nodeType": "YulIdentifier",
															"src": "5411:10:11"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "5400:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "5400:22:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "5400:22:11"
											}
										]
									},
									"name": "allocateMemory",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "size",
											"nodeType": "YulTypedName",
											"src": "5210:4:11",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "memPtr",
											"nodeType": "YulTypedName",
											"src": "5219:6:11",
											"type": ""
										}
									],
									"src": "5186:242:11"
								}
							]
						},
						"contents": "{\n    { }\n    function abi_decode_t_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_t_array$_t_int128_$dyn(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(array, array) }\n        let length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { invalid() }\n        let _1 := 0x20\n        let _2 := mul(length, _1)\n        array := allocateMemory(add(_2, _1))\n        let dst := array\n        mstore(array, length)\n        dst := add(array, _1)\n        let src := add(offset, _1)\n        if gt(add(add(offset, _2), _1), end) { revert(0, 0) }\n        let i := 0\n        let i_1 := i\n        for { } lt(i_1, length) { i_1 := add(i_1, 1) }\n        {\n            let value := calldataload(src)\n            if iszero(eq(value, signextend(15, value))) { revert(i, i) }\n            mstore(dst, value)\n            dst := add(dst, _1)\n            src := add(src, _1)\n        }\n    }\n    function abi_decode_t_int8(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, signextend(0, value))) { revert(0, 0) }\n    }\n    function abi_decode_t_string(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(array, array) }\n        let length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { invalid() }\n        array := allocateMemory(add(and(add(length, 0x1f), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0), 0x20))\n        mstore(array, length)\n        if gt(add(add(offset, length), 0x20), end) { revert(0, 0) }\n        calldatacopy(add(array, 0x20), add(offset, 0x20), length)\n        mstore(add(add(array, length), 0x20), 0)\n    }\n    function abi_decode_t_uint24(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffff))) { revert(0, 0) }\n    }\n    function abi_decode_t_uint40(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_t_uint8(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_struct$_MarketBaseData_$125_memory_ptr(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(value0, value0) }\n        let _2 := add(headStart, offset)\n        let _3 := 0x01e0\n        if slt(sub(dataEnd, _2), _3) { revert(value0, value0) }\n        let value := allocateMemory(_3)\n        let offset_1 := calldataload(_2)\n        if gt(offset_1, _1) { revert(value0, value0) }\n        mstore(value, abi_decode_t_string(add(_2, offset_1), dataEnd))\n        mstore(add(value, 32), abi_decode_t_uint40(add(_2, 32)))\n        mstore(add(value, 64), abi_decode_t_uint24(add(_2, 64)))\n        mstore(add(value, 96), abi_decode_t_uint8(add(_2, 96)))\n        mstore(add(value, 128), abi_decode_t_uint8(add(_2, 128)))\n        mstore(add(value, 160), abi_decode_t_uint8(add(_2, 160)))\n        mstore(add(value, 192), abi_decode_t_int8(add(_2, 192)))\n        mstore(add(value, 224), abi_decode_t_address(add(_2, 224)))\n        let _4 := 256\n        mstore(add(value, _4), abi_decode_t_uint8(add(_2, _4)))\n        let _5 := 288\n        mstore(add(value, _5), abi_decode_t_uint8(add(_2, _5)))\n        let _6 := 320\n        mstore(add(value, _6), abi_decode_t_uint8(add(_2, _6)))\n        let _7 := 352\n        mstore(add(value, _7), abi_decode_t_uint8(add(_2, _7)))\n        let _8 := 384\n        mstore(add(value, _8), abi_decode_t_address(add(_2, _8)))\n        let _9 := 416\n        mstore(add(value, _9), abi_decode_t_address(add(_2, _9)))\n        let _10 := 448\n        let offset_2 := calldataload(add(_2, _10))\n        if gt(offset_2, _1) { revert(value0, value0) }\n        mstore(add(value, _10), abi_decode_t_array$_t_int128_$dyn(add(_2, offset_2), dataEnd))\n        value0 := value\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_uint40(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := abi_decode_t_uint40(headStart)\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint48__to_t_uint48__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffff))\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function allocateMemory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, size)\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { invalid() }\n        mstore(64, newFreePtr)\n    }\n}",
						"id": 11,
						"language": "Yul",
						"name": "#utility.yul"
					}
				],
				"immutableReferences": {},
				"linkReferences": {},
				"object": "0x608060405234801561001057600080fd5b50600436106100675760003560e01c8063b8a4bf1f11610050578063b8a4bf1f146100b5578063f5299fda146100d5578063fe0a7fa9146100e857610067565b80631dcb4ca91461006c578063b04f77c714610095575b600080fd5b61007f61007a366004610b1a565b6100fb565b60405161008c9190610cc5565b60405180910390f35b6100a86100a3366004610cab565b61010e565b60405161008c9190610ce1565b6100c86100c3366004610c93565b610119565b60405161008c9190610cce565b61007f6100e3366004610b1a565b610124565b61007f6100f6366004610b1a565b61012f565b60006101068261013a565b90505b919050565b6000610106826103ec565b6000610106826104dc565b60006101068261050a565b60006101068261076c565b6000606082600001516040516020018082805190602001908083835b6020831061019357805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101610156565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040528051906020012083602001518460400151856060015186608001518760a001518860c001518961010001518a61018001518b6101a001518c60e00151604051602001808c81526020018b64ffffffffff1660d81b81526005018a62ffffff1660e81b81526003018960ff1660f81b81526001018860ff1660f81b81526001018760ff1660f81b81526001018660000b60f81b81526001018560ff1660f81b81526001018473ffffffffffffffffffffffffffffffffffffffff1660601b81526014018373ffffffffffffffffffffffffffffffffffffffff1660601b81526014018273ffffffffffffffffffffffffffffffffffffffff1660601b81526014019b505050505050505050505050604051602081830303815290604052905080836101200151846101400151856101600151866101c001516040516020018086805190602001908083835b6020831061034e57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101610311565b6001836020036101000a0380198251168184511680821785525050505050509050018560ff1660f81b81526001018460ff1660f81b81526001018360ff1660f81b8152600101828051906020019060200280838360005b838110156103bd5781810151838201526020016103a5565b505050509050019550505050505060405160208183030381529060405290508080519060200120915050919050565b6000808061040164ffffffffff8516426108a0565b90506303c26700811061047557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f746f6f2066617220696e20746865206675747572650000000000000000000000604482015290519081900360640190fd5b623b538081111561048a5760015b91506104d5565b620a8c0081111561049c576003610483565b6201fa408111156104ae576004610483565b611c208111156104bf576005610483565b6103848111156104d0576006610483565b600791505b5092915050565b600060606040518060600160405280602a8152602001610d14602a9139600184016006020151915050919050565b6000606082600001516040516020018082805190602001908083835b6020831061056357805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101610526565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040528051906020012083602001518460400151856060015186608001518760a001518860c001518961010001518a60e00151604051602001808a81526020018964ffffffffff1660d81b81526005018862ffffff1660e81b81526003018760ff1660f81b81526001018660ff1660f81b81526001018560ff1660f81b81526001018460000b60f81b81526001018360ff1660f81b81526001018273ffffffffffffffffffffffffffffffffffffffff1660601b8152601401995050505050505050505060405160208183030381529060405290506001600481111561067657fe5b83606001511660ff166000141561075e5780836101c001516040516020018083805190602001908083835b602083106106de57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016106a1565b51815160209384036101000a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01801990921691161790528551919093019285810192500280838360005b83811015610741578181015183820152602001610729565b505050509050019250505060405160208183030381529060405290505b805160209091012092915050565b6000606082600001516040516020018082805190602001908083835b602083106107c557805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101610788565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040528051906020012083602001518460400151856060015186608001518760a001518860c00151604051602001808881526020018764ffffffffff1660d81b81526005018662ffffff1660e81b81526003018560ff1660f81b81526001018460ff1660f81b81526001018360ff1660f81b81526001018260000b60f81b815260010197505050505050505060405160208183030381529060405290506001600481111561067657fe5b60006108e283836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506108e9565b9392505050565b60008184841115610992576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561095757818101518382015260200161093f565b50505050905090810190601f1680156109845780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b803573ffffffffffffffffffffffffffffffffffffffff8116811461010957600080fd5b600082601f8301126109ce578081fd5b813567ffffffffffffffff8111156109e257fe5b60208082026109f2828201610cef565b83815293508184018583018287018401881015610a0e57600080fd5b60009250825b85811015610a3e57813580600f0b8114610a2c578485fd5b83529184019190840190600101610a14565b50505050505092915050565b8035600081900b811461010957600080fd5b600082601f830112610a6c578081fd5b813567ffffffffffffffff811115610a8057fe5b610ab160207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601610cef565b9150808252836020828501011115610ac857600080fd5b8060208401602084013760009082016020015292915050565b803562ffffff8116811461010957600080fd5b803564ffffffffff8116811461010957600080fd5b803560ff8116811461010957600080fd5b600060208284031215610b2b578081fd5b813567ffffffffffffffff80821115610b42578283fd5b81840191506101e0808387031215610b58578384fd5b610b6181610cef565b9050823582811115610b71578485fd5b610b7d87828601610a5c565b825250610b8c60208401610af4565b6020820152610b9d60408401610ae1565b6040820152610bae60608401610b09565b6060820152610bbf60808401610b09565b6080820152610bd060a08401610b09565b60a0820152610be160c08401610a4a565b60c0820152610bf260e0840161099a565b60e0820152610100610c05818501610b09565b90820152610120610c17848201610b09565b90820152610140610c29848201610b09565b90820152610160610c3b848201610b09565b90820152610180610c4d84820161099a565b908201526101a0610c5f84820161099a565b908201526101c08381013583811115610c76578586fd5b610c82888287016109be565b918301919091525095945050505050565b600060208284031215610ca4578081fd5b5035919050565b600060208284031215610cbc578081fd5b6108e282610af4565b90815260200190565b65ffffffffffff91909116815260200190565b60ff91909116815260200190565b60405181810167ffffffffffffffff81118282101715610d0b57fe5b60405291905056fe000000000000000000fa7d000000003b53800000000a8c0000000001fa40000000001c20000000000000a2646970667358221220e2778a377fde72a6fdbd693e158626b8b7d0d32d6db96daec05387d39fd721d164736f6c63430007040033",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x67 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xB8A4BF1F GT PUSH2 0x50 JUMPI DUP1 PUSH4 0xB8A4BF1F EQ PUSH2 0xB5 JUMPI DUP1 PUSH4 0xF5299FDA EQ PUSH2 0xD5 JUMPI DUP1 PUSH4 0xFE0A7FA9 EQ PUSH2 0xE8 JUMPI PUSH2 0x67 JUMP JUMPDEST DUP1 PUSH4 0x1DCB4CA9 EQ PUSH2 0x6C JUMPI DUP1 PUSH4 0xB04F77C7 EQ PUSH2 0x95 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7F PUSH2 0x7A CALLDATASIZE PUSH1 0x4 PUSH2 0xB1A JUMP JUMPDEST PUSH2 0xFB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8C SWAP2 SWAP1 PUSH2 0xCC5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xA8 PUSH2 0xA3 CALLDATASIZE PUSH1 0x4 PUSH2 0xCAB JUMP JUMPDEST PUSH2 0x10E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8C SWAP2 SWAP1 PUSH2 0xCE1 JUMP JUMPDEST PUSH2 0xC8 PUSH2 0xC3 CALLDATASIZE PUSH1 0x4 PUSH2 0xC93 JUMP JUMPDEST PUSH2 0x119 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8C SWAP2 SWAP1 PUSH2 0xCCE JUMP JUMPDEST PUSH2 0x7F PUSH2 0xE3 CALLDATASIZE PUSH1 0x4 PUSH2 0xB1A JUMP JUMPDEST PUSH2 0x124 JUMP JUMPDEST PUSH2 0x7F PUSH2 0xF6 CALLDATASIZE PUSH1 0x4 PUSH2 0xB1A JUMP JUMPDEST PUSH2 0x12F JUMP JUMPDEST PUSH1 0x0 PUSH2 0x106 DUP3 PUSH2 0x13A JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x106 DUP3 PUSH2 0x3EC JUMP JUMPDEST PUSH1 0x0 PUSH2 0x106 DUP3 PUSH2 0x4DC JUMP JUMPDEST PUSH1 0x0 PUSH2 0x106 DUP3 PUSH2 0x50A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x106 DUP3 PUSH2 0x76C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 PUSH1 0x0 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x193 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x156 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP4 PUSH1 0x20 ADD MLOAD DUP5 PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0x60 ADD MLOAD DUP7 PUSH1 0x80 ADD MLOAD DUP8 PUSH1 0xA0 ADD MLOAD DUP9 PUSH1 0xC0 ADD MLOAD DUP10 PUSH2 0x100 ADD MLOAD DUP11 PUSH2 0x180 ADD MLOAD DUP12 PUSH2 0x1A0 ADD MLOAD DUP13 PUSH1 0xE0 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP13 DUP2 MSTORE PUSH1 0x20 ADD DUP12 PUSH5 0xFFFFFFFFFF AND PUSH1 0xD8 SHL DUP2 MSTORE PUSH1 0x5 ADD DUP11 PUSH3 0xFFFFFF AND PUSH1 0xE8 SHL DUP2 MSTORE PUSH1 0x3 ADD DUP10 PUSH1 0xFF AND PUSH1 0xF8 SHL DUP2 MSTORE PUSH1 0x1 ADD DUP9 PUSH1 0xFF AND PUSH1 0xF8 SHL DUP2 MSTORE PUSH1 0x1 ADD DUP8 PUSH1 0xFF AND PUSH1 0xF8 SHL DUP2 MSTORE PUSH1 0x1 ADD DUP7 PUSH1 0x0 SIGNEXTEND PUSH1 0xF8 SHL DUP2 MSTORE PUSH1 0x1 ADD DUP6 PUSH1 0xFF AND PUSH1 0xF8 SHL DUP2 MSTORE PUSH1 0x1 ADD DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 SHL DUP2 MSTORE PUSH1 0x14 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 SHL DUP2 MSTORE PUSH1 0x14 ADD DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 SHL DUP2 MSTORE PUSH1 0x14 ADD SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP DUP1 DUP4 PUSH2 0x120 ADD MLOAD DUP5 PUSH2 0x140 ADD MLOAD DUP6 PUSH2 0x160 ADD MLOAD DUP7 PUSH2 0x1C0 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP7 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x34E JUMPI DUP1 MLOAD DUP3 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x311 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD DUP6 PUSH1 0xFF AND PUSH1 0xF8 SHL DUP2 MSTORE PUSH1 0x1 ADD DUP5 PUSH1 0xFF AND PUSH1 0xF8 SHL DUP2 MSTORE PUSH1 0x1 ADD DUP4 PUSH1 0xFF AND PUSH1 0xF8 SHL DUP2 MSTORE PUSH1 0x1 ADD DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3BD JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x3A5 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP6 POP POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH2 0x401 PUSH5 0xFFFFFFFFFF DUP6 AND TIMESTAMP PUSH2 0x8A0 JUMP JUMPDEST SWAP1 POP PUSH4 0x3C26700 DUP2 LT PUSH2 0x475 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x746F6F2066617220696E20746865206675747572650000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH3 0x3B5380 DUP2 GT ISZERO PUSH2 0x48A JUMPI PUSH1 0x1 JUMPDEST SWAP2 POP PUSH2 0x4D5 JUMP JUMPDEST PUSH3 0xA8C00 DUP2 GT ISZERO PUSH2 0x49C JUMPI PUSH1 0x3 PUSH2 0x483 JUMP JUMPDEST PUSH3 0x1FA40 DUP2 GT ISZERO PUSH2 0x4AE JUMPI PUSH1 0x4 PUSH2 0x483 JUMP JUMPDEST PUSH2 0x1C20 DUP2 GT ISZERO PUSH2 0x4BF JUMPI PUSH1 0x5 PUSH2 0x483 JUMP JUMPDEST PUSH2 0x384 DUP2 GT ISZERO PUSH2 0x4D0 JUMPI PUSH1 0x6 PUSH2 0x483 JUMP JUMPDEST PUSH1 0x7 SWAP2 POP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2A DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xD14 PUSH1 0x2A SWAP2 CODECOPY PUSH1 0x1 DUP5 ADD PUSH1 0x6 MUL ADD MLOAD SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 PUSH1 0x0 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x563 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x526 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP4 PUSH1 0x20 ADD MLOAD DUP5 PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0x60 ADD MLOAD DUP7 PUSH1 0x80 ADD MLOAD DUP8 PUSH1 0xA0 ADD MLOAD DUP9 PUSH1 0xC0 ADD MLOAD DUP10 PUSH2 0x100 ADD MLOAD DUP11 PUSH1 0xE0 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP11 DUP2 MSTORE PUSH1 0x20 ADD DUP10 PUSH5 0xFFFFFFFFFF AND PUSH1 0xD8 SHL DUP2 MSTORE PUSH1 0x5 ADD DUP9 PUSH3 0xFFFFFF AND PUSH1 0xE8 SHL DUP2 MSTORE PUSH1 0x3 ADD DUP8 PUSH1 0xFF AND PUSH1 0xF8 SHL DUP2 MSTORE PUSH1 0x1 ADD DUP7 PUSH1 0xFF AND PUSH1 0xF8 SHL DUP2 MSTORE PUSH1 0x1 ADD DUP6 PUSH1 0xFF AND PUSH1 0xF8 SHL DUP2 MSTORE PUSH1 0x1 ADD DUP5 PUSH1 0x0 SIGNEXTEND PUSH1 0xF8 SHL DUP2 MSTORE PUSH1 0x1 ADD DUP4 PUSH1 0xFF AND PUSH1 0xF8 SHL DUP2 MSTORE PUSH1 0x1 ADD DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 SHL DUP2 MSTORE PUSH1 0x14 ADD SWAP10 POP POP POP POP POP POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP PUSH1 0x1 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x676 JUMPI INVALID JUMPDEST DUP4 PUSH1 0x60 ADD MLOAD AND PUSH1 0xFF AND PUSH1 0x0 EQ ISZERO PUSH2 0x75E JUMPI DUP1 DUP4 PUSH2 0x1C0 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x6DE JUMPI DUP1 MLOAD DUP3 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x6A1 JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 DUP5 SUB PUSH2 0x100 EXP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE DUP6 MLOAD SWAP2 SWAP1 SWAP4 ADD SWAP3 DUP6 DUP2 ADD SWAP3 POP MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x741 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x729 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP JUMPDEST DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 PUSH1 0x0 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x7C5 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x788 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP4 PUSH1 0x20 ADD MLOAD DUP5 PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0x60 ADD MLOAD DUP7 PUSH1 0x80 ADD MLOAD DUP8 PUSH1 0xA0 ADD MLOAD DUP9 PUSH1 0xC0 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP9 DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH5 0xFFFFFFFFFF AND PUSH1 0xD8 SHL DUP2 MSTORE PUSH1 0x5 ADD DUP7 PUSH3 0xFFFFFF AND PUSH1 0xE8 SHL DUP2 MSTORE PUSH1 0x3 ADD DUP6 PUSH1 0xFF AND PUSH1 0xF8 SHL DUP2 MSTORE PUSH1 0x1 ADD DUP5 PUSH1 0xFF AND PUSH1 0xF8 SHL DUP2 MSTORE PUSH1 0x1 ADD DUP4 PUSH1 0xFF AND PUSH1 0xF8 SHL DUP2 MSTORE PUSH1 0x1 ADD DUP3 PUSH1 0x0 SIGNEXTEND PUSH1 0xF8 SHL DUP2 MSTORE PUSH1 0x1 ADD SWAP8 POP POP POP POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP PUSH1 0x1 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x676 JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH2 0x8E2 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1E DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 DUP2 MSTORE POP PUSH2 0x8E9 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP5 DUP5 GT ISZERO PUSH2 0x992 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x957 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x93F JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x984 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP SWAP1 SUB SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x109 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x9CE JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x9E2 JUMPI INVALID JUMPDEST PUSH1 0x20 DUP1 DUP3 MUL PUSH2 0x9F2 DUP3 DUP3 ADD PUSH2 0xCEF JUMP JUMPDEST DUP4 DUP2 MSTORE SWAP4 POP DUP2 DUP5 ADD DUP6 DUP4 ADD DUP3 DUP8 ADD DUP5 ADD DUP9 LT ISZERO PUSH2 0xA0E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP3 POP DUP3 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0xA3E JUMPI DUP2 CALLDATALOAD DUP1 PUSH1 0xF SIGNEXTEND DUP2 EQ PUSH2 0xA2C JUMPI DUP5 DUP6 REVERT JUMPDEST DUP4 MSTORE SWAP2 DUP5 ADD SWAP2 SWAP1 DUP5 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xA14 JUMP JUMPDEST POP POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x0 DUP2 SWAP1 SIGNEXTEND DUP2 EQ PUSH2 0x109 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xA6C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA80 JUMPI INVALID JUMPDEST PUSH2 0xAB1 PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP5 ADD AND ADD PUSH2 0xCEF JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0xAC8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH3 0xFFFFFF DUP2 AND DUP2 EQ PUSH2 0x109 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH5 0xFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x109 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x109 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB2B JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xB42 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP5 ADD SWAP2 POP PUSH2 0x1E0 DUP1 DUP4 DUP8 SUB SLT ISZERO PUSH2 0xB58 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0xB61 DUP2 PUSH2 0xCEF JUMP JUMPDEST SWAP1 POP DUP3 CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0xB71 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0xB7D DUP8 DUP3 DUP7 ADD PUSH2 0xA5C JUMP JUMPDEST DUP3 MSTORE POP PUSH2 0xB8C PUSH1 0x20 DUP5 ADD PUSH2 0xAF4 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0xB9D PUSH1 0x40 DUP5 ADD PUSH2 0xAE1 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0xBAE PUSH1 0x60 DUP5 ADD PUSH2 0xB09 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0xBBF PUSH1 0x80 DUP5 ADD PUSH2 0xB09 JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH2 0xBD0 PUSH1 0xA0 DUP5 ADD PUSH2 0xB09 JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0xBE1 PUSH1 0xC0 DUP5 ADD PUSH2 0xA4A JUMP JUMPDEST PUSH1 0xC0 DUP3 ADD MSTORE PUSH2 0xBF2 PUSH1 0xE0 DUP5 ADD PUSH2 0x99A JUMP JUMPDEST PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 PUSH2 0xC05 DUP2 DUP6 ADD PUSH2 0xB09 JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE PUSH2 0x120 PUSH2 0xC17 DUP5 DUP3 ADD PUSH2 0xB09 JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE PUSH2 0x140 PUSH2 0xC29 DUP5 DUP3 ADD PUSH2 0xB09 JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE PUSH2 0x160 PUSH2 0xC3B DUP5 DUP3 ADD PUSH2 0xB09 JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE PUSH2 0x180 PUSH2 0xC4D DUP5 DUP3 ADD PUSH2 0x99A JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE PUSH2 0x1A0 PUSH2 0xC5F DUP5 DUP3 ADD PUSH2 0x99A JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE PUSH2 0x1C0 DUP4 DUP2 ADD CALLDATALOAD DUP4 DUP2 GT ISZERO PUSH2 0xC76 JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH2 0xC82 DUP9 DUP3 DUP8 ADD PUSH2 0x9BE JUMP JUMPDEST SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xCA4 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xCBC JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x8E2 DUP3 PUSH2 0xAF4 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0xFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xD0B JUMPI INVALID JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP INVALID STOP STOP STOP STOP STOP STOP STOP STOP STOP STATICCALL PUSH30 0x3B53800000000A8C0000000001FA40000000001C200000000000 STOP LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE2 PUSH24 0x8A377FDE72A6FDBD693E158626B8B7D0D32D6DB96DAEC053 DUP8 0xD3 SWAP16 0xD7 0x21 0xD1 PUSH5 0x736F6C6343 STOP SMOD DIV STOP CALLER ",
				"sourceMap": "1695:1185:5:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2173:234;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2661:216;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;1727:204::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;2413:242::-;;;;;;:::i;:::-;;:::i;1937:230::-;;;;;;:::i;:::-;;:::i;2173:234::-;2314:18;2355:45;2385:14;2355:29;:45::i;:::-;2348:52;;2173:234;;;;:::o;2661:216::-;2780:14;2817:53;2851:18;2817:33;:53::i;1727:204::-;1844:6;1873:51;1899:24;1873:25;:51::i;2413:242::-;2554:22;2599:49;2633:14;2599:33;:49::i;1937:230::-;2076:18;2117:43;2145:14;2117:27;:43::i;7461:1285:1:-;7600:18;7634:17;7760:14;:31;;;7743:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7733:60;;;;;;7833:14;:33;;;7922:14;:30;;;7990:14;:21;;;8025:14;:29;;;8069:14;:26;;;8166:14;:21;;;8252:14;:29;;;8295:14;:24;;;8333:14;:24;;;8371:14;:25;;;7668:805;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7661:812;;8520:4;8538:14;:30;;;8582:14;:30;;;8626:14;:35;;;8675:14;:22;;;8490:217;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8483:224;;8734:4;8724:15;;;;;;8717:22;;;7461:1285;;;:::o;5019:1240::-;5136:14;;;5229:57;:27;;;5269:15;5229:31;:57::i;:::-;5196:90;;5355:18;5330:22;:43;5322:77;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5438:17;5413:22;:42;5409:811;;;5505:39;5499:46;5482:63;;5409:811;;;5589:16;5564:22;:41;5560:660;;;5654:40;5648:47;;5560:660;5739:12;5714:22;:37;5710:510;;;5802:39;5796:46;;5710:510;5886:11;5861:22;:36;5857:363;;;5947:38;5941:45;;5857:363;6030:7;6005:22;:32;6001:219;;;6086:39;6080:46;;6001:219;6176:43;6153:67;;6001:219;-1:-1:-1;6238:14:1;5019:1240;-1:-1:-1;;5019:1240:1:o;4541:375::-;4656:6;4678:18;4699:13;;;;;;;;;;;;;;;;;4764:1;4737:28;;4310:1;4736:52;4858:18;4852:25;;-1:-1:-1;;4541:375:1;;;:::o;8752:1331::-;8880:22;9059:17;9150:14;:31;;;9133:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9123:60;;;;;;9223:14;:33;;;9312:14;:30;;;9380:14;:21;;;9415:14;:29;;;9459:14;:26;;;9556:14;:21;;;9642:14;:29;;;9686:14;:25;;;9093:628;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9086:635;;9853:58;9847:65;;;;;;;;9823:14;:21;;;:89;:94;;9916:1;9823:94;9818:226;;;9975:4;9997:14;:22;;;9941:92;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;9941:92:1;;;;-1:-1:-1;9941:92:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9934:99;;9818:226;10060:15;;;;;;;;8752:1331;-1:-1:-1;;8752:1331:1:o;6265:1190::-;6484:16;6516:17;6607:14;:31;;;6590:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6580:60;;;;;;6680:14;:33;;;6769:14;:30;;;6837:14;:21;;;6872:14;:29;;;6916:14;:26;;;7013:14;:21;;;6550:544;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6543:551;;7226:58;7220:65;;;;;;;1322:134:7;1380:7;1406:43;1410:1;1413;1406:43;;;;;;;;;;;;;;;;;:3;:43::i;:::-;1399:50;1322:134;-1:-1:-1;;;1322:134:7:o;1747:187::-;1833:7;1868:12;1860:6;;;;1852:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1903:5:7;;;1747:187::o;14:198:11:-;84:20;;144:42;133:54;;123:65;;113:2;;202:1;199;192:12;217:857;;329:3;322:4;314:6;310:17;306:27;296:2;;351:5;344;337:20;296:2;395:6;382:20;425:18;417:6;414:30;411:2;;;447:9;411:2;477:4;512:2;504:6;500:15;533:27;556:2;552;548:11;533:27;:::i;:::-;594:21;;;524:36;-1:-1:-1;631:14:11;;;665:15;;;699;;;695:24;;692:33;-1:-1:-1;689:2:11;;;738:1;735;728:12;689:2;760:1;751:10;;781:1;791:277;807:6;802:3;799:15;791:277;;;886:3;873:17;938:5;934:2;923:21;916:5;913:32;903:2;;959:1;956;949:12;903:2;976:18;;1014:12;;;;1046;;;;833:1;824:11;791:277;;;795:3;;;;;;286:788;;;;:::o;1079:161::-;1146:20;;1079:161;1195:20;;;1185:31;;1175:2;;1230:1;1227;1220:12;1245:581;;1343:3;1336:4;1328:6;1324:17;1320:27;1310:2;;1365:5;1358;1351:20;1310:2;1409:6;1396:20;1439:18;1431:6;1428:30;1425:2;;;1461:9;1425:2;1490:117;1601:4;1532:66;1525:4;1517:6;1513:17;1509:90;1505:101;1490:117;:::i;:::-;1481:126;;1630:6;1623:5;1616:21;1684:3;1677:4;1668:6;1660;1656:19;1652:30;1649:39;1646:2;;;1701:1;1698;1691:12;1646:2;1764:6;1757:4;1749:6;1745:17;1738:4;1731:5;1727:16;1714:57;1818:1;1791:18;;;1811:4;1787:29;1780:40;1795:5;1300:526;-1:-1:-1;;1300:526:11:o;1831:163::-;1900:20;;1960:8;1949:20;;1939:31;;1929:2;;1984:1;1981;1974:12;1999:167;2068:20;;2128:12;2117:24;;2107:35;;2097:2;;2156:1;2153;2146:12;2171:158;2239:20;;2299:4;2288:16;;2278:27;;2268:2;;2319:1;2316;2309:12;2334:1879;;2477:2;2465:9;2456:7;2452:23;2448:32;2445:2;;;2498:6;2490;2483:22;2445:2;2543:9;2530:23;2572:18;2613:2;2605:6;2602:14;2599:2;;;2634:6;2626;2619:22;2599:2;2677:6;2666:9;2662:22;2652:32;;2703:6;2743:2;2738;2729:7;2725:16;2721:25;2718:2;;;2764:6;2756;2749:22;2718:2;2795:18;2810:2;2795:18;:::i;:::-;2782:31;;2851:2;2838:16;2879:2;2869:8;2866:16;2863:2;;;2900:6;2892;2885:22;2863:2;2932:47;2971:7;2960:8;2956:2;2952:17;2932:47;:::i;:::-;2925:5;2918:62;;3012:32;3040:2;3036;3032:11;3012:32;:::i;:::-;3007:2;3000:5;2996:14;2989:56;3077:32;3105:2;3101;3097:11;3077:32;:::i;:::-;3072:2;3065:5;3061:14;3054:56;3142:31;3169:2;3165;3161:11;3142:31;:::i;:::-;3137:2;3130:5;3126:14;3119:55;3207:32;3234:3;3230:2;3226:12;3207:32;:::i;:::-;3201:3;3194:5;3190:15;3183:57;3273:32;3300:3;3296:2;3292:12;3273:32;:::i;:::-;3267:3;3260:5;3256:15;3249:57;3339:31;3365:3;3361:2;3357:12;3339:31;:::i;:::-;3333:3;3326:5;3322:15;3315:56;3404:34;3433:3;3429:2;3425:12;3404:34;:::i;:::-;3398:3;3391:5;3387:15;3380:59;3458:3;3493:31;3520:2;3516;3512:11;3493:31;:::i;:::-;3477:14;;;3470:55;3544:3;3579:31;3598:11;;;3579:31;:::i;:::-;3563:14;;;3556:55;3630:3;3665:31;3684:11;;;3665:31;:::i;:::-;3649:14;;;3642:55;3716:3;3751:31;3770:11;;;3751:31;:::i;:::-;3735:14;;;3728:55;3802:3;3837:33;3858:11;;;3837:33;:::i;:::-;3821:14;;;3814:57;3890:3;3925:33;3946:11;;;3925:33;:::i;:::-;3909:14;;;3902:57;3979:3;4020:12;;;4007:26;4045:16;;;4042:2;;;4079:6;4071;4064:22;4042:2;4121:61;4174:7;4163:8;4159:2;4155:17;4121:61;:::i;:::-;4104:15;;;4097:86;;;;-1:-1:-1;4108:5:11;2435:1778;-1:-1:-1;;;;;2435:1778:11:o;4218:190::-;;4330:2;4318:9;4309:7;4305:23;4301:32;4298:2;;;4351:6;4343;4336:22;4298:2;-1:-1:-1;4379:23:11;;4288:120;-1:-1:-1;4288:120:11:o;4413:196::-;;4524:2;4512:9;4503:7;4499:23;4495:32;4492:2;;;4545:6;4537;4530:22;4492:2;4573:30;4593:9;4573:30;:::i;4614:177::-;4760:25;;;4748:2;4733:18;;4715:76::o;4796:196::-;4970:14;4958:27;;;;4940:46;;4928:2;4913:18;;4895:97::o;4997:184::-;5169:4;5157:17;;;;5139:36;;5127:2;5112:18;;5094:87::o;5186:242::-;5256:2;5250:9;5286:17;;;5333:18;5318:34;;5354:22;;;5315:62;5312:2;;;5380:9;5312:2;5407;5400:22;5230:198;;-1:-1:-1;5230:198:11:o"
			}
		}
	},
	"sourceTreeHashHex": "0x373d0fae0f04c6d181d574e2ab7c1a25906f5de5d3520a35297aa3f5312c6f53",
	"sources": {
		"./DigiOptionsTest.sol": {
			"id": 5,
			"content": "/*\n User Driven Option Markets Contract used by https://www.digioptions.com\n\n This is just a helper to test internal functions which are not\n exposed from main contracts.\n\n Copyright (c) [www.digioptions.com](https://www.digioptions.com)\n\n Designed to work with signatures from [www.factsigner.com](https://www.factsigner.com)\n\n Public repository:\n https://github.com/berlincode/digioptions-contracts.js\n\n elastic.code@gmail.com\n mail@digioptions.com\n\n SPDX-License-Identifier: MIT\n\n MIT License\n\n Copyright (c) digioptions.com (https://www.digioptions.com)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n*/\n\npragma solidity >=0.7.0;\npragma experimental ABIEncoderV2;\n\nimport \"./DigiOptionsLib.sol\";\n\n\ncontract DigiOptionsTest {\n\n    function getDividerTest(\n        uint256 calculatedMarketInterval\n    )\n        public\n        pure\n        returns (uint48)\n    {\n        return DigiOptionsLib.getDivider(calculatedMarketInterval);\n    }\n\n    function calcFactHashTest (\n        DigiOptionsLib.MarketBaseData memory marketBaseData\n    )\n        public\n        pure\n        returns (bytes32 marketHash)\n    {\n        return DigiOptionsLib.calcFactHash(marketBaseData);\n    }\n\n    function calcMarketHashTest (\n        DigiOptionsLib.MarketBaseData memory marketBaseData\n    )\n        public\n        pure\n        returns (bytes32 marketHash)\n    {\n        return DigiOptionsLib.calcMarketHash(marketBaseData);\n    }\n\n    function calcBaseMarketHash (\n        DigiOptionsLib.MarketBaseData memory marketBaseData\n    )\n        public\n        pure\n        returns (bytes32 baseMarketHash)\n    {\n        return DigiOptionsLib.calcBaseMarketHash(marketBaseData);\n    }\n\n    function calcMarketIntervalTest (\n        uint40 expirationDatetime\n    )\n        public\n        view\n        returns (uint8 interval)\n    {\n        return DigiOptionsLib.calcMarketInterval(expirationDatetime);\n    }\n\n}\n"
		},
		"./DigiOptionsLib.sol": {
			"id": 1,
			"content": "/*\n\n Public repository:\n https://github.com/berlincode/digioptions-contracts.js\n\n elastic.code@gmail.com\n mail@digioptions.com\n\n SPDX-License-Identifier: MIT\n\n MIT License\n\n Copyright (c) digioptions.com (https://www.digioptions.com)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n*/\n\npragma solidity >=0.7.0;\n\nimport \"factsigner/contracts/FactsignerDefines.sol\";\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n//import \"@openzeppelin/contracts/math/SignedSafeMath.sol\";\n\n\nlibrary DigiOptionsLib {\n    using SafeMath for uint256;\n\n    /*\n        For future updgrade we want getContractInfo() to remain its signature('getContractInfo(uint256[]')\n        so we declared the return values as dynamic list. The meaning of each entry is defined via\n        follwing enum.\n    */\n    enum InfoValues { // rename InfoContract\n        CONTRACT_TYPE_IDX, // 0\n        VERSION_MARKET_LISTER_IDX, // 1\n        VERSION_MARKETS_IDX, // 2\n        DIGIOPTIONS_MARKETS_ADDR_IDX, // 3\n        BLOCK_NUMBER_CREATED_IDX, // 4\n        TIMESTAMP_MARKET_CREATED_IDX, // 5\n        OFFER_MAX_BLOCKS_INTO_FUTURE_IDX, // 6\n        ATOMIC_OPTION_PAYOUT_WEI_EXP_IDX, // 7\n        EXISTING_MARKETS_IDX, // 8\n\n        MAX // meta info\n    }\n\n    enum InfoLister {\n        VERSION_MARKET_LISTER_IDX, // 0\n        OWNER_IDX,\n        TRANSACTION_FEE_TOTAL_MAX_IDX,\n        TRANSACTION_FEE0_MIN_IDX,\n        TRANSACTION_FEE1_MIN_IDX,\n        TRANSACTION_FEE_SIGNER_MIN_IDX,\n        OPEN_DELAY_SECONDS_IDX,\n\n        MAX // meta info\n    }\n\n    enum ContractType {\n        UNKNOWN,\n        DIGIOPTIONSMARKETS, // == 1\n        DIGIOPTIONSMARKETLISTER // == 2\n    }\n\n    enum UserState {\n        NONE,\n        EXISTS,\n        PAYED_OUT\n    }\n\n    struct Signature {\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n    }\n\n    struct MarketBaseData {\n        /* constant core market data, part of marketHash calculation */\n\n        string underlyingString;\n        uint40 expirationDatetime; /* used for sorting contracts */\n        uint24 objectionPeriod; /* e.g. 3600 seconds */\n\n        uint8 config;\n        uint8 marketCategory;\n\n        uint8 baseUnitExp;\n        int8 ndigit;\n\n        address signerAddr; /* address used to check the signed result (e.g. of factsigner) */\n\n        uint8 marketInterval;\n        uint8 transactionFee0; /* fee in 1/100 per cent (payed by orderTaker) */\n        uint8 transactionFee1; /* fee in 1/100 per cent (payed by orderTaker) */\n        uint8 transactionFeeSigner; /* fee in 1/100 per cent (payed by orderTaker) */\n        address feeTaker0;\n        address feeTaker1;\n        int128[] strikes;\n    }\n\n    struct MarketState {\n        /* winningOptionID is only valid if settled == true */\n        uint128 fee; // total payed fee (for all fee takers)\n        uint16 winningOptionID;\n        bool settled;\n    }\n\n    struct MarketData {\n        MarketBaseData marketBaseData;\n        MarketState marketState;\n        bytes32 marketHash;\n        UserState userState;\n        bool testMarket; // only used by MarketLister\n    }\n\n\n// TODO remove long term? (and add 2-year?)\n// TODO remove uint8() conversion\n// TODO time offset between marketsContract and marketListerContract?\n\n    /* until const arrays are supported in solidity we use our custom function */\n    uint256 constant DIVIDER_ENTRY_BYTES = 6;\n    bytes constant DIVIDER_TABLE = \"\\\n\\x00\\x00\\x00\\x00\\x00\\x00\\\n\\x00\\x00\\x00\\xfa\\x7d\\x00\\\n\\x00\\x00\\x00\\x3b\\x53\\x80\\\n\\x00\\x00\\x00\\x0a\\x8c\\x00\\\n\\x00\\x00\\x00\\x01\\xfa\\x40\\\n\\x00\\x00\\x00\\x00\\x1c\\x20\\\n\\x00\\x00\\x00\\x00\\x00\\x00\\\n\";\n\n    function getDivider(\n        uint256 calculatedMarketInterval\n    )\n        internal\n        pure\n        returns (uint48)\n    {\n        bytes memory table = DIVIDER_TABLE;\n        uint offset = (calculatedMarketInterval + 1) * DIVIDER_ENTRY_BYTES;\n        uint48 value;\n        assembly {\n            value := mload(add(table, offset))\n        }\n\n        return value;\n    }\n\n\n    // TODO this is only 'view' and not internal because of block.timestamp - maybe change that\n    function calcMarketInterval (\n        uint40 expirationDatetime\n    )\n        internal\n        view\n        returns (uint8 interval)\n    {\n        uint8 marketInterval;\n        uint256 secondsUntilExpiration = uint256(expirationDatetime).sub(uint256(block.timestamp));\n        // TODO > or >= ?\n        require(secondsUntilExpiration < 730 * 24 * 60 * 60, \"too far in the future\");\n        if (secondsUntilExpiration > 45 * 24 * 60 * 60) // > 45 days\n            marketInterval = uint8(FactsignerDefines.MarketInterval.YEARLY);\n        else if (secondsUntilExpiration > 8 * 24 * 60 * 60) // > 8 days\n            marketInterval = uint8(FactsignerDefines.MarketInterval.MONTHLY);\n        else if (secondsUntilExpiration > 36 * 60 * 60) // > 36 hours\n            marketInterval = uint8(FactsignerDefines.MarketInterval.WEEKLY);\n        else if (secondsUntilExpiration > 2 * 60 * 60) // > 2 hours\n            marketInterval = uint8(FactsignerDefines.MarketInterval.DAILY);\n        else if (secondsUntilExpiration > 15 * 60) // > 15 min\n            marketInterval = uint8(FactsignerDefines.MarketInterval.HOURLY);\n        else\n            marketInterval = uint8(FactsignerDefines.MarketInterval.SHORT_TERM);\n\n        return marketInterval;\n    }\n\n    function calcFactHash (\n        DigiOptionsLib.MarketBaseData memory marketBaseData\n    )\n        internal\n        pure // this should be external (see https://github.com/ethereum/solidity/issues/5479)\n        returns (bytes32 factHash)\n    {\n        bytes memory data;\n        data = abi.encodePacked(\n            keccak256(abi.encodePacked(marketBaseData.underlyingString)), /* 'name' utf8 encoded */\n            marketBaseData.expirationDatetime, /* 'settlement' unix epoch seconds UTC */\n            marketBaseData.objectionPeriod, /* e.g. 3600 seconds */\n            marketBaseData.config,\n            marketBaseData.marketCategory,\n\n            marketBaseData.baseUnitExp, /* e.g. 18 -> baseUnit = 10**18 = 1000000000000000000 */\n            marketBaseData.ndigit /* 'ndigit' number of digits (may be negative) */\n        );\n        // if this is a named market we simply use strikes as factsigner's namedRanges\n        if ((marketBaseData.config & uint8(FactsignerDefines.ConfigMask.ConfigMarketTypeIsStrikedMask) == 0)) {\n            data = abi.encodePacked(\n                data,\n                marketBaseData.strikes\n            );\n        }\n        return keccak256(data);\n    }\n\n    function calcMarketHash (\n        DigiOptionsLib.MarketBaseData memory marketBaseData\n    )\n        internal\n        pure\n        returns (bytes32 marketHash)\n    {\n        bytes memory data;\n        data = abi.encodePacked(\n            // TODO from facthash?\n            keccak256(abi.encodePacked(marketBaseData.underlyingString)), /* 'name' utf8 encoded */\n            marketBaseData.expirationDatetime, /* 'settlement' unix epoch seconds UTC */\n            marketBaseData.objectionPeriod, /* e.g. 3600 seconds */\n            marketBaseData.config,\n            marketBaseData.marketCategory,\n\n            marketBaseData.baseUnitExp, /* e.g. 18 -> baseUnit = 10**18 = 1000000000000000000 */\n            marketBaseData.ndigit, /* 'ndigit' number of digits (may be negative) */\n\n            marketBaseData.marketInterval,\n            marketBaseData.feeTaker0,\n            marketBaseData.feeTaker1,\n            marketBaseData.signerAddr /* address used to check the signed result (e.g. of factsigner) */\n        );\n        data = abi.encodePacked(\n            data,\n            marketBaseData.transactionFee0,\n            marketBaseData.transactionFee1,\n            marketBaseData.transactionFeeSigner,\n            marketBaseData.strikes\n        );\n        return keccak256(data);\n    }\n\n    function calcBaseMarketHash (\n        MarketBaseData memory marketBaseData\n    )\n        internal\n        pure\n        returns (bytes32 baseMarketHash)\n    {\n        /* baseMarketHash is similar to marketHash but does not contain all elements. It's basically a factHash with added marketInterval */\n        bytes memory data;\n        data = abi.encodePacked(\n            keccak256(abi.encodePacked(marketBaseData.underlyingString)), /* 'name' utf8 encoded */\n            marketBaseData.expirationDatetime, /* 'settlement' unix epoch seconds UTC */\n            marketBaseData.objectionPeriod, /* e.g. 3600 seconds */\n            marketBaseData.config,\n            marketBaseData.marketCategory,\n\n            marketBaseData.baseUnitExp, /* e.g. 18 -> baseUnit = 10**18 = 1000000000000000000 */\n            marketBaseData.ndigit, /* 'ndigit' number of digits (may be negative) */\n\n            marketBaseData.marketInterval,\n\n            marketBaseData.signerAddr\n        );\n        // if this is a named market we simply use strikes as factsigner's namedRanges\n        if ((marketBaseData.config & uint8(FactsignerDefines.ConfigMask.ConfigMarketTypeIsStrikedMask) == 0)) {\n            data = abi.encodePacked(\n                data,\n                marketBaseData.strikes\n            );\n        }\n        return keccak256(data);\n\n    }\n\n\n    bytes constant OFFER_PREFIX = \"\\x19Ethereum Signed Message:\\n32\"; // TODO\n    function verifyOffer(\n        bytes32 message,\n        Signature memory signature\n    )\n        internal\n        pure\n        returns (address addr)\n    {\n        bytes32 prefixedHash = keccak256(\n            abi.encodePacked(\n                OFFER_PREFIX,\n                message\n            )\n        );\n        address signer = ecrecover(\n            prefixedHash,\n            signature.v,\n            signature.r,\n            signature.s\n        );\n        return signer;\n    }\n}\n"
		},
		"factsigner/contracts/FactsignerDefines.sol": {
			"id": 9,
			"content": "/*\n Contract defines for https://www.factsigner.com\n\n Public repository:\n https://github.com/berlincode/factsigner\n\n Version 7.0.0\n\n SPDX-License-Identifier: MIT\n\n MIT License\n\n Copyright (c) factsigner.com (https://www.factsigner.com)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n*/\n\npragma solidity >=0.7.0;\n\nlibrary FactsignerDefines\n{\n    // TODO we use a enum here as a hack until\n    // https://github.com/ethereum/solidity/issues/1290 is solved\n    enum ConfigMask {\n        ConfigMaskDummy0,\n        ConfigMarketTypeIsStrikedMask, // = 1\n        ConfigMaskDummy2,\n        ConfigMaskDummy3,\n        ConfigIntervalTypeIsUsedMask // = 4\n    }\n\n    enum SettlementType {\n        FINAL, // = 0\n        PRELIMINARY_FIRST // = 1\n        //PRELIMINARY_MAX // = 65535\n    }\n\n    enum MarketInterval {\n        NONE, // = 0\n        // the following constants are just proposed assignments\n        YEARLY, // = 1\n        QUATERLY, // 2\n        MONTHLY, // = 3\n        WEEKLY, // = 4\n        DAILY, // = 5\n        HOURLY, // = 6\n        SHORT_TERM // = 7\n    }\n\n}\n"
		},
		"@openzeppelin/contracts/math/SafeMath.sol": {
			"id": 7,
			"content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
		}
	},
	"sourceCodes": {
		"./DigiOptionsTest.sol": "/*\n User Driven Option Markets Contract used by https://www.digioptions.com\n\n This is just a helper to test internal functions which are not\n exposed from main contracts.\n\n Copyright (c) [www.digioptions.com](https://www.digioptions.com)\n\n Designed to work with signatures from [www.factsigner.com](https://www.factsigner.com)\n\n Public repository:\n https://github.com/berlincode/digioptions-contracts.js\n\n elastic.code@gmail.com\n mail@digioptions.com\n\n SPDX-License-Identifier: MIT\n\n MIT License\n\n Copyright (c) digioptions.com (https://www.digioptions.com)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n*/\n\npragma solidity >=0.7.0;\npragma experimental ABIEncoderV2;\n\nimport \"./DigiOptionsLib.sol\";\n\n\ncontract DigiOptionsTest {\n\n    function getDividerTest(\n        uint256 calculatedMarketInterval\n    )\n        public\n        pure\n        returns (uint48)\n    {\n        return DigiOptionsLib.getDivider(calculatedMarketInterval);\n    }\n\n    function calcFactHashTest (\n        DigiOptionsLib.MarketBaseData memory marketBaseData\n    )\n        public\n        pure\n        returns (bytes32 marketHash)\n    {\n        return DigiOptionsLib.calcFactHash(marketBaseData);\n    }\n\n    function calcMarketHashTest (\n        DigiOptionsLib.MarketBaseData memory marketBaseData\n    )\n        public\n        pure\n        returns (bytes32 marketHash)\n    {\n        return DigiOptionsLib.calcMarketHash(marketBaseData);\n    }\n\n    function calcBaseMarketHash (\n        DigiOptionsLib.MarketBaseData memory marketBaseData\n    )\n        public\n        pure\n        returns (bytes32 baseMarketHash)\n    {\n        return DigiOptionsLib.calcBaseMarketHash(marketBaseData);\n    }\n\n    function calcMarketIntervalTest (\n        uint40 expirationDatetime\n    )\n        public\n        view\n        returns (uint8 interval)\n    {\n        return DigiOptionsLib.calcMarketInterval(expirationDatetime);\n    }\n\n}\n",
		"./DigiOptionsLib.sol": "/*\n\n Public repository:\n https://github.com/berlincode/digioptions-contracts.js\n\n elastic.code@gmail.com\n mail@digioptions.com\n\n SPDX-License-Identifier: MIT\n\n MIT License\n\n Copyright (c) digioptions.com (https://www.digioptions.com)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n*/\n\npragma solidity >=0.7.0;\n\nimport \"factsigner/contracts/FactsignerDefines.sol\";\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n//import \"@openzeppelin/contracts/math/SignedSafeMath.sol\";\n\n\nlibrary DigiOptionsLib {\n    using SafeMath for uint256;\n\n    /*\n        For future updgrade we want getContractInfo() to remain its signature('getContractInfo(uint256[]')\n        so we declared the return values as dynamic list. The meaning of each entry is defined via\n        follwing enum.\n    */\n    enum InfoValues { // rename InfoContract\n        CONTRACT_TYPE_IDX, // 0\n        VERSION_MARKET_LISTER_IDX, // 1\n        VERSION_MARKETS_IDX, // 2\n        DIGIOPTIONS_MARKETS_ADDR_IDX, // 3\n        BLOCK_NUMBER_CREATED_IDX, // 4\n        TIMESTAMP_MARKET_CREATED_IDX, // 5\n        OFFER_MAX_BLOCKS_INTO_FUTURE_IDX, // 6\n        ATOMIC_OPTION_PAYOUT_WEI_EXP_IDX, // 7\n        EXISTING_MARKETS_IDX, // 8\n\n        MAX // meta info\n    }\n\n    enum InfoLister {\n        VERSION_MARKET_LISTER_IDX, // 0\n        OWNER_IDX,\n        TRANSACTION_FEE_TOTAL_MAX_IDX,\n        TRANSACTION_FEE0_MIN_IDX,\n        TRANSACTION_FEE1_MIN_IDX,\n        TRANSACTION_FEE_SIGNER_MIN_IDX,\n        OPEN_DELAY_SECONDS_IDX,\n\n        MAX // meta info\n    }\n\n    enum ContractType {\n        UNKNOWN,\n        DIGIOPTIONSMARKETS, // == 1\n        DIGIOPTIONSMARKETLISTER // == 2\n    }\n\n    enum UserState {\n        NONE,\n        EXISTS,\n        PAYED_OUT\n    }\n\n    struct Signature {\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n    }\n\n    struct MarketBaseData {\n        /* constant core market data, part of marketHash calculation */\n\n        string underlyingString;\n        uint40 expirationDatetime; /* used for sorting contracts */\n        uint24 objectionPeriod; /* e.g. 3600 seconds */\n\n        uint8 config;\n        uint8 marketCategory;\n\n        uint8 baseUnitExp;\n        int8 ndigit;\n\n        address signerAddr; /* address used to check the signed result (e.g. of factsigner) */\n\n        uint8 marketInterval;\n        uint8 transactionFee0; /* fee in 1/100 per cent (payed by orderTaker) */\n        uint8 transactionFee1; /* fee in 1/100 per cent (payed by orderTaker) */\n        uint8 transactionFeeSigner; /* fee in 1/100 per cent (payed by orderTaker) */\n        address feeTaker0;\n        address feeTaker1;\n        int128[] strikes;\n    }\n\n    struct MarketState {\n        /* winningOptionID is only valid if settled == true */\n        uint128 fee; // total payed fee (for all fee takers)\n        uint16 winningOptionID;\n        bool settled;\n    }\n\n    struct MarketData {\n        MarketBaseData marketBaseData;\n        MarketState marketState;\n        bytes32 marketHash;\n        UserState userState;\n        bool testMarket; // only used by MarketLister\n    }\n\n\n// TODO remove long term? (and add 2-year?)\n// TODO remove uint8() conversion\n// TODO time offset between marketsContract and marketListerContract?\n\n    /* until const arrays are supported in solidity we use our custom function */\n    uint256 constant DIVIDER_ENTRY_BYTES = 6;\n    bytes constant DIVIDER_TABLE = \"\\\n\\x00\\x00\\x00\\x00\\x00\\x00\\\n\\x00\\x00\\x00\\xfa\\x7d\\x00\\\n\\x00\\x00\\x00\\x3b\\x53\\x80\\\n\\x00\\x00\\x00\\x0a\\x8c\\x00\\\n\\x00\\x00\\x00\\x01\\xfa\\x40\\\n\\x00\\x00\\x00\\x00\\x1c\\x20\\\n\\x00\\x00\\x00\\x00\\x00\\x00\\\n\";\n\n    function getDivider(\n        uint256 calculatedMarketInterval\n    )\n        internal\n        pure\n        returns (uint48)\n    {\n        bytes memory table = DIVIDER_TABLE;\n        uint offset = (calculatedMarketInterval + 1) * DIVIDER_ENTRY_BYTES;\n        uint48 value;\n        assembly {\n            value := mload(add(table, offset))\n        }\n\n        return value;\n    }\n\n\n    // TODO this is only 'view' and not internal because of block.timestamp - maybe change that\n    function calcMarketInterval (\n        uint40 expirationDatetime\n    )\n        internal\n        view\n        returns (uint8 interval)\n    {\n        uint8 marketInterval;\n        uint256 secondsUntilExpiration = uint256(expirationDatetime).sub(uint256(block.timestamp));\n        // TODO > or >= ?\n        require(secondsUntilExpiration < 730 * 24 * 60 * 60, \"too far in the future\");\n        if (secondsUntilExpiration > 45 * 24 * 60 * 60) // > 45 days\n            marketInterval = uint8(FactsignerDefines.MarketInterval.YEARLY);\n        else if (secondsUntilExpiration > 8 * 24 * 60 * 60) // > 8 days\n            marketInterval = uint8(FactsignerDefines.MarketInterval.MONTHLY);\n        else if (secondsUntilExpiration > 36 * 60 * 60) // > 36 hours\n            marketInterval = uint8(FactsignerDefines.MarketInterval.WEEKLY);\n        else if (secondsUntilExpiration > 2 * 60 * 60) // > 2 hours\n            marketInterval = uint8(FactsignerDefines.MarketInterval.DAILY);\n        else if (secondsUntilExpiration > 15 * 60) // > 15 min\n            marketInterval = uint8(FactsignerDefines.MarketInterval.HOURLY);\n        else\n            marketInterval = uint8(FactsignerDefines.MarketInterval.SHORT_TERM);\n\n        return marketInterval;\n    }\n\n    function calcFactHash (\n        DigiOptionsLib.MarketBaseData memory marketBaseData\n    )\n        internal\n        pure // this should be external (see https://github.com/ethereum/solidity/issues/5479)\n        returns (bytes32 factHash)\n    {\n        bytes memory data;\n        data = abi.encodePacked(\n            keccak256(abi.encodePacked(marketBaseData.underlyingString)), /* 'name' utf8 encoded */\n            marketBaseData.expirationDatetime, /* 'settlement' unix epoch seconds UTC */\n            marketBaseData.objectionPeriod, /* e.g. 3600 seconds */\n            marketBaseData.config,\n            marketBaseData.marketCategory,\n\n            marketBaseData.baseUnitExp, /* e.g. 18 -> baseUnit = 10**18 = 1000000000000000000 */\n            marketBaseData.ndigit /* 'ndigit' number of digits (may be negative) */\n        );\n        // if this is a named market we simply use strikes as factsigner's namedRanges\n        if ((marketBaseData.config & uint8(FactsignerDefines.ConfigMask.ConfigMarketTypeIsStrikedMask) == 0)) {\n            data = abi.encodePacked(\n                data,\n                marketBaseData.strikes\n            );\n        }\n        return keccak256(data);\n    }\n\n    function calcMarketHash (\n        DigiOptionsLib.MarketBaseData memory marketBaseData\n    )\n        internal\n        pure\n        returns (bytes32 marketHash)\n    {\n        bytes memory data;\n        data = abi.encodePacked(\n            // TODO from facthash?\n            keccak256(abi.encodePacked(marketBaseData.underlyingString)), /* 'name' utf8 encoded */\n            marketBaseData.expirationDatetime, /* 'settlement' unix epoch seconds UTC */\n            marketBaseData.objectionPeriod, /* e.g. 3600 seconds */\n            marketBaseData.config,\n            marketBaseData.marketCategory,\n\n            marketBaseData.baseUnitExp, /* e.g. 18 -> baseUnit = 10**18 = 1000000000000000000 */\n            marketBaseData.ndigit, /* 'ndigit' number of digits (may be negative) */\n\n            marketBaseData.marketInterval,\n            marketBaseData.feeTaker0,\n            marketBaseData.feeTaker1,\n            marketBaseData.signerAddr /* address used to check the signed result (e.g. of factsigner) */\n        );\n        data = abi.encodePacked(\n            data,\n            marketBaseData.transactionFee0,\n            marketBaseData.transactionFee1,\n            marketBaseData.transactionFeeSigner,\n            marketBaseData.strikes\n        );\n        return keccak256(data);\n    }\n\n    function calcBaseMarketHash (\n        MarketBaseData memory marketBaseData\n    )\n        internal\n        pure\n        returns (bytes32 baseMarketHash)\n    {\n        /* baseMarketHash is similar to marketHash but does not contain all elements. It's basically a factHash with added marketInterval */\n        bytes memory data;\n        data = abi.encodePacked(\n            keccak256(abi.encodePacked(marketBaseData.underlyingString)), /* 'name' utf8 encoded */\n            marketBaseData.expirationDatetime, /* 'settlement' unix epoch seconds UTC */\n            marketBaseData.objectionPeriod, /* e.g. 3600 seconds */\n            marketBaseData.config,\n            marketBaseData.marketCategory,\n\n            marketBaseData.baseUnitExp, /* e.g. 18 -> baseUnit = 10**18 = 1000000000000000000 */\n            marketBaseData.ndigit, /* 'ndigit' number of digits (may be negative) */\n\n            marketBaseData.marketInterval,\n\n            marketBaseData.signerAddr\n        );\n        // if this is a named market we simply use strikes as factsigner's namedRanges\n        if ((marketBaseData.config & uint8(FactsignerDefines.ConfigMask.ConfigMarketTypeIsStrikedMask) == 0)) {\n            data = abi.encodePacked(\n                data,\n                marketBaseData.strikes\n            );\n        }\n        return keccak256(data);\n\n    }\n\n\n    bytes constant OFFER_PREFIX = \"\\x19Ethereum Signed Message:\\n32\"; // TODO\n    function verifyOffer(\n        bytes32 message,\n        Signature memory signature\n    )\n        internal\n        pure\n        returns (address addr)\n    {\n        bytes32 prefixedHash = keccak256(\n            abi.encodePacked(\n                OFFER_PREFIX,\n                message\n            )\n        );\n        address signer = ecrecover(\n            prefixedHash,\n            signature.v,\n            signature.r,\n            signature.s\n        );\n        return signer;\n    }\n}\n",
		"factsigner/contracts/FactsignerDefines.sol": "/*\n Contract defines for https://www.factsigner.com\n\n Public repository:\n https://github.com/berlincode/factsigner\n\n Version 7.0.0\n\n SPDX-License-Identifier: MIT\n\n MIT License\n\n Copyright (c) factsigner.com (https://www.factsigner.com)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n*/\n\npragma solidity >=0.7.0;\n\nlibrary FactsignerDefines\n{\n    // TODO we use a enum here as a hack until\n    // https://github.com/ethereum/solidity/issues/1290 is solved\n    enum ConfigMask {\n        ConfigMaskDummy0,\n        ConfigMarketTypeIsStrikedMask, // = 1\n        ConfigMaskDummy2,\n        ConfigMaskDummy3,\n        ConfigIntervalTypeIsUsedMask // = 4\n    }\n\n    enum SettlementType {\n        FINAL, // = 0\n        PRELIMINARY_FIRST // = 1\n        //PRELIMINARY_MAX // = 65535\n    }\n\n    enum MarketInterval {\n        NONE, // = 0\n        // the following constants are just proposed assignments\n        YEARLY, // = 1\n        QUATERLY, // 2\n        MONTHLY, // = 3\n        WEEKLY, // = 4\n        DAILY, // = 5\n        HOURLY, // = 6\n        SHORT_TERM // = 7\n    }\n\n}\n",
		"@openzeppelin/contracts/math/SafeMath.sol": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
	},
	"compiler": {
		"name": "solc",
		"version": "0.7.4+commit.3f05b770",
		"settings": {
			"remappings": [
				"factsigner=/home/ulf/digioptions/digioptions-contracts.js/node_modules/factsigner",
				"@openzeppelin/contracts=/home/ulf/digioptions/digioptions-contracts.js/node_modules/@openzeppelin/contracts"
			],
			"optimizer": {
				"enabled": true,
				"runs": 20000,
				"details": {
					"yul": true,
					"deduplicate": true,
					"cse": true,
					"constantOptimizer": true
				}
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap"
					]
				}
			}
		}
	},
	"chains": {}
}