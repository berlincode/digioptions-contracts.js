{
	"schemaVersion": "2.0.0",
	"contractName": "DigiOptionsTest",
	"compilerOutput": {
		"abi": [
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "string",
								"name": "underlyingString",
								"type": "string"
							},
							{
								"internalType": "uint40",
								"name": "expirationDatetime",
								"type": "uint40"
							},
							{
								"internalType": "uint24",
								"name": "objectionPeriod",
								"type": "uint24"
							},
							{
								"internalType": "uint8",
								"name": "config",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "marketCategory",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "baseUnitExp",
								"type": "uint8"
							},
							{
								"internalType": "int8",
								"name": "ndigit",
								"type": "int8"
							},
							{
								"internalType": "address",
								"name": "signerAddr",
								"type": "address"
							},
							{
								"internalType": "uint8",
								"name": "marketInterval",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "transactionFee0",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "transactionFee1",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "transactionFeeSigner",
								"type": "uint8"
							},
							{
								"internalType": "address",
								"name": "feeTaker0",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "feeTaker1",
								"type": "address"
							},
							{
								"internalType": "int128[]",
								"name": "strikes",
								"type": "int128[]"
							}
						],
						"internalType": "struct DigiOptionsLib.MarketBaseData",
						"name": "marketBaseData",
						"type": "tuple"
					}
				],
				"name": "calcBaseMarketHash",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "baseMarketHash",
						"type": "bytes32"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "string",
								"name": "underlyingString",
								"type": "string"
							},
							{
								"internalType": "uint40",
								"name": "expirationDatetime",
								"type": "uint40"
							},
							{
								"internalType": "uint24",
								"name": "objectionPeriod",
								"type": "uint24"
							},
							{
								"internalType": "uint8",
								"name": "config",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "marketCategory",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "baseUnitExp",
								"type": "uint8"
							},
							{
								"internalType": "int8",
								"name": "ndigit",
								"type": "int8"
							},
							{
								"internalType": "address",
								"name": "signerAddr",
								"type": "address"
							},
							{
								"internalType": "uint8",
								"name": "marketInterval",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "transactionFee0",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "transactionFee1",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "transactionFeeSigner",
								"type": "uint8"
							},
							{
								"internalType": "address",
								"name": "feeTaker0",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "feeTaker1",
								"type": "address"
							},
							{
								"internalType": "int128[]",
								"name": "strikes",
								"type": "int128[]"
							}
						],
						"internalType": "struct DigiOptionsLib.MarketBaseData",
						"name": "marketBaseData",
						"type": "tuple"
					}
				],
				"name": "calcFactHashTest",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "marketHash",
						"type": "bytes32"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "string",
								"name": "underlyingString",
								"type": "string"
							},
							{
								"internalType": "uint40",
								"name": "expirationDatetime",
								"type": "uint40"
							},
							{
								"internalType": "uint24",
								"name": "objectionPeriod",
								"type": "uint24"
							},
							{
								"internalType": "uint8",
								"name": "config",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "marketCategory",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "baseUnitExp",
								"type": "uint8"
							},
							{
								"internalType": "int8",
								"name": "ndigit",
								"type": "int8"
							},
							{
								"internalType": "address",
								"name": "signerAddr",
								"type": "address"
							},
							{
								"internalType": "uint8",
								"name": "marketInterval",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "transactionFee0",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "transactionFee1",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "transactionFeeSigner",
								"type": "uint8"
							},
							{
								"internalType": "address",
								"name": "feeTaker0",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "feeTaker1",
								"type": "address"
							},
							{
								"internalType": "int128[]",
								"name": "strikes",
								"type": "int128[]"
							}
						],
						"internalType": "struct DigiOptionsLib.MarketBaseData",
						"name": "marketBaseData",
						"type": "tuple"
					}
				],
				"name": "calcMarketHashTest",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "marketHash",
						"type": "bytes32"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint40",
						"name": "expirationDatetime",
						"type": "uint40"
					}
				],
				"name": "calcMarketIntervalTest",
				"outputs": [
					{
						"internalType": "uint8",
						"name": "interval",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "calculatedMarketInterval",
						"type": "uint256"
					}
				],
				"name": "getDividerTest",
				"outputs": [
					{
						"internalType": "uint48",
						"name": "",
						"type": "uint48"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			}
		],
		"evm": {
			"bytecode": {
				"linkReferences": {},
				"object": "0x608060405234801561001057600080fd5b50610d81806100206000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c8063b8a4bf1f11610050578063b8a4bf1f146100b5578063f5299fda146100d5578063fe0a7fa9146100e857610067565b80631dcb4ca91461006c578063b04f77c714610095575b600080fd5b61007f61007a36600461068c565b6100fb565b60405161008c9190610c18565b60405180910390f35b6100a86100a3366004610835565b61010c565b60405161008c9190610cbc565b6100c86100c336600461081d565b610117565b60405161008c9190610ca9565b61007f6100e336600461068c565b610122565b61007f6100f636600461068c565b61012d565b600061010682610138565b92915050565b60006101068261024c565b600061010682610316565b600061010682610344565b600061010682610416565b6000606082600001516040516020016101519190610bfc565b6040516020818303038152906040528051906020012083602001518460400151856060015186608001518760a001518860c001518961010001518a61018001518b6101a001518c60e001516040516020016101b69b9a99989796959493929190610a71565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290526101208501516101408601516101608701516101c088015193955061020f94869490602001610b8c565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001815291905280516020909101209392505050565b6000808061026764ffffffffff85164263ffffffff61047916565b90506303c2670081106102af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102a690610c72565b60405180910390fd5b623b53808111156102c45760015b915061030f565b620a8c008111156102d65760036102bd565b6201fa408111156102e85760046102bd565b611c208111156102f95760056102bd565b61038481111561030a5760066102bd565b600791505b5092915050565b600060606040518060600160405280602a8152602001610d22602a9139600184016006020151915050919050565b60006060826000015160405160200161035d9190610bfc565b6040516020818303038152906040528051906020012083602001518460400151856060015186608001518760a001518860c001518961010001518a60e001516040516020016103b49998979695949392919061099f565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00181529190526060840151909150600116610408576101c083015160405161020f918391602001610b65565b805160209091012092915050565b60006060826000015160405160200161042f9190610bfc565b6040516020818303038152906040528051906020012083602001518460400151856060015186608001518760a001518860c001516040516020016103b497969594939291906108ec565b60006104bb83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506104c2565b9392505050565b60008184841115610500576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102a69190610c21565b505050900390565b803573ffffffffffffffffffffffffffffffffffffffff8116811461010657600080fd5b600082601f83011261053c578081fd5b813567ffffffffffffffff811115610552578182fd5b6020808202610562828201610cca565b8381529350818401858301828701840188101561057e57600080fd5b60009250825b858110156105ae57813580600f0b811461059c578485fd5b83529184019190840190600101610584565b50505050505092915050565b8035600081900b811461010657600080fd5b600082601f8301126105dc578081fd5b813567ffffffffffffffff8111156105f2578182fd5b61062360207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601610cca565b915080825283602082850101111561063a57600080fd5b8060208401602084013760009082016020015292915050565b803562ffffff8116811461010657600080fd5b803564ffffffffff8116811461010657600080fd5b803560ff8116811461010657600080fd5b60006020828403121561069d578081fd5b813567ffffffffffffffff808211156106b4578283fd5b6101e09184018086038313156106c8578384fd5b6106d183610cca565b81359350828411156106e1578485fd5b6106ed878584016105cc565b81526106fc8760208401610666565b602082015261070e8760408401610653565b6040820152610720876060840161067b565b6060820152610732876080840161067b565b60808201526107448760a0840161067b565b60a08201526107568760c084016105ba565b60c08201526107688760e08401610508565b60e0820152610100935061077e8785840161067b565b8482015261012093506107938785840161067b565b8482015261014093506107a88785840161067b565b8482015261016093506107bd8785840161067b565b8482015261018093506107d287858401610508565b848201526101a093506107e787858401610508565b848201526101c093508382013583811115610800578586fd5b61080c8882850161052c565b948201949094529695505050505050565b60006020828403121561082e578081fd5b5035919050565b600060208284031215610846578081fd5b813564ffffffffff811681146104bb578182fd5b60601b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000169052565b80516000906020808401835b838110156108ae578151600f0b8752958201959082019060010161088f565b509495945050505050565b60000b60f81b9052565b60f81b7fff00000000000000000000000000000000000000000000000000000000000000169052565b96875260d89590951b7fffffffffff00000000000000000000000000000000000000000000000000000016602087015260e89390931b7fffffff000000000000000000000000000000000000000000000000000000000016602586015260f891821b7fff00000000000000000000000000000000000000000000000000000000000000908116602887015290821b8116602986015291811b909116602a84015260009190910b901b602b820152602c0190565b60008a82527fffffffffff0000000000000000000000000000000000000000000000000000008a60d81b1660208301527fffffff00000000000000000000000000000000000000000000000000000000008960e81b1660258301527fff00000000000000000000000000000000000000000000000000000000000000808960f81b166028840152808860f81b166029840152808760f81b16602a84015285820b60f81b602b840152808560f81b16602c84015250610a60602d83018461085a565b506041019998505050505050505050565b60008c82527fffffffffff0000000000000000000000000000000000000000000000000000008c60d81b1660208301527fffffff00000000000000000000000000000000000000000000000000000000008b60e81b1660258301527fff00000000000000000000000000000000000000000000000000000000000000808b60f81b166028840152808a60f81b16602984015250610b11602a8301896108c3565b610b1e602b8301886108b9565b610b2b602c8301876108c3565b610b38602d83018661085a565b610b45604183018561085a565b610b52605583018461085a565b506069019b9a5050505050505050505050565b60008351610b77818460208801610cf1565b610b8381840185610883565b95945050505050565b60008651610b9e818460208b01610cf1565b8083017fff000000000000000000000000000000000000000000000000000000000000009150818860f81b168152818760f81b166001820152818660f81b166002820152610bef6003820186610883565b9998505050505050505050565b60008251610c0e818460208701610cf1565b9190910192915050565b90815260200190565b6000602082528251806020840152610c40816040850160208701610cf1565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60208082526015908201527f746f6f2066617220696e20746865206675747572650000000000000000000000604082015260600190565b65ffffffffffff91909116815260200190565b60ff91909116815260200190565b60405181810167ffffffffffffffff81118282101715610ce957600080fd5b604052919050565b60005b83811015610d0c578181015183820152602001610cf4565b83811115610d1b576000848401525b5050505056fe000000000000000000fa7d000000003b53800000000a8c0000000001fa40000000001c20000000000000a2646970667358221220fd0559d8c3139e4e299ff3f219d46632d915de2e18b99fb3d3c4c545628c035b64736f6c63430006040033",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD81 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x67 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xB8A4BF1F GT PUSH2 0x50 JUMPI DUP1 PUSH4 0xB8A4BF1F EQ PUSH2 0xB5 JUMPI DUP1 PUSH4 0xF5299FDA EQ PUSH2 0xD5 JUMPI DUP1 PUSH4 0xFE0A7FA9 EQ PUSH2 0xE8 JUMPI PUSH2 0x67 JUMP JUMPDEST DUP1 PUSH4 0x1DCB4CA9 EQ PUSH2 0x6C JUMPI DUP1 PUSH4 0xB04F77C7 EQ PUSH2 0x95 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7F PUSH2 0x7A CALLDATASIZE PUSH1 0x4 PUSH2 0x68C JUMP JUMPDEST PUSH2 0xFB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8C SWAP2 SWAP1 PUSH2 0xC18 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xA8 PUSH2 0xA3 CALLDATASIZE PUSH1 0x4 PUSH2 0x835 JUMP JUMPDEST PUSH2 0x10C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8C SWAP2 SWAP1 PUSH2 0xCBC JUMP JUMPDEST PUSH2 0xC8 PUSH2 0xC3 CALLDATASIZE PUSH1 0x4 PUSH2 0x81D JUMP JUMPDEST PUSH2 0x117 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8C SWAP2 SWAP1 PUSH2 0xCA9 JUMP JUMPDEST PUSH2 0x7F PUSH2 0xE3 CALLDATASIZE PUSH1 0x4 PUSH2 0x68C JUMP JUMPDEST PUSH2 0x122 JUMP JUMPDEST PUSH2 0x7F PUSH2 0xF6 CALLDATASIZE PUSH1 0x4 PUSH2 0x68C JUMP JUMPDEST PUSH2 0x12D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x106 DUP3 PUSH2 0x138 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x106 DUP3 PUSH2 0x24C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x106 DUP3 PUSH2 0x316 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x106 DUP3 PUSH2 0x344 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x106 DUP3 PUSH2 0x416 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 PUSH1 0x0 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x151 SWAP2 SWAP1 PUSH2 0xBFC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP4 PUSH1 0x20 ADD MLOAD DUP5 PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0x60 ADD MLOAD DUP7 PUSH1 0x80 ADD MLOAD DUP8 PUSH1 0xA0 ADD MLOAD DUP9 PUSH1 0xC0 ADD MLOAD DUP10 PUSH2 0x100 ADD MLOAD DUP11 PUSH2 0x180 ADD MLOAD DUP12 PUSH2 0x1A0 ADD MLOAD DUP13 PUSH1 0xE0 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1B6 SWAP12 SWAP11 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA71 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH2 0x120 DUP6 ADD MLOAD PUSH2 0x140 DUP7 ADD MLOAD PUSH2 0x160 DUP8 ADD MLOAD PUSH2 0x1C0 DUP9 ADD MLOAD SWAP4 SWAP6 POP PUSH2 0x20F SWAP5 DUP7 SWAP5 SWAP1 PUSH1 0x20 ADD PUSH2 0xB8C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH2 0x267 PUSH5 0xFFFFFFFFFF DUP6 AND TIMESTAMP PUSH4 0xFFFFFFFF PUSH2 0x479 AND JUMP JUMPDEST SWAP1 POP PUSH4 0x3C26700 DUP2 LT PUSH2 0x2AF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2A6 SWAP1 PUSH2 0xC72 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH3 0x3B5380 DUP2 GT ISZERO PUSH2 0x2C4 JUMPI PUSH1 0x1 JUMPDEST SWAP2 POP PUSH2 0x30F JUMP JUMPDEST PUSH3 0xA8C00 DUP2 GT ISZERO PUSH2 0x2D6 JUMPI PUSH1 0x3 PUSH2 0x2BD JUMP JUMPDEST PUSH3 0x1FA40 DUP2 GT ISZERO PUSH2 0x2E8 JUMPI PUSH1 0x4 PUSH2 0x2BD JUMP JUMPDEST PUSH2 0x1C20 DUP2 GT ISZERO PUSH2 0x2F9 JUMPI PUSH1 0x5 PUSH2 0x2BD JUMP JUMPDEST PUSH2 0x384 DUP2 GT ISZERO PUSH2 0x30A JUMPI PUSH1 0x6 PUSH2 0x2BD JUMP JUMPDEST PUSH1 0x7 SWAP2 POP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2A DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xD22 PUSH1 0x2A SWAP2 CODECOPY PUSH1 0x1 DUP5 ADD PUSH1 0x6 MUL ADD MLOAD SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 PUSH1 0x0 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x35D SWAP2 SWAP1 PUSH2 0xBFC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP4 PUSH1 0x20 ADD MLOAD DUP5 PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0x60 ADD MLOAD DUP7 PUSH1 0x80 ADD MLOAD DUP8 PUSH1 0xA0 ADD MLOAD DUP9 PUSH1 0xC0 ADD MLOAD DUP10 PUSH2 0x100 ADD MLOAD DUP11 PUSH1 0xE0 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3B4 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x99F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x60 DUP5 ADD MLOAD SWAP1 SWAP2 POP PUSH1 0x1 AND PUSH2 0x408 JUMPI PUSH2 0x1C0 DUP4 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x20F SWAP2 DUP4 SWAP2 PUSH1 0x20 ADD PUSH2 0xB65 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 PUSH1 0x0 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x42F SWAP2 SWAP1 PUSH2 0xBFC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP4 PUSH1 0x20 ADD MLOAD DUP5 PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0x60 ADD MLOAD DUP7 PUSH1 0x80 ADD MLOAD DUP8 PUSH1 0xA0 ADD MLOAD DUP9 PUSH1 0xC0 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3B4 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x8EC JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4BB DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1E DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 DUP2 MSTORE POP PUSH2 0x4C2 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP5 DUP5 GT ISZERO PUSH2 0x500 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2A6 SWAP2 SWAP1 PUSH2 0xC21 JUMP JUMPDEST POP POP POP SWAP1 SUB SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x106 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x53C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x552 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 DUP1 DUP3 MUL PUSH2 0x562 DUP3 DUP3 ADD PUSH2 0xCCA JUMP JUMPDEST DUP4 DUP2 MSTORE SWAP4 POP DUP2 DUP5 ADD DUP6 DUP4 ADD DUP3 DUP8 ADD DUP5 ADD DUP9 LT ISZERO PUSH2 0x57E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP3 POP DUP3 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x5AE JUMPI DUP2 CALLDATALOAD DUP1 PUSH1 0xF SIGNEXTEND DUP2 EQ PUSH2 0x59C JUMPI DUP5 DUP6 REVERT JUMPDEST DUP4 MSTORE SWAP2 DUP5 ADD SWAP2 SWAP1 DUP5 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x584 JUMP JUMPDEST POP POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x0 DUP2 SWAP1 SIGNEXTEND DUP2 EQ PUSH2 0x106 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x5DC JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x5F2 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x623 PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP5 ADD AND ADD PUSH2 0xCCA JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x63A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH3 0xFFFFFF DUP2 AND DUP2 EQ PUSH2 0x106 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH5 0xFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x106 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x106 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x69D JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x6B4 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x1E0 SWAP2 DUP5 ADD DUP1 DUP7 SUB DUP4 SGT ISZERO PUSH2 0x6C8 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x6D1 DUP4 PUSH2 0xCCA JUMP JUMPDEST DUP2 CALLDATALOAD SWAP4 POP DUP3 DUP5 GT ISZERO PUSH2 0x6E1 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x6ED DUP8 DUP6 DUP5 ADD PUSH2 0x5CC JUMP JUMPDEST DUP2 MSTORE PUSH2 0x6FC DUP8 PUSH1 0x20 DUP5 ADD PUSH2 0x666 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x70E DUP8 PUSH1 0x40 DUP5 ADD PUSH2 0x653 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x720 DUP8 PUSH1 0x60 DUP5 ADD PUSH2 0x67B JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x732 DUP8 PUSH1 0x80 DUP5 ADD PUSH2 0x67B JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH2 0x744 DUP8 PUSH1 0xA0 DUP5 ADD PUSH2 0x67B JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0x756 DUP8 PUSH1 0xC0 DUP5 ADD PUSH2 0x5BA JUMP JUMPDEST PUSH1 0xC0 DUP3 ADD MSTORE PUSH2 0x768 DUP8 PUSH1 0xE0 DUP5 ADD PUSH2 0x508 JUMP JUMPDEST PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 SWAP4 POP PUSH2 0x77E DUP8 DUP6 DUP5 ADD PUSH2 0x67B JUMP JUMPDEST DUP5 DUP3 ADD MSTORE PUSH2 0x120 SWAP4 POP PUSH2 0x793 DUP8 DUP6 DUP5 ADD PUSH2 0x67B JUMP JUMPDEST DUP5 DUP3 ADD MSTORE PUSH2 0x140 SWAP4 POP PUSH2 0x7A8 DUP8 DUP6 DUP5 ADD PUSH2 0x67B JUMP JUMPDEST DUP5 DUP3 ADD MSTORE PUSH2 0x160 SWAP4 POP PUSH2 0x7BD DUP8 DUP6 DUP5 ADD PUSH2 0x67B JUMP JUMPDEST DUP5 DUP3 ADD MSTORE PUSH2 0x180 SWAP4 POP PUSH2 0x7D2 DUP8 DUP6 DUP5 ADD PUSH2 0x508 JUMP JUMPDEST DUP5 DUP3 ADD MSTORE PUSH2 0x1A0 SWAP4 POP PUSH2 0x7E7 DUP8 DUP6 DUP5 ADD PUSH2 0x508 JUMP JUMPDEST DUP5 DUP3 ADD MSTORE PUSH2 0x1C0 SWAP4 POP DUP4 DUP3 ADD CALLDATALOAD DUP4 DUP2 GT ISZERO PUSH2 0x800 JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH2 0x80C DUP9 DUP3 DUP6 ADD PUSH2 0x52C JUMP JUMPDEST SWAP5 DUP3 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x82E JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x846 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH5 0xFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x4BB JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x60 SHL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 AND SWAP1 MSTORE JUMP JUMPDEST DUP1 MLOAD PUSH1 0x0 SWAP1 PUSH1 0x20 DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x8AE JUMPI DUP2 MLOAD PUSH1 0xF SIGNEXTEND DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x88F JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SIGNEXTEND PUSH1 0xF8 SHL SWAP1 MSTORE JUMP JUMPDEST PUSH1 0xF8 SHL PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 AND SWAP1 MSTORE JUMP JUMPDEST SWAP7 DUP8 MSTORE PUSH1 0xD8 SWAP6 SWAP1 SWAP6 SHL PUSH32 0xFFFFFFFFFF000000000000000000000000000000000000000000000000000000 AND PUSH1 0x20 DUP8 ADD MSTORE PUSH1 0xE8 SWAP4 SWAP1 SWAP4 SHL PUSH32 0xFFFFFF0000000000000000000000000000000000000000000000000000000000 AND PUSH1 0x25 DUP7 ADD MSTORE PUSH1 0xF8 SWAP2 DUP3 SHL PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 SWAP1 DUP2 AND PUSH1 0x28 DUP8 ADD MSTORE SWAP1 DUP3 SHL DUP2 AND PUSH1 0x29 DUP7 ADD MSTORE SWAP2 DUP2 SHL SWAP1 SWAP2 AND PUSH1 0x2A DUP5 ADD MSTORE PUSH1 0x0 SWAP2 SWAP1 SWAP2 SIGNEXTEND SWAP1 SHL PUSH1 0x2B DUP3 ADD MSTORE PUSH1 0x2C ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP11 DUP3 MSTORE PUSH32 0xFFFFFFFFFF000000000000000000000000000000000000000000000000000000 DUP11 PUSH1 0xD8 SHL AND PUSH1 0x20 DUP4 ADD MSTORE PUSH32 0xFFFFFF0000000000000000000000000000000000000000000000000000000000 DUP10 PUSH1 0xE8 SHL AND PUSH1 0x25 DUP4 ADD MSTORE PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 DUP1 DUP10 PUSH1 0xF8 SHL AND PUSH1 0x28 DUP5 ADD MSTORE DUP1 DUP9 PUSH1 0xF8 SHL AND PUSH1 0x29 DUP5 ADD MSTORE DUP1 DUP8 PUSH1 0xF8 SHL AND PUSH1 0x2A DUP5 ADD MSTORE DUP6 DUP3 SIGNEXTEND PUSH1 0xF8 SHL PUSH1 0x2B DUP5 ADD MSTORE DUP1 DUP6 PUSH1 0xF8 SHL AND PUSH1 0x2C DUP5 ADD MSTORE POP PUSH2 0xA60 PUSH1 0x2D DUP4 ADD DUP5 PUSH2 0x85A JUMP JUMPDEST POP PUSH1 0x41 ADD SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP13 DUP3 MSTORE PUSH32 0xFFFFFFFFFF000000000000000000000000000000000000000000000000000000 DUP13 PUSH1 0xD8 SHL AND PUSH1 0x20 DUP4 ADD MSTORE PUSH32 0xFFFFFF0000000000000000000000000000000000000000000000000000000000 DUP12 PUSH1 0xE8 SHL AND PUSH1 0x25 DUP4 ADD MSTORE PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 DUP1 DUP12 PUSH1 0xF8 SHL AND PUSH1 0x28 DUP5 ADD MSTORE DUP1 DUP11 PUSH1 0xF8 SHL AND PUSH1 0x29 DUP5 ADD MSTORE POP PUSH2 0xB11 PUSH1 0x2A DUP4 ADD DUP10 PUSH2 0x8C3 JUMP JUMPDEST PUSH2 0xB1E PUSH1 0x2B DUP4 ADD DUP9 PUSH2 0x8B9 JUMP JUMPDEST PUSH2 0xB2B PUSH1 0x2C DUP4 ADD DUP8 PUSH2 0x8C3 JUMP JUMPDEST PUSH2 0xB38 PUSH1 0x2D DUP4 ADD DUP7 PUSH2 0x85A JUMP JUMPDEST PUSH2 0xB45 PUSH1 0x41 DUP4 ADD DUP6 PUSH2 0x85A JUMP JUMPDEST PUSH2 0xB52 PUSH1 0x55 DUP4 ADD DUP5 PUSH2 0x85A JUMP JUMPDEST POP PUSH1 0x69 ADD SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0xB77 DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0xCF1 JUMP JUMPDEST PUSH2 0xB83 DUP2 DUP5 ADD DUP6 PUSH2 0x883 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP7 MLOAD PUSH2 0xB9E DUP2 DUP5 PUSH1 0x20 DUP12 ADD PUSH2 0xCF1 JUMP JUMPDEST DUP1 DUP4 ADD PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 SWAP2 POP DUP2 DUP9 PUSH1 0xF8 SHL AND DUP2 MSTORE DUP2 DUP8 PUSH1 0xF8 SHL AND PUSH1 0x1 DUP3 ADD MSTORE DUP2 DUP7 PUSH1 0xF8 SHL AND PUSH1 0x2 DUP3 ADD MSTORE PUSH2 0xBEF PUSH1 0x3 DUP3 ADD DUP7 PUSH2 0x883 JUMP JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0xC0E DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0xCF1 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0xC40 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0xCF1 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x15 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F6F2066617220696E20746865206675747572650000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0xFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xCE9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xD0C JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xCF4 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xD1B JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP INVALID STOP STOP STOP STOP STOP STOP STOP STOP STOP STATICCALL PUSH30 0x3B53800000000A8C0000000001FA40000000001C200000000000 STOP LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 REVERT SDIV MSIZE 0xD8 0xC3 SGT SWAP15 0x4E 0x29 SWAP16 RETURN CALLCODE NOT 0xD4 PUSH7 0x32D915DE2E18B9 SWAP16 0xB3 0xD3 0xC4 0xC5 GASLIMIT PUSH3 0x8C035B PUSH5 0x736F6C6343 STOP MOD DIV STOP CALLER ",
				"sourceMap": "548:1185:5:-:0;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;548:1185:5;;;;;;;"
			},
			"deployedBytecode": {
				"linkReferences": {},
				"object": "0x608060405234801561001057600080fd5b50600436106100675760003560e01c8063b8a4bf1f11610050578063b8a4bf1f146100b5578063f5299fda146100d5578063fe0a7fa9146100e857610067565b80631dcb4ca91461006c578063b04f77c714610095575b600080fd5b61007f61007a36600461068c565b6100fb565b60405161008c9190610c18565b60405180910390f35b6100a86100a3366004610835565b61010c565b60405161008c9190610cbc565b6100c86100c336600461081d565b610117565b60405161008c9190610ca9565b61007f6100e336600461068c565b610122565b61007f6100f636600461068c565b61012d565b600061010682610138565b92915050565b60006101068261024c565b600061010682610316565b600061010682610344565b600061010682610416565b6000606082600001516040516020016101519190610bfc565b6040516020818303038152906040528051906020012083602001518460400151856060015186608001518760a001518860c001518961010001518a61018001518b6101a001518c60e001516040516020016101b69b9a99989796959493929190610a71565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290526101208501516101408601516101608701516101c088015193955061020f94869490602001610b8c565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001815291905280516020909101209392505050565b6000808061026764ffffffffff85164263ffffffff61047916565b90506303c2670081106102af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102a690610c72565b60405180910390fd5b623b53808111156102c45760015b915061030f565b620a8c008111156102d65760036102bd565b6201fa408111156102e85760046102bd565b611c208111156102f95760056102bd565b61038481111561030a5760066102bd565b600791505b5092915050565b600060606040518060600160405280602a8152602001610d22602a9139600184016006020151915050919050565b60006060826000015160405160200161035d9190610bfc565b6040516020818303038152906040528051906020012083602001518460400151856060015186608001518760a001518860c001518961010001518a60e001516040516020016103b49998979695949392919061099f565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00181529190526060840151909150600116610408576101c083015160405161020f918391602001610b65565b805160209091012092915050565b60006060826000015160405160200161042f9190610bfc565b6040516020818303038152906040528051906020012083602001518460400151856060015186608001518760a001518860c001516040516020016103b497969594939291906108ec565b60006104bb83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506104c2565b9392505050565b60008184841115610500576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102a69190610c21565b505050900390565b803573ffffffffffffffffffffffffffffffffffffffff8116811461010657600080fd5b600082601f83011261053c578081fd5b813567ffffffffffffffff811115610552578182fd5b6020808202610562828201610cca565b8381529350818401858301828701840188101561057e57600080fd5b60009250825b858110156105ae57813580600f0b811461059c578485fd5b83529184019190840190600101610584565b50505050505092915050565b8035600081900b811461010657600080fd5b600082601f8301126105dc578081fd5b813567ffffffffffffffff8111156105f2578182fd5b61062360207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601610cca565b915080825283602082850101111561063a57600080fd5b8060208401602084013760009082016020015292915050565b803562ffffff8116811461010657600080fd5b803564ffffffffff8116811461010657600080fd5b803560ff8116811461010657600080fd5b60006020828403121561069d578081fd5b813567ffffffffffffffff808211156106b4578283fd5b6101e09184018086038313156106c8578384fd5b6106d183610cca565b81359350828411156106e1578485fd5b6106ed878584016105cc565b81526106fc8760208401610666565b602082015261070e8760408401610653565b6040820152610720876060840161067b565b6060820152610732876080840161067b565b60808201526107448760a0840161067b565b60a08201526107568760c084016105ba565b60c08201526107688760e08401610508565b60e0820152610100935061077e8785840161067b565b8482015261012093506107938785840161067b565b8482015261014093506107a88785840161067b565b8482015261016093506107bd8785840161067b565b8482015261018093506107d287858401610508565b848201526101a093506107e787858401610508565b848201526101c093508382013583811115610800578586fd5b61080c8882850161052c565b948201949094529695505050505050565b60006020828403121561082e578081fd5b5035919050565b600060208284031215610846578081fd5b813564ffffffffff811681146104bb578182fd5b60601b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000169052565b80516000906020808401835b838110156108ae578151600f0b8752958201959082019060010161088f565b509495945050505050565b60000b60f81b9052565b60f81b7fff00000000000000000000000000000000000000000000000000000000000000169052565b96875260d89590951b7fffffffffff00000000000000000000000000000000000000000000000000000016602087015260e89390931b7fffffff000000000000000000000000000000000000000000000000000000000016602586015260f891821b7fff00000000000000000000000000000000000000000000000000000000000000908116602887015290821b8116602986015291811b909116602a84015260009190910b901b602b820152602c0190565b60008a82527fffffffffff0000000000000000000000000000000000000000000000000000008a60d81b1660208301527fffffff00000000000000000000000000000000000000000000000000000000008960e81b1660258301527fff00000000000000000000000000000000000000000000000000000000000000808960f81b166028840152808860f81b166029840152808760f81b16602a84015285820b60f81b602b840152808560f81b16602c84015250610a60602d83018461085a565b506041019998505050505050505050565b60008c82527fffffffffff0000000000000000000000000000000000000000000000000000008c60d81b1660208301527fffffff00000000000000000000000000000000000000000000000000000000008b60e81b1660258301527fff00000000000000000000000000000000000000000000000000000000000000808b60f81b166028840152808a60f81b16602984015250610b11602a8301896108c3565b610b1e602b8301886108b9565b610b2b602c8301876108c3565b610b38602d83018661085a565b610b45604183018561085a565b610b52605583018461085a565b506069019b9a5050505050505050505050565b60008351610b77818460208801610cf1565b610b8381840185610883565b95945050505050565b60008651610b9e818460208b01610cf1565b8083017fff000000000000000000000000000000000000000000000000000000000000009150818860f81b168152818760f81b166001820152818660f81b166002820152610bef6003820186610883565b9998505050505050505050565b60008251610c0e818460208701610cf1565b9190910192915050565b90815260200190565b6000602082528251806020840152610c40816040850160208701610cf1565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60208082526015908201527f746f6f2066617220696e20746865206675747572650000000000000000000000604082015260600190565b65ffffffffffff91909116815260200190565b60ff91909116815260200190565b60405181810167ffffffffffffffff81118282101715610ce957600080fd5b604052919050565b60005b83811015610d0c578181015183820152602001610cf4565b83811115610d1b576000848401525b5050505056fe000000000000000000fa7d000000003b53800000000a8c0000000001fa40000000001c20000000000000a2646970667358221220fd0559d8c3139e4e299ff3f219d46632d915de2e18b99fb3d3c4c545628c035b64736f6c63430006040033",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x67 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xB8A4BF1F GT PUSH2 0x50 JUMPI DUP1 PUSH4 0xB8A4BF1F EQ PUSH2 0xB5 JUMPI DUP1 PUSH4 0xF5299FDA EQ PUSH2 0xD5 JUMPI DUP1 PUSH4 0xFE0A7FA9 EQ PUSH2 0xE8 JUMPI PUSH2 0x67 JUMP JUMPDEST DUP1 PUSH4 0x1DCB4CA9 EQ PUSH2 0x6C JUMPI DUP1 PUSH4 0xB04F77C7 EQ PUSH2 0x95 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7F PUSH2 0x7A CALLDATASIZE PUSH1 0x4 PUSH2 0x68C JUMP JUMPDEST PUSH2 0xFB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8C SWAP2 SWAP1 PUSH2 0xC18 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xA8 PUSH2 0xA3 CALLDATASIZE PUSH1 0x4 PUSH2 0x835 JUMP JUMPDEST PUSH2 0x10C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8C SWAP2 SWAP1 PUSH2 0xCBC JUMP JUMPDEST PUSH2 0xC8 PUSH2 0xC3 CALLDATASIZE PUSH1 0x4 PUSH2 0x81D JUMP JUMPDEST PUSH2 0x117 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8C SWAP2 SWAP1 PUSH2 0xCA9 JUMP JUMPDEST PUSH2 0x7F PUSH2 0xE3 CALLDATASIZE PUSH1 0x4 PUSH2 0x68C JUMP JUMPDEST PUSH2 0x122 JUMP JUMPDEST PUSH2 0x7F PUSH2 0xF6 CALLDATASIZE PUSH1 0x4 PUSH2 0x68C JUMP JUMPDEST PUSH2 0x12D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x106 DUP3 PUSH2 0x138 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x106 DUP3 PUSH2 0x24C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x106 DUP3 PUSH2 0x316 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x106 DUP3 PUSH2 0x344 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x106 DUP3 PUSH2 0x416 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 PUSH1 0x0 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x151 SWAP2 SWAP1 PUSH2 0xBFC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP4 PUSH1 0x20 ADD MLOAD DUP5 PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0x60 ADD MLOAD DUP7 PUSH1 0x80 ADD MLOAD DUP8 PUSH1 0xA0 ADD MLOAD DUP9 PUSH1 0xC0 ADD MLOAD DUP10 PUSH2 0x100 ADD MLOAD DUP11 PUSH2 0x180 ADD MLOAD DUP12 PUSH2 0x1A0 ADD MLOAD DUP13 PUSH1 0xE0 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1B6 SWAP12 SWAP11 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA71 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH2 0x120 DUP6 ADD MLOAD PUSH2 0x140 DUP7 ADD MLOAD PUSH2 0x160 DUP8 ADD MLOAD PUSH2 0x1C0 DUP9 ADD MLOAD SWAP4 SWAP6 POP PUSH2 0x20F SWAP5 DUP7 SWAP5 SWAP1 PUSH1 0x20 ADD PUSH2 0xB8C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH2 0x267 PUSH5 0xFFFFFFFFFF DUP6 AND TIMESTAMP PUSH4 0xFFFFFFFF PUSH2 0x479 AND JUMP JUMPDEST SWAP1 POP PUSH4 0x3C26700 DUP2 LT PUSH2 0x2AF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2A6 SWAP1 PUSH2 0xC72 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH3 0x3B5380 DUP2 GT ISZERO PUSH2 0x2C4 JUMPI PUSH1 0x1 JUMPDEST SWAP2 POP PUSH2 0x30F JUMP JUMPDEST PUSH3 0xA8C00 DUP2 GT ISZERO PUSH2 0x2D6 JUMPI PUSH1 0x3 PUSH2 0x2BD JUMP JUMPDEST PUSH3 0x1FA40 DUP2 GT ISZERO PUSH2 0x2E8 JUMPI PUSH1 0x4 PUSH2 0x2BD JUMP JUMPDEST PUSH2 0x1C20 DUP2 GT ISZERO PUSH2 0x2F9 JUMPI PUSH1 0x5 PUSH2 0x2BD JUMP JUMPDEST PUSH2 0x384 DUP2 GT ISZERO PUSH2 0x30A JUMPI PUSH1 0x6 PUSH2 0x2BD JUMP JUMPDEST PUSH1 0x7 SWAP2 POP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2A DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xD22 PUSH1 0x2A SWAP2 CODECOPY PUSH1 0x1 DUP5 ADD PUSH1 0x6 MUL ADD MLOAD SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 PUSH1 0x0 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x35D SWAP2 SWAP1 PUSH2 0xBFC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP4 PUSH1 0x20 ADD MLOAD DUP5 PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0x60 ADD MLOAD DUP7 PUSH1 0x80 ADD MLOAD DUP8 PUSH1 0xA0 ADD MLOAD DUP9 PUSH1 0xC0 ADD MLOAD DUP10 PUSH2 0x100 ADD MLOAD DUP11 PUSH1 0xE0 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3B4 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x99F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x60 DUP5 ADD MLOAD SWAP1 SWAP2 POP PUSH1 0x1 AND PUSH2 0x408 JUMPI PUSH2 0x1C0 DUP4 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x20F SWAP2 DUP4 SWAP2 PUSH1 0x20 ADD PUSH2 0xB65 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 PUSH1 0x0 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x42F SWAP2 SWAP1 PUSH2 0xBFC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP4 PUSH1 0x20 ADD MLOAD DUP5 PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0x60 ADD MLOAD DUP7 PUSH1 0x80 ADD MLOAD DUP8 PUSH1 0xA0 ADD MLOAD DUP9 PUSH1 0xC0 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3B4 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x8EC JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4BB DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1E DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 DUP2 MSTORE POP PUSH2 0x4C2 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP5 DUP5 GT ISZERO PUSH2 0x500 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2A6 SWAP2 SWAP1 PUSH2 0xC21 JUMP JUMPDEST POP POP POP SWAP1 SUB SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x106 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x53C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x552 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 DUP1 DUP3 MUL PUSH2 0x562 DUP3 DUP3 ADD PUSH2 0xCCA JUMP JUMPDEST DUP4 DUP2 MSTORE SWAP4 POP DUP2 DUP5 ADD DUP6 DUP4 ADD DUP3 DUP8 ADD DUP5 ADD DUP9 LT ISZERO PUSH2 0x57E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP3 POP DUP3 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x5AE JUMPI DUP2 CALLDATALOAD DUP1 PUSH1 0xF SIGNEXTEND DUP2 EQ PUSH2 0x59C JUMPI DUP5 DUP6 REVERT JUMPDEST DUP4 MSTORE SWAP2 DUP5 ADD SWAP2 SWAP1 DUP5 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x584 JUMP JUMPDEST POP POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x0 DUP2 SWAP1 SIGNEXTEND DUP2 EQ PUSH2 0x106 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x5DC JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x5F2 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x623 PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP5 ADD AND ADD PUSH2 0xCCA JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x63A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH3 0xFFFFFF DUP2 AND DUP2 EQ PUSH2 0x106 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH5 0xFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x106 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x106 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x69D JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x6B4 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x1E0 SWAP2 DUP5 ADD DUP1 DUP7 SUB DUP4 SGT ISZERO PUSH2 0x6C8 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x6D1 DUP4 PUSH2 0xCCA JUMP JUMPDEST DUP2 CALLDATALOAD SWAP4 POP DUP3 DUP5 GT ISZERO PUSH2 0x6E1 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x6ED DUP8 DUP6 DUP5 ADD PUSH2 0x5CC JUMP JUMPDEST DUP2 MSTORE PUSH2 0x6FC DUP8 PUSH1 0x20 DUP5 ADD PUSH2 0x666 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x70E DUP8 PUSH1 0x40 DUP5 ADD PUSH2 0x653 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x720 DUP8 PUSH1 0x60 DUP5 ADD PUSH2 0x67B JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x732 DUP8 PUSH1 0x80 DUP5 ADD PUSH2 0x67B JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH2 0x744 DUP8 PUSH1 0xA0 DUP5 ADD PUSH2 0x67B JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0x756 DUP8 PUSH1 0xC0 DUP5 ADD PUSH2 0x5BA JUMP JUMPDEST PUSH1 0xC0 DUP3 ADD MSTORE PUSH2 0x768 DUP8 PUSH1 0xE0 DUP5 ADD PUSH2 0x508 JUMP JUMPDEST PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 SWAP4 POP PUSH2 0x77E DUP8 DUP6 DUP5 ADD PUSH2 0x67B JUMP JUMPDEST DUP5 DUP3 ADD MSTORE PUSH2 0x120 SWAP4 POP PUSH2 0x793 DUP8 DUP6 DUP5 ADD PUSH2 0x67B JUMP JUMPDEST DUP5 DUP3 ADD MSTORE PUSH2 0x140 SWAP4 POP PUSH2 0x7A8 DUP8 DUP6 DUP5 ADD PUSH2 0x67B JUMP JUMPDEST DUP5 DUP3 ADD MSTORE PUSH2 0x160 SWAP4 POP PUSH2 0x7BD DUP8 DUP6 DUP5 ADD PUSH2 0x67B JUMP JUMPDEST DUP5 DUP3 ADD MSTORE PUSH2 0x180 SWAP4 POP PUSH2 0x7D2 DUP8 DUP6 DUP5 ADD PUSH2 0x508 JUMP JUMPDEST DUP5 DUP3 ADD MSTORE PUSH2 0x1A0 SWAP4 POP PUSH2 0x7E7 DUP8 DUP6 DUP5 ADD PUSH2 0x508 JUMP JUMPDEST DUP5 DUP3 ADD MSTORE PUSH2 0x1C0 SWAP4 POP DUP4 DUP3 ADD CALLDATALOAD DUP4 DUP2 GT ISZERO PUSH2 0x800 JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH2 0x80C DUP9 DUP3 DUP6 ADD PUSH2 0x52C JUMP JUMPDEST SWAP5 DUP3 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x82E JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x846 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH5 0xFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x4BB JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x60 SHL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 AND SWAP1 MSTORE JUMP JUMPDEST DUP1 MLOAD PUSH1 0x0 SWAP1 PUSH1 0x20 DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x8AE JUMPI DUP2 MLOAD PUSH1 0xF SIGNEXTEND DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x88F JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SIGNEXTEND PUSH1 0xF8 SHL SWAP1 MSTORE JUMP JUMPDEST PUSH1 0xF8 SHL PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 AND SWAP1 MSTORE JUMP JUMPDEST SWAP7 DUP8 MSTORE PUSH1 0xD8 SWAP6 SWAP1 SWAP6 SHL PUSH32 0xFFFFFFFFFF000000000000000000000000000000000000000000000000000000 AND PUSH1 0x20 DUP8 ADD MSTORE PUSH1 0xE8 SWAP4 SWAP1 SWAP4 SHL PUSH32 0xFFFFFF0000000000000000000000000000000000000000000000000000000000 AND PUSH1 0x25 DUP7 ADD MSTORE PUSH1 0xF8 SWAP2 DUP3 SHL PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 SWAP1 DUP2 AND PUSH1 0x28 DUP8 ADD MSTORE SWAP1 DUP3 SHL DUP2 AND PUSH1 0x29 DUP7 ADD MSTORE SWAP2 DUP2 SHL SWAP1 SWAP2 AND PUSH1 0x2A DUP5 ADD MSTORE PUSH1 0x0 SWAP2 SWAP1 SWAP2 SIGNEXTEND SWAP1 SHL PUSH1 0x2B DUP3 ADD MSTORE PUSH1 0x2C ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP11 DUP3 MSTORE PUSH32 0xFFFFFFFFFF000000000000000000000000000000000000000000000000000000 DUP11 PUSH1 0xD8 SHL AND PUSH1 0x20 DUP4 ADD MSTORE PUSH32 0xFFFFFF0000000000000000000000000000000000000000000000000000000000 DUP10 PUSH1 0xE8 SHL AND PUSH1 0x25 DUP4 ADD MSTORE PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 DUP1 DUP10 PUSH1 0xF8 SHL AND PUSH1 0x28 DUP5 ADD MSTORE DUP1 DUP9 PUSH1 0xF8 SHL AND PUSH1 0x29 DUP5 ADD MSTORE DUP1 DUP8 PUSH1 0xF8 SHL AND PUSH1 0x2A DUP5 ADD MSTORE DUP6 DUP3 SIGNEXTEND PUSH1 0xF8 SHL PUSH1 0x2B DUP5 ADD MSTORE DUP1 DUP6 PUSH1 0xF8 SHL AND PUSH1 0x2C DUP5 ADD MSTORE POP PUSH2 0xA60 PUSH1 0x2D DUP4 ADD DUP5 PUSH2 0x85A JUMP JUMPDEST POP PUSH1 0x41 ADD SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP13 DUP3 MSTORE PUSH32 0xFFFFFFFFFF000000000000000000000000000000000000000000000000000000 DUP13 PUSH1 0xD8 SHL AND PUSH1 0x20 DUP4 ADD MSTORE PUSH32 0xFFFFFF0000000000000000000000000000000000000000000000000000000000 DUP12 PUSH1 0xE8 SHL AND PUSH1 0x25 DUP4 ADD MSTORE PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 DUP1 DUP12 PUSH1 0xF8 SHL AND PUSH1 0x28 DUP5 ADD MSTORE DUP1 DUP11 PUSH1 0xF8 SHL AND PUSH1 0x29 DUP5 ADD MSTORE POP PUSH2 0xB11 PUSH1 0x2A DUP4 ADD DUP10 PUSH2 0x8C3 JUMP JUMPDEST PUSH2 0xB1E PUSH1 0x2B DUP4 ADD DUP9 PUSH2 0x8B9 JUMP JUMPDEST PUSH2 0xB2B PUSH1 0x2C DUP4 ADD DUP8 PUSH2 0x8C3 JUMP JUMPDEST PUSH2 0xB38 PUSH1 0x2D DUP4 ADD DUP7 PUSH2 0x85A JUMP JUMPDEST PUSH2 0xB45 PUSH1 0x41 DUP4 ADD DUP6 PUSH2 0x85A JUMP JUMPDEST PUSH2 0xB52 PUSH1 0x55 DUP4 ADD DUP5 PUSH2 0x85A JUMP JUMPDEST POP PUSH1 0x69 ADD SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0xB77 DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0xCF1 JUMP JUMPDEST PUSH2 0xB83 DUP2 DUP5 ADD DUP6 PUSH2 0x883 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP7 MLOAD PUSH2 0xB9E DUP2 DUP5 PUSH1 0x20 DUP12 ADD PUSH2 0xCF1 JUMP JUMPDEST DUP1 DUP4 ADD PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 SWAP2 POP DUP2 DUP9 PUSH1 0xF8 SHL AND DUP2 MSTORE DUP2 DUP8 PUSH1 0xF8 SHL AND PUSH1 0x1 DUP3 ADD MSTORE DUP2 DUP7 PUSH1 0xF8 SHL AND PUSH1 0x2 DUP3 ADD MSTORE PUSH2 0xBEF PUSH1 0x3 DUP3 ADD DUP7 PUSH2 0x883 JUMP JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0xC0E DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0xCF1 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0xC40 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0xCF1 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x15 SWAP1 DUP3 ADD MSTORE PUSH32 0x746F6F2066617220696E20746865206675747572650000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH6 0xFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0xFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xCE9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xD0C JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xCF4 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xD1B JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP INVALID STOP STOP STOP STOP STOP STOP STOP STOP STOP STATICCALL PUSH30 0x3B53800000000A8C0000000001FA40000000001C200000000000 STOP LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 REVERT SDIV MSIZE 0xD8 0xC3 SGT SWAP15 0x4E 0x29 SWAP16 RETURN CALLCODE NOT 0xD4 PUSH7 0x32D915DE2E18B9 SWAP16 0xB3 0xD3 0xC4 0xC5 GASLIMIT PUSH3 0x8C035B PUSH5 0x736F6C6343 STOP MOD DIV STOP CALLER ",
				"sourceMap": "548:1185:5:-:0;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;548:1185:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12:1:-1;9;2:12;1026:234:5;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;1514:216;;;;;;;;;:::i;:::-;;;;;;;;580:204;;;;;;;;;:::i;:::-;;;;;;;;1266:242;;;;;;;;;:::i;790:230::-;;;;;;;;;:::i;1026:234::-;1167:18;1208:45;1238:14;1208:29;:45::i;:::-;1201:52;1026:234;-1:-1:-1;;1026:234:5:o;1514:216::-;1633:14;1670:53;1704:18;1670:33;:53::i;580:204::-;697:6;726:51;752:24;726:25;:51::i;1266:242::-;1407:22;1452:49;1486:14;1452:33;:49::i;790:230::-;929:18;970:43;998:14;970:27;:43::i;6244:1285:1:-;6383:18;6417:17;6543:14;:31;;;6526:49;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;6526::1;;;6516:60;;;;;;6616:14;:33;;;6705:14;:30;;;6773:14;:21;;;6808:14;:29;;;6852:14;:26;;;6949:14;:21;;;7035:14;:29;;;7078:14;:24;;;7116:14;:24;;;7154:14;:25;;;6451:805;;;;;;;;;;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;6451:805:1;;;;7321:30;;;;7365;;;;7409:35;;;;7458:22;;;;6451:805;;-1:-1:-1;7273:217:1;;6451:805;;7458:22;49:4:-1;7273:217:1;;;;;;;26:21:-1;;;22:32;;6:49;;7273:217:1;;;7507:15;;49:4:-1;7507:15:1;;;;;6244:1285;-1:-1:-1;;;6244:1285:1:o;3802:1240::-;3919:14;;;4012:57;:27;;;4052:15;4012:57;:31;:57;:::i;:::-;3979:90;;4138:18;4113:22;:43;4105:77;;;;;;;;;;;;;;;;;;;;;;4221:17;4196:22;:42;4192:811;;;4288:39;4282:46;4265:63;;4192:811;;;4372:16;4347:22;:41;4343:660;;;4437:40;4431:47;;4343:660;4522:12;4497:22;:37;4493:510;;;4585:39;4579:46;;4493:510;4669:11;4644:22;:36;4640:363;;;4730:38;4724:45;;4640:363;4813:7;4788:22;:32;4784:219;;;4869:39;4863:46;;4784:219;4959:43;4936:67;;4784:219;-1:-1:-1;5021:14:1;3802:1240;-1:-1:-1;;3802:1240:1:o;3324:375::-;3439:6;3461:18;3482:13;;;;;;;;;;;;;;;;;3547:1;3520:28;;3093:1;3519:52;3641:18;3635:25;;-1:-1:-1;;3324:375:1;;;:::o;7535:1331::-;7663:22;7842:17;7933:14;:31;;;7916:49;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;7916::1;;;7906:60;;;;;;8006:14;:33;;;8095:14;:30;;;8163:14;:21;;;8198:14;:29;;;8242:14;:26;;;8339:14;:21;;;8425:14;:29;;;8469:14;:25;;;7876:628;;;;;;;;;;;;;;;;;;;;;26:21:-1;;;22:32;;6:49;;7876:628:1;;;8606:21;;;;7876:628;;-1:-1:-1;8636:58:1;8606:89;8601:226;;8780:22;;;;8724:92;;;;8758:4;;8724:92;;;;8601:226;8843:15;;;;;;;;7535:1331;-1:-1:-1;;7535:1331:1:o;5048:1190::-;5267:16;5299:17;5390:14;:31;;;5373:49;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;5373::1;;;5363:60;;;;;;5463:14;:33;;;5552:14;:30;;;5620:14;:21;;;5655:14;:29;;;5699:14;:26;;;5796:14;:21;;;5333:544;;;;;;;;;;;;;;;1276:134:7;1334:7;1360:43;1364:1;1367;1360:43;;;;;;;;;;;;;;;;;:3;:43::i;:::-;1353:50;1276:134;-1:-1:-1;;;1276:134:7:o;1734:187::-;1820:7;1855:12;1847:6;;;;1839:29;;;;;;;;;;;;;;;-1:-1:-1;;;1890:5:7;;;1734:187::o;5:130:-1:-;72:20;;19133:42;19122:54;;21313:35;;21303:2;;21362:1;;21352:12;159:696;;271:3;264:4;256:6;252:17;248:27;238:2;;-1:-1;;279:12;238:2;326:6;313:20;16790:18;16782:6;16779:30;16776:2;;;-1:-1;;16812:12;16776:2;16857:4;;16849:6;16845:17;348:75;16857:4;16845:17;16910:15;348:75;;;451:21;;;339:84;-1:-1;508:14;;;483:17;;;588:27;;;;;585:36;-1:-1;582:2;;;634:1;;624:12;582:2;659:1;650:10;;659:1;644:205;669:6;666:1;663:13;644:205;;;942:6;929:20;21463:5;18947:2;18936:21;21439:5;21436:34;21426:2;;659:1;;21474:12;21426:2;737:49;;800:14;;;;828;;;;691:1;684:9;644:205;;;648:14;;;;;;231:624;;;;;998:124;1062:20;;998:124;19028:20;;;21556:32;;21546:2;;-1:-1;;21592:12;1130:434;;1228:3;1221:4;1213:6;1209:17;1205:27;1195:2;;-1:-1;;1236:12;1195:2;1283:6;1270:20;17082:18;17074:6;17071:30;17068:2;;;-1:-1;;17104:12;17068:2;1305:61;17245:4;17177:9;1221:4;17162:6;17158:17;17154:33;17235:15;1305:61;;;1296:70;;1386:6;1379:5;1372:21;1490:3;17245:4;1481:6;1414;1472:16;;1469:25;1466:2;;;1507:1;;1497:12;1466:2;19726:6;17245:4;1414:6;1410:17;17245:4;1448:5;1444:16;19703:30;19782:1;19764:16;;;17245:4;19764:16;19757:27;1448:5;1188:376;-1:-1;;1188:376;4300:128;4366:20;;19260:8;19249:20;;21676:34;;21666:2;;21724:1;;21714:12;4572:128;4638:20;;19432:12;19421:24;;21922:34;;21912:2;;21970:1;;21960:12;4707:126;4772:20;;19627:4;19616:16;;22043:33;;22033:2;;22090:1;;22080:12;4840:389;;4975:2;4963:9;4954:7;4950:23;4946:32;4943:2;;;-1:-1;;4981:12;4943:2;5039:17;5026:31;5077:18;;5069:6;5066:30;5063:2;;;-1:-1;;5099:12;5063:2;1735:6;;5181:22;;1714:19;;;1710:32;-1:-1;1707:2;;;-1:-1;;1745:12;1707:2;1773:22;1735:6;1773:22;;;1870:17;1857:31;1843:45;;5077:18;1900:6;1897:30;1894:2;;;-1:-1;;1930:12;1894:2;1975:55;2026:3;2017:6;2006:9;2002:22;1975:55;;;1957:16;1950:81;2139:48;2183:3;4975:2;2163:9;2159:22;2139:48;;;4975:2;2125:5;2121:16;2114:74;2293:48;2337:3;2260:2;2317:9;2313:22;2293:48;;;2260:2;2279:5;2275:16;2268:74;2438:47;2481:3;2405:2;2461:9;2457:22;2438:47;;;2405:2;2424:5;2420:16;2413:73;2591:47;2634:3;2557;2614:9;2610:22;2591:47;;;2557:3;2577:5;2573:16;2566:73;2741:47;2784:3;2707;2764:9;2760:22;2741:47;;;2707:3;2727:5;2723:16;2716:73;2886:46;2928:3;2852;2908:9;2904:22;2886:46;;;2852:3;2872:5;2868:16;2861:72;3034:49;3079:3;3000;3059:9;3055:22;3034:49;;;3000:3;3020:5;3016:16;3009:75;3155:3;;;3191:47;3234:3;3155;3214:9;3210:22;3191:47;;;3155:3;3175:5;3171:18;3164:75;3311:3;;;3347:47;3390:3;3311;3370:9;3366:22;3347:47;;;3311:3;3331:5;3327:18;3320:75;3467:3;;;3503:47;3546:3;3467;3526:9;3522:22;3503:47;;;3467:3;3487:5;3483:18;3476:75;3628:3;;;3664:47;3707:3;3628;3687:9;3683:22;3664:47;;;3628:3;3648:5;3644:18;3637:75;3778:3;;;3814:49;3859:3;3778;3839:9;3835:22;3814:49;;;3778:3;3798:5;3794:18;3787:77;3930:3;;;3966:49;4011:3;3930;3991:9;3987:22;3966:49;;;3930:3;3950:5;3946:18;3939:77;4108:3;;;;4097:9;4093:19;4080:33;5077:18;4125:6;4122:30;4119:2;;;-1:-1;;4155:12;4119:2;4202:69;4267:3;4258:6;4247:9;4243:22;4202:69;;;4182:18;;;4175:97;;;;4186:5;4937:292;-1:-1;;;;;;4937:292;5236:241;;5340:2;5328:9;5319:7;5315:23;5311:32;5308:2;;;-1:-1;;5346:12;5308:2;-1:-1;4502:20;;5302:175;-1:-1;5302:175;5484:239;;5587:2;5575:9;5566:7;5562:23;5558:32;5555:2;;;-1:-1;;5593:12;5555:2;4651:6;4638:20;19432:12;21949:5;19421:24;21925:5;21922:34;21912:2;;-1:-1;;21960:12;5924:152;21226:2;21222:14;;;6013:58;;6007:69;6112:710;17518:12;;6112:710;;17386:4;17377:14;;;6112:710;6539:261;6564:6;6561:1;6558:13;6539:261;;;6625:13;;18947:2;18936:21;7539:36;;5896:14;;;;18025;;;;6586:1;6579:9;6539:261;;;-1:-1;6806:10;;6248:574;-1:-1;;;;;6248:574;7587:140;-1:-1;19028:20;21123:3;21119:15;7670:52;;7664:63;9318:144;21123:3;21119:15;;;9403:54;;9397:65;9469:1028;6901:37;;;20915:3;20911:15;;;;;;9831:2;9822:12;;9019:56;21019:3;21015:15;;;;;;9931:11;;;8864:56;21123:3;21119:15;;;;;;;10039:11;;;9403:54;21119:15;;;;;10145:11;;;9403:54;21119:15;;;;;;10251:11;;;9403:54;9469:1028;19028:20;;;;21119:15;;10357:11;;;7670:52;10461:11;;;9722:775;10504:1297;;6931:5;6908:3;6901:37;20911:15;9067:5;20915:3;20911:15;;10918:2;10913:3;10909:12;9019:56;21015:15;8912:5;21019:3;21015:15;;11018:11;10913:3;11018:11;8864:56;21119:15;;9449:5;21123:3;21119:15;;11126:11;10913:3;11126:11;9403:54;21119:15;9449:5;21123:3;21119:15;;11232:11;10913:3;11232:11;9403:54;21119:15;9449:5;21123:3;21119:15;;11338:11;10913:3;11338:11;9403:54;19042:5;-1:-1;19028:20;21123:3;21119:15;11444:11;10913:3;11444:11;7670:52;21119:15;9449:5;21123:3;21119:15;;11548:11;10913:3;11548:11;9403:54;;11676:75;11654:11;10913:3;11654:11;11738:6;11676:75;;;-1:-1;11764:12;;;10809:992;-1:-1;;;;;;;;;10809:992;11808:1577;;6931:5;6908:3;6901:37;20911:15;9067:5;20915:3;20911:15;;12279:2;12274:3;12270:12;9019:56;21015:15;8912:5;21019:3;21015:15;;12379:11;12274:3;12379:11;8864:56;21119:15;;9449:5;21123:3;21119:15;;12487:11;12274:3;12487:11;9403:54;21119:15;9449:5;21123:3;21119:15;;12593:11;12274:3;12593:11;9403:54;;12721:71;12699:11;12274:3;12699:11;12779:6;12721:71;;;12827:69;12805:11;12274:3;12805:11;12883:6;12827:69;;;12931:71;12909:11;12274:3;12909:11;12989:6;12931:71;;;13037:75;13015:11;12274:3;13015:11;13099:6;13037:75;;;13148;13125:12;12274:3;13125:12;13210:6;13148:75;;;13259:76;13236:12;12274:3;13236:12;13321:7;13259:76;;;-1:-1;13348:12;;;12170:1215;-1:-1;;;;;;;;;;;12170:1215;13392:471;;7269:5;17518:12;7380:52;7425:6;7420:3;7413:4;7406:5;7402:16;7380:52;;;13719:119;7453:6;7448:3;7444:16;13825:6;13719:119;;;13848:10;13589:274;-1:-1;;;;;13589:274;13870:861;;7269:5;17518:12;7380:52;7425:6;7420:3;7413:4;7406:5;7402:16;7380:52;;;7453:6;7448:3;7444:16;21119:15;;;;9449:5;21123:3;21119:15;;9410:3;9403:54;21119:15;9449:5;21123:3;21119:15;;14355:1;14350:3;14346:11;9403:54;21119:15;9449:5;21123:3;21119:15;;14452:11;14350:3;14452:11;9403:54;14587:119;14558:11;14350:3;14558:11;14693:6;14587:119;;;14716:10;14139:592;-1:-1;;;;;;;;;14139:592;14738:258;;7269:5;17518:12;7380:52;7425:6;7420:3;7413:4;7406:5;7402:16;7380:52;;;7444:16;;;;;14861:135;-1:-1;;14861:135;15003:213;6901:37;;;15121:2;15106:18;;15092:124;15223:301;;15361:2;15382:17;15375:47;7879:5;17518:12;18488:6;15361:2;15350:9;15346:18;18476:19;7973:52;8018:6;18516:14;15350:9;18516:14;15361:2;7999:5;7995:16;7973:52;;;20823:2;20803:14;20819:7;20799:28;8037:39;;;;18516:14;8037:39;;15332:192;-1:-1;;15332:192;15531:407;15722:2;15736:47;;;8672:2;15707:18;;;18476:19;8708:23;18516:14;;;8688:44;8751:12;;;15693:245;15945:209;19529:14;19518:26;;;;9156:36;;16061:2;16046:18;;16032:122;16161:205;19627:4;19616:16;;;;9271:35;;16275:2;16260:18;;16246:120;16373:256;16435:2;16429:9;16461:17;;;16536:18;16521:34;;16557:22;;;16518:62;16515:2;;;16593:1;;16583:12;16515:2;16435;16602:22;16413:216;;-1:-1;16413:216;19799:268;19864:1;19871:101;19885:6;19882:1;19879:13;19871:101;;;19952:11;;;19946:18;19933:11;;;19926:39;19907:2;19900:10;19871:101;;;19987:6;19984:1;19981:13;19978:2;;;19864:1;20043:6;20038:3;20034:16;20027:27;19978:2;;19848:219;;;"
			}
		}
	},
	"sources": {
		"DigiOptionsTest.sol": {
			"id": 5
		},
		"DigiOptionsLib.sol": {
			"id": 1
		},
		"factsigner/contracts/FactsignerDefines.sol": {
			"id": 9
		},
		"SafeMath.sol": {
			"id": 7
		}
	},
	"sourceCodes": {
		"DigiOptionsTest.sol": "/*\n User Driven Option Markets Contract used by https://www.digioptions.com\n\n This is just a helper to test internal functions which are not\n exposed from main contracts.\n\n Copyright (c) [www.digioptions.com](https://www.digioptions.com)\n\n Designed to work with signatures from [www.factsigner.com](https://www.factsigner.com)\n\n Public repository:\n https://github.com/berlincode/digioptions-contracts.js\n\n elastic.code@gmail.com\n mail@digioptions.com\n\n*/\n\npragma solidity ^0.6.1;\npragma experimental ABIEncoderV2;\n\nimport \"./DigiOptionsLib.sol\";\n\n\ncontract DigiOptionsTest {\n\n    function getDividerTest(\n        uint256 calculatedMarketInterval\n    )\n        public\n        pure\n        returns (uint48)\n    {\n        return DigiOptionsLib.getDivider(calculatedMarketInterval);\n    }\n\n    function calcFactHashTest (\n        DigiOptionsLib.MarketBaseData memory marketBaseData\n    )\n        public\n        pure\n        returns (bytes32 marketHash)\n    {\n        return DigiOptionsLib.calcFactHash(marketBaseData);\n    }\n\n    function calcMarketHashTest (\n        DigiOptionsLib.MarketBaseData memory marketBaseData\n    )\n        public\n        pure\n        returns (bytes32 marketHash)\n    {\n        return DigiOptionsLib.calcMarketHash(marketBaseData);\n    }\n\n    function calcBaseMarketHash (\n        DigiOptionsLib.MarketBaseData memory marketBaseData\n    )\n        public\n        pure\n        returns (bytes32 baseMarketHash)\n    {\n        return DigiOptionsLib.calcBaseMarketHash(marketBaseData);\n    }\n\n    function calcMarketIntervalTest (\n        uint40 expirationDatetime\n    )\n        public\n        view\n        returns (uint8 interval)\n    {\n        return DigiOptionsLib.calcMarketInterval(expirationDatetime);\n    }\n\n}\n",
		"DigiOptionsLib.sol": "pragma solidity ^0.6.1;\n\nimport \"factsigner/contracts/FactsignerDefines.sol\";\n\n//import_\"@openzeppelin/contracts/math/SafeMath.sol\";\n//import_\"@openzeppelin/contracts/drafts/SignedSafeMath.sol\";\nimport \"./SafeMath.sol\";\n//import \"./SignedSafeMath.sol\";\n\n\nlibrary DigiOptionsLib {\n    using SafeMath for uint256;\n\n    /*\n        For future updgrade we want getContractInfo() to remain its signature('getContractInfo(uint256[]')\n        so we declared the return values as dynamic list. The meaning of each entry is defined via\n        follwing enum.\n    */\n    enum InfoValues { // rename InfoContract\n        CONTRACT_TYPE_IDX, // 0\n        VERSION_MARKET_LISTER_IDX, // 1\n        VERSION_MARKETS_IDX, // 2\n        DIGIOPTIONS_MARKETS_ADDR_IDX, // 3\n        BLOCK_NUMBER_CREATED_IDX, // 4\n        TIMESTAMP_MARKET_CREATED_IDX, // 5\n        OFFER_MAX_BLOCKS_INTO_FUTURE_IDX, // 6\n        ATOMIC_OPTION_PAYOUT_WEI_EXP_IDX, // 7\n        EXISTING_MARKETS_IDX, // 8\n\n        MAX // meta info\n    }\n\n    enum InfoLister {\n        VERSION_MARKET_LISTER_IDX, // 0\n        OWNER_IDX,\n        TRANSACTION_FEE_TOTAL_MAX_IDX,\n        TRANSACTION_FEE0_MIN_IDX,\n        TRANSACTION_FEE1_MIN_IDX,\n        TRANSACTION_FEE_SIGNER_MIN_IDX,\n        OPEN_DELAY_SECONDS_IDX,\n\n        MAX // meta info\n    }\n\n    enum ContractType {\n        UNKNOWN,\n        DIGIOPTIONSMARKETS, // == 1\n        DIGIOPTIONSMARKETLISTER // == 2\n    }\n\n    enum UserState {\n        NONE,\n        EXISTS,\n        PAYED_OUT\n    }\n\n    struct Signature {\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n    }\n\n    struct MarketBaseData {\n        /* constant core market data, part of marketHash calculation */\n\n        string underlyingString;\n        uint40 expirationDatetime; /* used for sorting contracts */\n        uint24 objectionPeriod; /* e.g. 3600 seconds */\n\n        uint8 config;\n        uint8 marketCategory;\n\n        uint8 baseUnitExp;\n        int8 ndigit;\n\n        address signerAddr; /* address used to check the signed result (e.g. of factsigner) */\n\n        uint8 marketInterval;\n        uint8 transactionFee0; /* fee in 1/100 per cent (payed by orderTaker) */\n        uint8 transactionFee1; /* fee in 1/100 per cent (payed by orderTaker) */\n        uint8 transactionFeeSigner; /* fee in 1/100 per cent (payed by orderTaker) */\n        address feeTaker0;\n        address feeTaker1;\n        int128[] strikes;\n    }\n\n    struct MarketState {\n        /* winningOptionID is only valid if settled == true */\n        uint128 fee; // total payed fee (for all fee takers)\n        uint16 winningOptionID;\n        bool settled;\n    }\n\n    struct MarketData {\n        MarketBaseData marketBaseData;\n        MarketState marketState;\n        bytes32 marketHash;\n        UserState userState;\n        bool testMarket; // only used by MarketLister\n    }\n\n\n// TODO remove long term? (and add 2-year?)\n// TODO remove uint8() conversion\n// TODO time offset between marketsContract and marketListerContract?\n\n    /* until const arrays are supported in solidity we use our custom function */\n    uint256 constant DIVIDER_ENTRY_BYTES = 6;\n    bytes constant DIVIDER_TABLE = \"\\\n\\x00\\x00\\x00\\x00\\x00\\x00\\\n\\x00\\x00\\x00\\xfa\\x7d\\x00\\\n\\x00\\x00\\x00\\x3b\\x53\\x80\\\n\\x00\\x00\\x00\\x0a\\x8c\\x00\\\n\\x00\\x00\\x00\\x01\\xfa\\x40\\\n\\x00\\x00\\x00\\x00\\x1c\\x20\\\n\\x00\\x00\\x00\\x00\\x00\\x00\\\n\";\n\n    function getDivider(\n        uint256 calculatedMarketInterval\n    )\n        internal\n        pure\n        returns (uint48)\n    {\n        bytes memory table = DIVIDER_TABLE;\n        uint offset = (calculatedMarketInterval + 1) * DIVIDER_ENTRY_BYTES;\n        uint48 value;\n        assembly {\n            value := mload(add(table, offset))\n        }\n\n        return value;\n    }\n\n\n    // TODO this is only 'view' and not internal because of block.timestamp - maybe change that\n    function calcMarketInterval (\n        uint40 expirationDatetime\n    )\n        internal\n        view\n        returns (uint8 interval)\n    {\n        uint8 marketInterval;\n        uint256 secondsUntilExpiration = uint256(expirationDatetime).sub(uint256(block.timestamp));\n        // TODO > or >= ?\n        require(secondsUntilExpiration < 730 * 24 * 60 * 60, \"too far in the future\");\n        if (secondsUntilExpiration > 45 * 24 * 60 * 60) // > 45 days\n            marketInterval = uint8(FactsignerDefines.MarketInterval.YEARLY);\n        else if (secondsUntilExpiration > 8 * 24 * 60 * 60) // > 8 days\n            marketInterval = uint8(FactsignerDefines.MarketInterval.MONTHLY);\n        else if (secondsUntilExpiration > 36 * 60 * 60) // > 36 hours\n            marketInterval = uint8(FactsignerDefines.MarketInterval.WEEKLY);\n        else if (secondsUntilExpiration > 2 * 60 * 60) // > 2 hours\n            marketInterval = uint8(FactsignerDefines.MarketInterval.DAILY);\n        else if (secondsUntilExpiration > 15 * 60) // > 15 min\n            marketInterval = uint8(FactsignerDefines.MarketInterval.HOURLY);\n        else\n            marketInterval = uint8(FactsignerDefines.MarketInterval.SHORT_TERM);\n\n        return marketInterval;\n    }\n\n    function calcFactHash (\n        DigiOptionsLib.MarketBaseData memory marketBaseData\n    )\n        internal\n        pure // this should be external (see https://github.com/ethereum/solidity/issues/5479)\n        returns (bytes32 factHash)\n    {\n        bytes memory data;\n        data = abi.encodePacked(\n            keccak256(abi.encodePacked(marketBaseData.underlyingString)), /* 'name' utf8 encoded */\n            marketBaseData.expirationDatetime, /* 'settlement' unix epoch seconds UTC */\n            marketBaseData.objectionPeriod, /* e.g. 3600 seconds */\n            marketBaseData.config,\n            marketBaseData.marketCategory,\n\n            marketBaseData.baseUnitExp, /* e.g. 18 -> baseUnit = 10**18 = 1000000000000000000 */\n            marketBaseData.ndigit /* 'ndigit' number of digits (may be negative) */\n        );\n        // if this is a named market we simply use strikes as factsigner's namedRanges\n        if ((marketBaseData.config & uint8(FactsignerDefines.ConfigMask.ConfigMarketTypeIsStrikedMask) == 0)) {\n            data = abi.encodePacked(\n                data,\n                marketBaseData.strikes\n            );\n        }\n        return keccak256(data);\n    }\n\n    function calcMarketHash (\n        DigiOptionsLib.MarketBaseData memory marketBaseData\n    )\n        internal\n        pure\n        returns (bytes32 marketHash)\n    {\n        bytes memory data;\n        data = abi.encodePacked(\n            // TODO from facthash?\n            keccak256(abi.encodePacked(marketBaseData.underlyingString)), /* 'name' utf8 encoded */\n            marketBaseData.expirationDatetime, /* 'settlement' unix epoch seconds UTC */\n            marketBaseData.objectionPeriod, /* e.g. 3600 seconds */\n            marketBaseData.config,\n            marketBaseData.marketCategory,\n\n            marketBaseData.baseUnitExp, /* e.g. 18 -> baseUnit = 10**18 = 1000000000000000000 */\n            marketBaseData.ndigit, /* 'ndigit' number of digits (may be negative) */\n\n            marketBaseData.marketInterval,\n            marketBaseData.feeTaker0,\n            marketBaseData.feeTaker1,\n            marketBaseData.signerAddr /* address used to check the signed result (e.g. of factsigner) */\n        );\n        data = abi.encodePacked(\n            data,\n            marketBaseData.transactionFee0,\n            marketBaseData.transactionFee1,\n            marketBaseData.transactionFeeSigner,\n            marketBaseData.strikes\n        );\n        return keccak256(data);\n    }\n\n    function calcBaseMarketHash (\n        MarketBaseData memory marketBaseData\n    )\n        internal\n        pure\n        returns (bytes32 baseMarketHash)\n    {\n        /* baseMarketHash is similar to marketHash but does not contain all elements. It's basically a factHash with added marketInterval */\n        bytes memory data;\n        data = abi.encodePacked(\n            keccak256(abi.encodePacked(marketBaseData.underlyingString)), /* 'name' utf8 encoded */\n            marketBaseData.expirationDatetime, /* 'settlement' unix epoch seconds UTC */\n            marketBaseData.objectionPeriod, /* e.g. 3600 seconds */\n            marketBaseData.config,\n            marketBaseData.marketCategory,\n\n            marketBaseData.baseUnitExp, /* e.g. 18 -> baseUnit = 10**18 = 1000000000000000000 */\n            marketBaseData.ndigit, /* 'ndigit' number of digits (may be negative) */\n\n            marketBaseData.marketInterval,\n\n            marketBaseData.signerAddr\n        );\n        // if this is a named market we simply use strikes as factsigner's namedRanges\n        if ((marketBaseData.config & uint8(FactsignerDefines.ConfigMask.ConfigMarketTypeIsStrikedMask) == 0)) {\n            data = abi.encodePacked(\n                data,\n                marketBaseData.strikes\n            );\n        }\n        return keccak256(data);\n\n    }\n\n\n    bytes constant OFFER_PREFIX = \"\\x19Ethereum Signed Message:\\n32\"; // TODO\n    function verifyOffer(\n        bytes32 message,\n        Signature memory signature\n    )\n        internal\n        pure\n        returns (address addr)\n    {\n        bytes32 prefixedHash = keccak256(\n            abi.encodePacked(\n                OFFER_PREFIX,\n                message\n            )\n        );\n        address signer = ecrecover(\n            prefixedHash,\n            signature.v,\n            signature.r,\n            signature.s\n        );\n        return signer;\n    }\n}\n",
		"factsigner/contracts/FactsignerDefines.sol": "/*\n Contract defines for https://www.factsigner.com\n\n Public repository:\n https://github.com/berlincode/factsigner\n\n Version 7.0.0\n\n\n MIT License\n\n Copyright (c) factsigner.com (https://www.factsigner.com)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n*/\n\npragma solidity ^0.6.1;\n\nlibrary FactsignerDefines\n{\n    // TODO we use a enum here as a hack until\n    // https://github.com/ethereum/solidity/issues/1290 is solved\n    enum ConfigMask {\n        ConfigMaskDummy0,\n        ConfigMarketTypeIsStrikedMask, // = 1\n        ConfigMaskDummy2,\n        ConfigMaskDummy3,\n        ConfigIntervalTypeIsUsedMask // = 4\n    }\n\n    enum SettlementType {\n        FINAL, // = 0\n        PRELIMINARY_FIRST // = 1\n        //PRELIMINARY_MAX // = 65535\n    }\n\n    enum MarketInterval {\n        NONE, // = 0\n        // the following constants are just proposed assignments\n        YEARLY, // = 1\n        QUATERLY, // 2\n        MONTHLY, // = 3\n        WEEKLY, // = 4\n        DAILY, // = 5\n        HOURLY, // = 6\n        SHORT_TERM // = 7\n    }\n\n}\n",
		"SafeMath.sol": "pragma solidity ^0.6.1;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\n\n\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
	},
	"sourceTreeHashHex": "0xf5ae85acab8665e7e549af0175754e477d7fd9079d5ec74b11401510673f1c96",
	"compiler": {
		"name": "solc",
		"version": "soljson-v0.6.4+commit.1dca32f3.js",
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 20000,
				"details": {
					"yul": true,
					"deduplicate": true,
					"cse": true,
					"constantOptimizer": true
				}
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap"
					]
				}
			},
			"remappings": [
				"factsigner=/home/ulf/github/digioptions-contracts.js/node_modules/factsigner"
			]
		}
	},
	"chains": {}
}