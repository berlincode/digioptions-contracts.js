{
	"schemaVersion": "2.0.0",
	"contractName": "DigiOptionsMeta",
	"compilerOutput": {
		"abi": [
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "contract DigiOptionsMarkets",
								"name": "digiOptionsMarkets",
								"type": "address"
							},
							{
								"components": [
									{
										"internalType": "string",
										"name": "underlyingString",
										"type": "string"
									},
									{
										"internalType": "uint40",
										"name": "expirationDatetime",
										"type": "uint40"
									},
									{
										"internalType": "uint24",
										"name": "objectionPeriod",
										"type": "uint24"
									},
									{
										"internalType": "uint8",
										"name": "config",
										"type": "uint8"
									},
									{
										"internalType": "uint8",
										"name": "marketCategory",
										"type": "uint8"
									},
									{
										"internalType": "uint8",
										"name": "baseUnitExp",
										"type": "uint8"
									},
									{
										"internalType": "int8",
										"name": "ndigit",
										"type": "int8"
									},
									{
										"internalType": "address",
										"name": "signerAddr",
										"type": "address"
									},
									{
										"internalType": "uint8",
										"name": "marketInterval",
										"type": "uint8"
									},
									{
										"internalType": "uint8",
										"name": "transactionFee0",
										"type": "uint8"
									},
									{
										"internalType": "uint8",
										"name": "transactionFee1",
										"type": "uint8"
									},
									{
										"internalType": "uint8",
										"name": "transactionFeeSigner",
										"type": "uint8"
									},
									{
										"internalType": "address",
										"name": "feeTaker0",
										"type": "address"
									},
									{
										"internalType": "address",
										"name": "feeTaker1",
										"type": "address"
									},
									{
										"internalType": "int128[]",
										"name": "strikes",
										"type": "int128[]"
									}
								],
								"internalType": "struct DigiOptionsLib.MarketBaseData",
								"name": "marketBaseData",
								"type": "tuple"
							},
							{
								"internalType": "bool",
								"name": "testMarket",
								"type": "bool"
							},
							{
								"components": [
									{
										"internalType": "uint8",
										"name": "v",
										"type": "uint8"
									},
									{
										"internalType": "bytes32",
										"name": "r",
										"type": "bytes32"
									},
									{
										"internalType": "bytes32",
										"name": "s",
										"type": "bytes32"
									}
								],
								"internalType": "struct FactsignerVerify.Signature",
								"name": "signature",
								"type": "tuple"
							}
						],
						"internalType": "struct DigiOptionsMeta.CreateAndRegisterData[]",
						"name": "createAndRegisterDataList",
						"type": "tuple[]"
					},
					{
						"components": [
							{
								"internalType": "contract DigiOptionsMarkets",
								"name": "digiOptionsMarkets",
								"type": "address"
							},
							{
								"internalType": "bytes32",
								"name": "marketHash",
								"type": "bytes32"
							},
							{
								"components": [
									{
										"internalType": "uint8",
										"name": "v",
										"type": "uint8"
									},
									{
										"internalType": "bytes32",
										"name": "r",
										"type": "bytes32"
									},
									{
										"internalType": "bytes32",
										"name": "s",
										"type": "bytes32"
									}
								],
								"internalType": "struct FactsignerVerify.Signature",
								"name": "signature",
								"type": "tuple"
							},
							{
								"internalType": "int256",
								"name": "value",
								"type": "int256"
							},
							{
								"internalType": "address[]",
								"name": "users",
								"type": "address[]"
							},
							{
								"internalType": "bytes32[]",
								"name": "offerHash",
								"type": "bytes32[]"
							}
						],
						"internalType": "struct DigiOptionsMeta.SettlementData[]",
						"name": "settlementDataList",
						"type": "tuple[]"
					}
				],
				"name": "createRegisterAndSettlement",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"evm": {
			"bytecode": {
				"generatedSources": [],
				"linkReferences": {},
				"object": "0x608060405234801561001057600080fd5b50610d55806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063da571e0414610030575b600080fd5b61004361003e366004610814565b610045565b005b60005b8251811015610118576100596101e0565b83828151811061006557fe5b60200260200101519050806000015173ffffffffffffffffffffffffffffffffffffffff16632556d8d08260200151836040015184606001516040518463ffffffff1660e01b81526004016100bc93929190610b25565b602060405180830381600087803b1580156100d657600080fd5b505af11580156100ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061010e919061095a565b5050600101610048565b5060005b81518110156101db5761012d610229565b82828151811061013957fe5b60200260200101519050806000015173ffffffffffffffffffffffffffffffffffffffff1663a1aa12b282602001518360400151846060015185608001518660a001516040518663ffffffff1660e01b815260040161019c959493929190610a76565b600060405180830381600087803b1580156101b657600080fd5b505af11580156101ca573d6000803e3d6000fd5b50506001909301925061011c915050565b505050565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001610210610263565b8152600060208201526040016102246102e1565b905290565b6040805160c081018252600080825260208201529081016102486102e1565b81526020016000815260200160608152602001606081525090565b604080516101e08101825260608082526000602083018190529282018390528082018390526080820183905260a0820183905260c0820183905260e08201839052610100820183905261012082018390526101408201839052610160820183905261018082018390526101a08201929092526101c081019190915290565b604080516060810182526000808252602082018190529181019190915290565b803561030c81610cfa565b919050565b600082601f830112610321578081fd5b813561033461032f82610cdc565b610cb8565b81815291506020808301908481018184028601820187101561035557600080fd5b60005b8481101561037d57813561036b81610cfa565b84529282019290820190600101610358565b505050505092915050565b600082601f830112610398578081fd5b81356103a661032f82610cdc565b8181529150602080830190848101818402860182018710156103c757600080fd5b60005b8481101561037d578135845292820192908201906001016103ca565b600082601f8301126103f6578081fd5b813561040461032f82610cdc565b81815291506020808301908481018184028601820187101561042557600080fd5b6000805b8581101561045357823580600f0b8114610441578283fd5b85529383019391830191600101610429565b50505050505092915050565b600082601f83011261046f578081fd5b813561047d61032f82610cdc565b818152915060208083019084810160005b8481101561037d5781358701610100807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0838c030112156104ce57600080fd5b60c06104d981610cb8565b6104e4878501610301565b81526040808501358883015260606104fe8e828801610781565b828401528386013581840152505060e0840135915067ffffffffffffffff8083111561052957600080fd5b6105378d8985880101610311565b608083015292840135928084111561054e57600080fd5b5061055d8c8885870101610388565b60a08201528752505050928201929082019060010161048e565b8035801515811461030c57600080fd5b8035600081900b811461030c57600080fd5b600082601f8301126105a9578081fd5b813567ffffffffffffffff8111156105bd57fe5b6105ee60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601610cb8565b915080825283602082850101111561060557600080fd5b8060208401602084013760009082016020015292915050565b60006101e0808385031215610631578182fd5b61063a81610cb8565b915050813567ffffffffffffffff8082111561065557600080fd5b61066185838601610599565b835261066f602085016107ee565b6020840152610680604085016107db565b604084015261069160608501610803565b60608401526106a260808501610803565b60808401526106b360a08501610803565b60a08401526106c460c08501610587565b60c08401526106d560e08501610301565b60e084015261010091506106ea828501610803565b8284015261012091506106fe828501610803565b828401526101409150610712828501610803565b828401526101609150610726828501610803565b82840152610180915061073a828501610301565b828401526101a0915061074e828501610301565b828401526101c09150818401358181111561076857600080fd5b610774868287016103e6565b8385015250505092915050565b600060608284031215610792578081fd5b6040516060810181811067ffffffffffffffff821117156107af57fe5b6040529050806107be83610803565b815260208301356020820152604083013560408201525092915050565b803562ffffff8116811461030c57600080fd5b803564ffffffffff8116811461030c57600080fd5b803560ff8116811461030c57600080fd5b60008060408385031215610826578182fd5b823567ffffffffffffffff8082111561083d578384fd5b818501915085601f830112610850578384fd5b813561085e61032f82610cdc565b81815260208082019190858101885b8581101561092b578135880160c07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0828f030112156108aa578a8bfd5b604051608081018181108a821117156108bf57fe5b604052818501356108cf81610cfa565b81526040820135898111156108e2578c8dfd5b6108f08f878386010161061e565b868301525061090160608301610577565b60408201526109138e60808401610781565b6060820152865250938201939082019060010161086d565b50919750880135945050505080821115610943578283fd5b506109508582860161045f565b9150509250929050565b60006020828403121561096b578081fd5b5051919050565b73ffffffffffffffffffffffffffffffffffffffff169052565b6000815180845260208085019450808401835b838110156109be578151600f0b8752958201959082019060010161099f565b509495945050505050565b15159052565b60000b9052565b60008151808452815b818110156109fb576020818501810151868301820152016109df565b81811115610a0c5782602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b805160ff16825260208082015190830152604090810151910152565b62ffffff169052565b64ffffffffff169052565b60ff169052565b600060e082018783526020610a8d81850189610a3f565b6080840187905260e060a085015285519182905280860191610100850190845b81811015610adf57845173ffffffffffffffffffffffffffffffffffffffff1683529383019391830191600101610aad565b505084810360c08601528551808252908201925081860190845b81811015610b1557825185529383019391830191600101610af9565b50929a9950505050505050505050565b600060a0825284516101e08060a0850152610b446102808501836109d6565b91506020870151610b5860c0860182610a64565b506040870151610b6b60e0860182610a5b565b506060870151610100610b8081870183610a6f565b60808901519150610120610b9681880184610a6f565b60a08a01519250610140610bac81890185610a6f565b60c08b01519350610160610bc2818a01866109cf565b60e08c01519450610180610bd8818b0187610972565b938c015194506101a093610bee8a860187610a6f565b928c015194506101c092610c048a850187610a6f565b828d01519550610c16878b0187610a6f565b818d01519650610c2a6102008b0188610a6f565b8c01519550610c40915050610220880185610972565b818a01519350610c54610240880185610972565b808a015193505050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6084830301610260850152610c92828261098c565b92505050610ca360208301856109c9565b610cb06040830184610a3f565b949350505050565b60405181810167ffffffffffffffff81118282101715610cd457fe5b604052919050565b600067ffffffffffffffff821115610cf057fe5b5060209081020190565b73ffffffffffffffffffffffffffffffffffffffff81168114610d1c57600080fd5b5056fea264697066735822122033e951b24800c72fe4977b327fb83ac428fb2084d9384686e4cac0f01240776f64736f6c63430007040033",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD55 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xDA571E04 EQ PUSH2 0x30 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x43 PUSH2 0x3E CALLDATASIZE PUSH1 0x4 PUSH2 0x814 JUMP JUMPDEST PUSH2 0x45 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x118 JUMPI PUSH2 0x59 PUSH2 0x1E0 JUMP JUMPDEST DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x65 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP1 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x2556D8D0 DUP3 PUSH1 0x20 ADD MLOAD DUP4 PUSH1 0x40 ADD MLOAD DUP5 PUSH1 0x60 ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBC SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB25 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xEA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x10E SWAP2 SWAP1 PUSH2 0x95A JUMP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x48 JUMP JUMPDEST POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x1DB JUMPI PUSH2 0x12D PUSH2 0x229 JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x139 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP1 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA1AA12B2 DUP3 PUSH1 0x20 ADD MLOAD DUP4 PUSH1 0x40 ADD MLOAD DUP5 PUSH1 0x60 ADD MLOAD DUP6 PUSH1 0x80 ADD MLOAD DUP7 PUSH1 0xA0 ADD MLOAD PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x19C SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA76 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1CA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x1 SWAP1 SWAP4 ADD SWAP3 POP PUSH2 0x11C SWAP2 POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x210 PUSH2 0x263 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD PUSH2 0x224 PUSH2 0x2E1 JUMP JUMPDEST SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD PUSH2 0x248 PUSH2 0x2E1 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0x1E0 DUP2 ADD DUP3 MSTORE PUSH1 0x60 DUP1 DUP3 MSTORE PUSH1 0x0 PUSH1 0x20 DUP4 ADD DUP2 SWAP1 MSTORE SWAP3 DUP3 ADD DUP4 SWAP1 MSTORE DUP1 DUP3 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 DUP3 ADD DUP4 SWAP1 MSTORE PUSH1 0xA0 DUP3 ADD DUP4 SWAP1 MSTORE PUSH1 0xC0 DUP3 ADD DUP4 SWAP1 MSTORE PUSH1 0xE0 DUP3 ADD DUP4 SWAP1 MSTORE PUSH2 0x100 DUP3 ADD DUP4 SWAP1 MSTORE PUSH2 0x120 DUP3 ADD DUP4 SWAP1 MSTORE PUSH2 0x140 DUP3 ADD DUP4 SWAP1 MSTORE PUSH2 0x160 DUP3 ADD DUP4 SWAP1 MSTORE PUSH2 0x180 DUP3 ADD DUP4 SWAP1 MSTORE PUSH2 0x1A0 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH2 0x1C0 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x30C DUP2 PUSH2 0xCFA JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x321 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x334 PUSH2 0x32F DUP3 PUSH2 0xCDC JUMP JUMPDEST PUSH2 0xCB8 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x355 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x37D JUMPI DUP2 CALLDATALOAD PUSH2 0x36B DUP2 PUSH2 0xCFA JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x358 JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x398 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x3A6 PUSH2 0x32F DUP3 PUSH2 0xCDC JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x3C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x37D JUMPI DUP2 CALLDATALOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x3CA JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3F6 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x404 PUSH2 0x32F DUP3 PUSH2 0xCDC JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x425 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x453 JUMPI DUP3 CALLDATALOAD DUP1 PUSH1 0xF SIGNEXTEND DUP2 EQ PUSH2 0x441 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP6 MSTORE SWAP4 DUP4 ADD SWAP4 SWAP2 DUP4 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x429 JUMP JUMPDEST POP POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x46F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x47D PUSH2 0x32F DUP3 PUSH2 0xCDC JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x37D JUMPI DUP2 CALLDATALOAD DUP8 ADD PUSH2 0x100 DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP4 DUP13 SUB ADD SLT ISZERO PUSH2 0x4CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0xC0 PUSH2 0x4D9 DUP2 PUSH2 0xCB8 JUMP JUMPDEST PUSH2 0x4E4 DUP8 DUP6 ADD PUSH2 0x301 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 DUP1 DUP6 ADD CALLDATALOAD DUP9 DUP4 ADD MSTORE PUSH1 0x60 PUSH2 0x4FE DUP15 DUP3 DUP9 ADD PUSH2 0x781 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE DUP4 DUP7 ADD CALLDATALOAD DUP2 DUP5 ADD MSTORE POP POP PUSH1 0xE0 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP4 GT ISZERO PUSH2 0x529 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x537 DUP14 DUP10 DUP6 DUP9 ADD ADD PUSH2 0x311 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE SWAP3 DUP5 ADD CALLDATALOAD SWAP3 DUP1 DUP5 GT ISZERO PUSH2 0x54E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x55D DUP13 DUP9 DUP6 DUP8 ADD ADD PUSH2 0x388 JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MSTORE DUP8 MSTORE POP POP POP SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x48E JUMP JUMPDEST DUP1 CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x30C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH1 0x0 DUP2 SWAP1 SIGNEXTEND DUP2 EQ PUSH2 0x30C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x5A9 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x5BD JUMPI INVALID JUMPDEST PUSH2 0x5EE PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP5 ADD AND ADD PUSH2 0xCB8 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x605 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E0 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x631 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x63A DUP2 PUSH2 0xCB8 JUMP JUMPDEST SWAP2 POP POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x655 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x661 DUP6 DUP4 DUP7 ADD PUSH2 0x599 JUMP JUMPDEST DUP4 MSTORE PUSH2 0x66F PUSH1 0x20 DUP6 ADD PUSH2 0x7EE JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x680 PUSH1 0x40 DUP6 ADD PUSH2 0x7DB JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x691 PUSH1 0x60 DUP6 ADD PUSH2 0x803 JUMP JUMPDEST PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x6A2 PUSH1 0x80 DUP6 ADD PUSH2 0x803 JUMP JUMPDEST PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x6B3 PUSH1 0xA0 DUP6 ADD PUSH2 0x803 JUMP JUMPDEST PUSH1 0xA0 DUP5 ADD MSTORE PUSH2 0x6C4 PUSH1 0xC0 DUP6 ADD PUSH2 0x587 JUMP JUMPDEST PUSH1 0xC0 DUP5 ADD MSTORE PUSH2 0x6D5 PUSH1 0xE0 DUP6 ADD PUSH2 0x301 JUMP JUMPDEST PUSH1 0xE0 DUP5 ADD MSTORE PUSH2 0x100 SWAP2 POP PUSH2 0x6EA DUP3 DUP6 ADD PUSH2 0x803 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE PUSH2 0x120 SWAP2 POP PUSH2 0x6FE DUP3 DUP6 ADD PUSH2 0x803 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE PUSH2 0x140 SWAP2 POP PUSH2 0x712 DUP3 DUP6 ADD PUSH2 0x803 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE PUSH2 0x160 SWAP2 POP PUSH2 0x726 DUP3 DUP6 ADD PUSH2 0x803 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE PUSH2 0x180 SWAP2 POP PUSH2 0x73A DUP3 DUP6 ADD PUSH2 0x301 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE PUSH2 0x1A0 SWAP2 POP PUSH2 0x74E DUP3 DUP6 ADD PUSH2 0x301 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE PUSH2 0x1C0 SWAP2 POP DUP2 DUP5 ADD CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x768 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x774 DUP7 DUP3 DUP8 ADD PUSH2 0x3E6 JUMP JUMPDEST DUP4 DUP6 ADD MSTORE POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x792 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x60 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x7AF JUMPI INVALID JUMPDEST PUSH1 0x40 MSTORE SWAP1 POP DUP1 PUSH2 0x7BE DUP4 PUSH2 0x803 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP4 ADD CALLDATALOAD PUSH1 0x40 DUP3 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH3 0xFFFFFF DUP2 AND DUP2 EQ PUSH2 0x30C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH5 0xFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x30C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x30C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x826 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x83D JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x850 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x85E PUSH2 0x32F DUP3 PUSH2 0xCDC JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP2 SWAP1 DUP6 DUP2 ADD DUP9 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x92B JUMPI DUP2 CALLDATALOAD DUP9 ADD PUSH1 0xC0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP3 DUP16 SUB ADD SLT ISZERO PUSH2 0x8AA JUMPI DUP11 DUP12 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x80 DUP2 ADD DUP2 DUP2 LT DUP11 DUP3 GT OR ISZERO PUSH2 0x8BF JUMPI INVALID JUMPDEST PUSH1 0x40 MSTORE DUP2 DUP6 ADD CALLDATALOAD PUSH2 0x8CF DUP2 PUSH2 0xCFA JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 DUP3 ADD CALLDATALOAD DUP10 DUP2 GT ISZERO PUSH2 0x8E2 JUMPI DUP13 DUP14 REVERT JUMPDEST PUSH2 0x8F0 DUP16 DUP8 DUP4 DUP7 ADD ADD PUSH2 0x61E JUMP JUMPDEST DUP7 DUP4 ADD MSTORE POP PUSH2 0x901 PUSH1 0x60 DUP4 ADD PUSH2 0x577 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x913 DUP15 PUSH1 0x80 DUP5 ADD PUSH2 0x781 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE DUP7 MSTORE POP SWAP4 DUP3 ADD SWAP4 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x86D JUMP JUMPDEST POP SWAP2 SWAP8 POP DUP9 ADD CALLDATALOAD SWAP5 POP POP POP POP DUP1 DUP3 GT ISZERO PUSH2 0x943 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x950 DUP6 DUP3 DUP7 ADD PUSH2 0x45F JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x96B JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x9BE JUMPI DUP2 MLOAD PUSH1 0xF SIGNEXTEND DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x99F JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST ISZERO ISZERO SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 SIGNEXTEND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE DUP2 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x9FB JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x9DF JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0xA0C JUMPI DUP3 PUSH1 0x20 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0xFF AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP3 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH1 0x40 SWAP1 DUP2 ADD MLOAD SWAP2 ADD MSTORE JUMP JUMPDEST PUSH3 0xFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH5 0xFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0xFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0xE0 DUP3 ADD DUP8 DUP4 MSTORE PUSH1 0x20 PUSH2 0xA8D DUP2 DUP6 ADD DUP10 PUSH2 0xA3F JUMP JUMPDEST PUSH1 0x80 DUP5 ADD DUP8 SWAP1 MSTORE PUSH1 0xE0 PUSH1 0xA0 DUP6 ADD MSTORE DUP6 MLOAD SWAP2 DUP3 SWAP1 MSTORE DUP1 DUP7 ADD SWAP2 PUSH2 0x100 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xADF JUMPI DUP5 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 MSTORE SWAP4 DUP4 ADD SWAP4 SWAP2 DUP4 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0xAAD JUMP JUMPDEST POP POP DUP5 DUP2 SUB PUSH1 0xC0 DUP7 ADD MSTORE DUP6 MLOAD DUP1 DUP3 MSTORE SWAP1 DUP3 ADD SWAP3 POP DUP2 DUP7 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xB15 JUMPI DUP3 MLOAD DUP6 MSTORE SWAP4 DUP4 ADD SWAP4 SWAP2 DUP4 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0xAF9 JUMP JUMPDEST POP SWAP3 SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 MSTORE DUP5 MLOAD PUSH2 0x1E0 DUP1 PUSH1 0xA0 DUP6 ADD MSTORE PUSH2 0xB44 PUSH2 0x280 DUP6 ADD DUP4 PUSH2 0x9D6 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP8 ADD MLOAD PUSH2 0xB58 PUSH1 0xC0 DUP7 ADD DUP3 PUSH2 0xA64 JUMP JUMPDEST POP PUSH1 0x40 DUP8 ADD MLOAD PUSH2 0xB6B PUSH1 0xE0 DUP7 ADD DUP3 PUSH2 0xA5B JUMP JUMPDEST POP PUSH1 0x60 DUP8 ADD MLOAD PUSH2 0x100 PUSH2 0xB80 DUP2 DUP8 ADD DUP4 PUSH2 0xA6F JUMP JUMPDEST PUSH1 0x80 DUP10 ADD MLOAD SWAP2 POP PUSH2 0x120 PUSH2 0xB96 DUP2 DUP9 ADD DUP5 PUSH2 0xA6F JUMP JUMPDEST PUSH1 0xA0 DUP11 ADD MLOAD SWAP3 POP PUSH2 0x140 PUSH2 0xBAC DUP2 DUP10 ADD DUP6 PUSH2 0xA6F JUMP JUMPDEST PUSH1 0xC0 DUP12 ADD MLOAD SWAP4 POP PUSH2 0x160 PUSH2 0xBC2 DUP2 DUP11 ADD DUP7 PUSH2 0x9CF JUMP JUMPDEST PUSH1 0xE0 DUP13 ADD MLOAD SWAP5 POP PUSH2 0x180 PUSH2 0xBD8 DUP2 DUP12 ADD DUP8 PUSH2 0x972 JUMP JUMPDEST SWAP4 DUP13 ADD MLOAD SWAP5 POP PUSH2 0x1A0 SWAP4 PUSH2 0xBEE DUP11 DUP7 ADD DUP8 PUSH2 0xA6F JUMP JUMPDEST SWAP3 DUP13 ADD MLOAD SWAP5 POP PUSH2 0x1C0 SWAP3 PUSH2 0xC04 DUP11 DUP6 ADD DUP8 PUSH2 0xA6F JUMP JUMPDEST DUP3 DUP14 ADD MLOAD SWAP6 POP PUSH2 0xC16 DUP8 DUP12 ADD DUP8 PUSH2 0xA6F JUMP JUMPDEST DUP2 DUP14 ADD MLOAD SWAP7 POP PUSH2 0xC2A PUSH2 0x200 DUP12 ADD DUP9 PUSH2 0xA6F JUMP JUMPDEST DUP13 ADD MLOAD SWAP6 POP PUSH2 0xC40 SWAP2 POP POP PUSH2 0x220 DUP9 ADD DUP6 PUSH2 0x972 JUMP JUMPDEST DUP2 DUP11 ADD MLOAD SWAP4 POP PUSH2 0xC54 PUSH2 0x240 DUP9 ADD DUP6 PUSH2 0x972 JUMP JUMPDEST DUP1 DUP11 ADD MLOAD SWAP4 POP POP POP POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF60 DUP5 DUP4 SUB ADD PUSH2 0x260 DUP6 ADD MSTORE PUSH2 0xC92 DUP3 DUP3 PUSH2 0x98C JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0xCA3 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x9C9 JUMP JUMPDEST PUSH2 0xCB0 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0xA3F JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xCD4 JUMPI INVALID JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xCF0 JUMPI INVALID JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xD1C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLER 0xE9 MLOAD 0xB2 0x48 STOP 0xC7 0x2F 0xE4 SWAP8 PUSH28 0x327FB83AC428FB2084D9384686E4CAC0F01240776F64736F6C634300 SMOD DIV STOP CALLER ",
				"sourceMap": "1837:2919:4:-:0;;;;;;;;;;;;;;;;;;;"
			},
			"deployedBytecode": {
				"generatedSources": [
					{
						"ast": {
							"nodeType": "YulBlock",
							"src": "0:16663:11",
							"statements": [
								{
									"nodeType": "YulBlock",
									"src": "6:3:11",
									"statements": []
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "65:87:11",
										"statements": [
											{
												"nodeType": "YulAssignment",
												"src": "75:29:11",
												"value": {
													"arguments": [
														{
															"name": "offset",
															"nodeType": "YulIdentifier",
															"src": "97:6:11"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "84:12:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "84:20:11"
												},
												"variableNames": [
													{
														"name": "value",
														"nodeType": "YulIdentifier",
														"src": "75:5:11"
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "value",
															"nodeType": "YulIdentifier",
															"src": "140:5:11"
														}
													],
													"functionName": {
														"name": "validator_revert_t_address",
														"nodeType": "YulIdentifier",
														"src": "113:26:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "113:33:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "113:33:11"
											}
										]
									},
									"name": "abi_decode_t_address",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "offset",
											"nodeType": "YulTypedName",
											"src": "44:6:11",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "value",
											"nodeType": "YulTypedName",
											"src": "55:5:11",
											"type": ""
										}
									],
									"src": "14:138:11"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "227:699:11",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "276:24:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "array",
																		"nodeType": "YulIdentifier",
																		"src": "285:5:11"
																	},
																	{
																		"name": "array",
																		"nodeType": "YulIdentifier",
																		"src": "292:5:11"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "278:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "278:20:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "278:20:11"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "offset",
																			"nodeType": "YulIdentifier",
																			"src": "255:6:11"
																		},
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "263:4:11",
																			"type": "",
																			"value": "0x1f"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nodeType": "YulIdentifier",
																		"src": "251:3:11"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "251:17:11"
																},
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "270:3:11"
																}
															],
															"functionName": {
																"name": "slt",
																"nodeType": "YulIdentifier",
																"src": "247:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "247:27:11"
														}
													],
													"functionName": {
														"name": "iszero",
														"nodeType": "YulIdentifier",
														"src": "240:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "240:35:11"
												},
												"nodeType": "YulIf",
												"src": "237:2:11"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "309:34:11",
												"value": {
													"arguments": [
														{
															"name": "offset",
															"nodeType": "YulIdentifier",
															"src": "336:6:11"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "323:12:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "323:20:11"
												},
												"variables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "313:6:11",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulAssignment",
												"src": "352:78:11",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "422:6:11"
																}
															],
															"functionName": {
																"name": "array_allocation_size_t_array$_t_address_$dyn",
																"nodeType": "YulIdentifier",
																"src": "376:45:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "376:53:11"
														}
													],
													"functionName": {
														"name": "allocateMemory",
														"nodeType": "YulIdentifier",
														"src": "361:14:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "361:69:11"
												},
												"variableNames": [
													{
														"name": "array",
														"nodeType": "YulIdentifier",
														"src": "352:5:11"
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "439:16:11",
												"value": {
													"name": "array",
													"nodeType": "YulIdentifier",
													"src": "450:5:11"
												},
												"variables": [
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "443:3:11",
														"type": ""
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "array",
															"nodeType": "YulIdentifier",
															"src": "471:5:11"
														},
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "478:6:11"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "464:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "464:21:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "464:21:11"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "494:14:11",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "504:4:11",
													"type": "",
													"value": "0x20"
												},
												"variables": [
													{
														"name": "_1",
														"nodeType": "YulTypedName",
														"src": "498:2:11",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulAssignment",
												"src": "517:21:11",
												"value": {
													"arguments": [
														{
															"name": "array",
															"nodeType": "YulIdentifier",
															"src": "528:5:11"
														},
														{
															"name": "_1",
															"nodeType": "YulIdentifier",
															"src": "535:2:11"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "524:3:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "524:14:11"
												},
												"variableNames": [
													{
														"name": "dst",
														"nodeType": "YulIdentifier",
														"src": "517:3:11"
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "547:26:11",
												"value": {
													"arguments": [
														{
															"name": "offset",
															"nodeType": "YulIdentifier",
															"src": "562:6:11"
														},
														{
															"name": "_1",
															"nodeType": "YulIdentifier",
															"src": "570:2:11"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "558:3:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "558:15:11"
												},
												"variables": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "551:3:11",
														"type": ""
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "632:16:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "641:1:11",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "644:1:11",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "634:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "634:12:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "634:12:11"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "offset",
																			"nodeType": "YulIdentifier",
																			"src": "596:6:11"
																		},
																		{
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "608:6:11"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "616:2:11"
																				}
																			],
																			"functionName": {
																				"name": "mul",
																				"nodeType": "YulIdentifier",
																				"src": "604:3:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "604:15:11"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nodeType": "YulIdentifier",
																		"src": "592:3:11"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "592:28:11"
																},
																{
																	"name": "_1",
																	"nodeType": "YulIdentifier",
																	"src": "622:2:11"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "588:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "588:37:11"
														},
														{
															"name": "end",
															"nodeType": "YulIdentifier",
															"src": "627:3:11"
														}
													],
													"functionName": {
														"name": "gt",
														"nodeType": "YulIdentifier",
														"src": "585:2:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "585:46:11"
												},
												"nodeType": "YulIf",
												"src": "582:2:11"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "657:10:11",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "666:1:11",
													"type": "",
													"value": "0"
												},
												"variables": [
													{
														"name": "i",
														"nodeType": "YulTypedName",
														"src": "661:1:11",
														"type": ""
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "725:195:11",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "739:30:11",
															"value": {
																"arguments": [
																	{
																		"name": "src",
																		"nodeType": "YulIdentifier",
																		"src": "765:3:11"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "752:12:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "752:17:11"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "743:5:11",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "809:5:11"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "782:26:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "782:33:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "782:33:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "dst",
																		"nodeType": "YulIdentifier",
																		"src": "835:3:11"
																	},
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "840:5:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "828:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "828:18:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "828:18:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "859:19:11",
															"value": {
																"arguments": [
																	{
																		"name": "dst",
																		"nodeType": "YulIdentifier",
																		"src": "870:3:11"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "875:2:11"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "866:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "866:12:11"
															},
															"variableNames": [
																{
																	"name": "dst",
																	"nodeType": "YulIdentifier",
																	"src": "859:3:11"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "891:19:11",
															"value": {
																"arguments": [
																	{
																		"name": "src",
																		"nodeType": "YulIdentifier",
																		"src": "902:3:11"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "907:2:11"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "898:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "898:12:11"
															},
															"variableNames": [
																{
																	"name": "src",
																	"nodeType": "YulIdentifier",
																	"src": "891:3:11"
																}
															]
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"name": "i",
															"nodeType": "YulIdentifier",
															"src": "687:1:11"
														},
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "690:6:11"
														}
													],
													"functionName": {
														"name": "lt",
														"nodeType": "YulIdentifier",
														"src": "684:2:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "684:13:11"
												},
												"nodeType": "YulForLoop",
												"post": {
													"nodeType": "YulBlock",
													"src": "698:18:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "700:14:11",
															"value": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "709:1:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "712:1:11",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "705:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "705:9:11"
															},
															"variableNames": [
																{
																	"name": "i",
																	"nodeType": "YulIdentifier",
																	"src": "700:1:11"
																}
															]
														}
													]
												},
												"pre": {
													"nodeType": "YulBlock",
													"src": "680:3:11",
													"statements": []
												},
												"src": "676:244:11"
											}
										]
									},
									"name": "abi_decode_t_array$_t_address_$dyn",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "offset",
											"nodeType": "YulTypedName",
											"src": "201:6:11",
											"type": ""
										},
										{
											"name": "end",
											"nodeType": "YulTypedName",
											"src": "209:3:11",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "array",
											"nodeType": "YulTypedName",
											"src": "217:5:11",
											"type": ""
										}
									],
									"src": "157:769:11"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "1001:622:11",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1050:24:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "array",
																		"nodeType": "YulIdentifier",
																		"src": "1059:5:11"
																	},
																	{
																		"name": "array",
																		"nodeType": "YulIdentifier",
																		"src": "1066:5:11"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "1052:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1052:20:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1052:20:11"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "offset",
																			"nodeType": "YulIdentifier",
																			"src": "1029:6:11"
																		},
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "1037:4:11",
																			"type": "",
																			"value": "0x1f"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nodeType": "YulIdentifier",
																		"src": "1025:3:11"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "1025:17:11"
																},
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "1044:3:11"
																}
															],
															"functionName": {
																"name": "slt",
																"nodeType": "YulIdentifier",
																"src": "1021:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "1021:27:11"
														}
													],
													"functionName": {
														"name": "iszero",
														"nodeType": "YulIdentifier",
														"src": "1014:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "1014:35:11"
												},
												"nodeType": "YulIf",
												"src": "1011:2:11"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "1083:34:11",
												"value": {
													"arguments": [
														{
															"name": "offset",
															"nodeType": "YulIdentifier",
															"src": "1110:6:11"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "1097:12:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "1097:20:11"
												},
												"variables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "1087:6:11",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulAssignment",
												"src": "1126:78:11",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "1196:6:11"
																}
															],
															"functionName": {
																"name": "array_allocation_size_t_array$_t_address_$dyn",
																"nodeType": "YulIdentifier",
																"src": "1150:45:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "1150:53:11"
														}
													],
													"functionName": {
														"name": "allocateMemory",
														"nodeType": "YulIdentifier",
														"src": "1135:14:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "1135:69:11"
												},
												"variableNames": [
													{
														"name": "array",
														"nodeType": "YulIdentifier",
														"src": "1126:5:11"
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "1213:16:11",
												"value": {
													"name": "array",
													"nodeType": "YulIdentifier",
													"src": "1224:5:11"
												},
												"variables": [
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "1217:3:11",
														"type": ""
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "array",
															"nodeType": "YulIdentifier",
															"src": "1245:5:11"
														},
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "1252:6:11"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "1238:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "1238:21:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "1238:21:11"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "1268:14:11",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "1278:4:11",
													"type": "",
													"value": "0x20"
												},
												"variables": [
													{
														"name": "_1",
														"nodeType": "YulTypedName",
														"src": "1272:2:11",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulAssignment",
												"src": "1291:21:11",
												"value": {
													"arguments": [
														{
															"name": "array",
															"nodeType": "YulIdentifier",
															"src": "1302:5:11"
														},
														{
															"name": "_1",
															"nodeType": "YulIdentifier",
															"src": "1309:2:11"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "1298:3:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "1298:14:11"
												},
												"variableNames": [
													{
														"name": "dst",
														"nodeType": "YulIdentifier",
														"src": "1291:3:11"
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "1321:26:11",
												"value": {
													"arguments": [
														{
															"name": "offset",
															"nodeType": "YulIdentifier",
															"src": "1336:6:11"
														},
														{
															"name": "_1",
															"nodeType": "YulIdentifier",
															"src": "1344:2:11"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "1332:3:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "1332:15:11"
												},
												"variables": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "1325:3:11",
														"type": ""
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1406:16:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1415:1:11",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1418:1:11",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "1408:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1408:12:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1408:12:11"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "offset",
																			"nodeType": "YulIdentifier",
																			"src": "1370:6:11"
																		},
																		{
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "1382:6:11"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "1390:2:11"
																				}
																			],
																			"functionName": {
																				"name": "mul",
																				"nodeType": "YulIdentifier",
																				"src": "1378:3:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1378:15:11"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nodeType": "YulIdentifier",
																		"src": "1366:3:11"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "1366:28:11"
																},
																{
																	"name": "_1",
																	"nodeType": "YulIdentifier",
																	"src": "1396:2:11"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "1362:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "1362:37:11"
														},
														{
															"name": "end",
															"nodeType": "YulIdentifier",
															"src": "1401:3:11"
														}
													],
													"functionName": {
														"name": "gt",
														"nodeType": "YulIdentifier",
														"src": "1359:2:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "1359:46:11"
												},
												"nodeType": "YulIf",
												"src": "1356:2:11"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "1431:10:11",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "1440:1:11",
													"type": "",
													"value": "0"
												},
												"variables": [
													{
														"name": "i",
														"nodeType": "YulTypedName",
														"src": "1435:1:11",
														"type": ""
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1499:118:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "dst",
																		"nodeType": "YulIdentifier",
																		"src": "1520:3:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "src",
																				"nodeType": "YulIdentifier",
																				"src": "1538:3:11"
																			}
																		],
																		"functionName": {
																			"name": "calldataload",
																			"nodeType": "YulIdentifier",
																			"src": "1525:12:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1525:17:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1513:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1513:30:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1513:30:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1556:19:11",
															"value": {
																"arguments": [
																	{
																		"name": "dst",
																		"nodeType": "YulIdentifier",
																		"src": "1567:3:11"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "1572:2:11"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1563:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1563:12:11"
															},
															"variableNames": [
																{
																	"name": "dst",
																	"nodeType": "YulIdentifier",
																	"src": "1556:3:11"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1588:19:11",
															"value": {
																"arguments": [
																	{
																		"name": "src",
																		"nodeType": "YulIdentifier",
																		"src": "1599:3:11"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "1604:2:11"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1595:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1595:12:11"
															},
															"variableNames": [
																{
																	"name": "src",
																	"nodeType": "YulIdentifier",
																	"src": "1588:3:11"
																}
															]
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"name": "i",
															"nodeType": "YulIdentifier",
															"src": "1461:1:11"
														},
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "1464:6:11"
														}
													],
													"functionName": {
														"name": "lt",
														"nodeType": "YulIdentifier",
														"src": "1458:2:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "1458:13:11"
												},
												"nodeType": "YulForLoop",
												"post": {
													"nodeType": "YulBlock",
													"src": "1472:18:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1474:14:11",
															"value": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "1483:1:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1486:1:11",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1479:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1479:9:11"
															},
															"variableNames": [
																{
																	"name": "i",
																	"nodeType": "YulIdentifier",
																	"src": "1474:1:11"
																}
															]
														}
													]
												},
												"pre": {
													"nodeType": "YulBlock",
													"src": "1454:3:11",
													"statements": []
												},
												"src": "1450:167:11"
											}
										]
									},
									"name": "abi_decode_t_array$_t_bytes32_$dyn",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "offset",
											"nodeType": "YulTypedName",
											"src": "975:6:11",
											"type": ""
										},
										{
											"name": "end",
											"nodeType": "YulTypedName",
											"src": "983:3:11",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "array",
											"nodeType": "YulTypedName",
											"src": "991:5:11",
											"type": ""
										}
									],
									"src": "931:692:11"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "1697:753:11",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1746:24:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "array",
																		"nodeType": "YulIdentifier",
																		"src": "1755:5:11"
																	},
																	{
																		"name": "array",
																		"nodeType": "YulIdentifier",
																		"src": "1762:5:11"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "1748:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1748:20:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1748:20:11"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "offset",
																			"nodeType": "YulIdentifier",
																			"src": "1725:6:11"
																		},
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "1733:4:11",
																			"type": "",
																			"value": "0x1f"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nodeType": "YulIdentifier",
																		"src": "1721:3:11"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "1721:17:11"
																},
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "1740:3:11"
																}
															],
															"functionName": {
																"name": "slt",
																"nodeType": "YulIdentifier",
																"src": "1717:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "1717:27:11"
														}
													],
													"functionName": {
														"name": "iszero",
														"nodeType": "YulIdentifier",
														"src": "1710:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "1710:35:11"
												},
												"nodeType": "YulIf",
												"src": "1707:2:11"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "1779:34:11",
												"value": {
													"arguments": [
														{
															"name": "offset",
															"nodeType": "YulIdentifier",
															"src": "1806:6:11"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "1793:12:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "1793:20:11"
												},
												"variables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "1783:6:11",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulAssignment",
												"src": "1822:78:11",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "1892:6:11"
																}
															],
															"functionName": {
																"name": "array_allocation_size_t_array$_t_address_$dyn",
																"nodeType": "YulIdentifier",
																"src": "1846:45:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "1846:53:11"
														}
													],
													"functionName": {
														"name": "allocateMemory",
														"nodeType": "YulIdentifier",
														"src": "1831:14:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "1831:69:11"
												},
												"variableNames": [
													{
														"name": "array",
														"nodeType": "YulIdentifier",
														"src": "1822:5:11"
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "1909:16:11",
												"value": {
													"name": "array",
													"nodeType": "YulIdentifier",
													"src": "1920:5:11"
												},
												"variables": [
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "1913:3:11",
														"type": ""
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "array",
															"nodeType": "YulIdentifier",
															"src": "1941:5:11"
														},
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "1948:6:11"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "1934:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "1934:21:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "1934:21:11"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "1964:14:11",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "1974:4:11",
													"type": "",
													"value": "0x20"
												},
												"variables": [
													{
														"name": "_1",
														"nodeType": "YulTypedName",
														"src": "1968:2:11",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulAssignment",
												"src": "1987:21:11",
												"value": {
													"arguments": [
														{
															"name": "array",
															"nodeType": "YulIdentifier",
															"src": "1998:5:11"
														},
														{
															"name": "_1",
															"nodeType": "YulIdentifier",
															"src": "2005:2:11"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "1994:3:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "1994:14:11"
												},
												"variableNames": [
													{
														"name": "dst",
														"nodeType": "YulIdentifier",
														"src": "1987:3:11"
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "2017:26:11",
												"value": {
													"arguments": [
														{
															"name": "offset",
															"nodeType": "YulIdentifier",
															"src": "2032:6:11"
														},
														{
															"name": "_1",
															"nodeType": "YulIdentifier",
															"src": "2040:2:11"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "2028:3:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "2028:15:11"
												},
												"variables": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "2021:3:11",
														"type": ""
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2102:16:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2111:1:11",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2114:1:11",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "2104:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2104:12:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2104:12:11"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "offset",
																			"nodeType": "YulIdentifier",
																			"src": "2066:6:11"
																		},
																		{
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "2078:6:11"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "2086:2:11"
																				}
																			],
																			"functionName": {
																				"name": "mul",
																				"nodeType": "YulIdentifier",
																				"src": "2074:3:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2074:15:11"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nodeType": "YulIdentifier",
																		"src": "2062:3:11"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "2062:28:11"
																},
																{
																	"name": "_1",
																	"nodeType": "YulIdentifier",
																	"src": "2092:2:11"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "2058:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "2058:37:11"
														},
														{
															"name": "end",
															"nodeType": "YulIdentifier",
															"src": "2097:3:11"
														}
													],
													"functionName": {
														"name": "gt",
														"nodeType": "YulIdentifier",
														"src": "2055:2:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "2055:46:11"
												},
												"nodeType": "YulIf",
												"src": "2052:2:11"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "2127:10:11",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "2136:1:11",
													"type": "",
													"value": "0"
												},
												"variables": [
													{
														"name": "i",
														"nodeType": "YulTypedName",
														"src": "2131:1:11",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "2146:12:11",
												"value": {
													"name": "i",
													"nodeType": "YulIdentifier",
													"src": "2157:1:11"
												},
												"variables": [
													{
														"name": "i_1",
														"nodeType": "YulTypedName",
														"src": "2150:3:11",
														"type": ""
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2222:222:11",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2236:30:11",
															"value": {
																"arguments": [
																	{
																		"name": "src",
																		"nodeType": "YulIdentifier",
																		"src": "2262:3:11"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2249:12:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2249:17:11"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "2240:5:11",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2323:16:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "2332:1:11"
																				},
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "2335:1:11"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2325:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2325:12:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2325:12:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "2292:5:11"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2310:2:11",
																						"type": "",
																						"value": "15"
																					},
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "2314:5:11"
																					}
																				],
																				"functionName": {
																					"name": "signextend",
																					"nodeType": "YulIdentifier",
																					"src": "2299:10:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2299:21:11"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "2289:2:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2289:32:11"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "2282:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2282:40:11"
															},
															"nodeType": "YulIf",
															"src": "2279:2:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "dst",
																		"nodeType": "YulIdentifier",
																		"src": "2359:3:11"
																	},
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "2364:5:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2352:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2352:18:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2352:18:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2383:19:11",
															"value": {
																"arguments": [
																	{
																		"name": "dst",
																		"nodeType": "YulIdentifier",
																		"src": "2394:3:11"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "2399:2:11"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2390:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2390:12:11"
															},
															"variableNames": [
																{
																	"name": "dst",
																	"nodeType": "YulIdentifier",
																	"src": "2383:3:11"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2415:19:11",
															"value": {
																"arguments": [
																	{
																		"name": "src",
																		"nodeType": "YulIdentifier",
																		"src": "2426:3:11"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "2431:2:11"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2422:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2422:12:11"
															},
															"variableNames": [
																{
																	"name": "src",
																	"nodeType": "YulIdentifier",
																	"src": "2415:3:11"
																}
															]
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"name": "i_1",
															"nodeType": "YulIdentifier",
															"src": "2178:3:11"
														},
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "2183:6:11"
														}
													],
													"functionName": {
														"name": "lt",
														"nodeType": "YulIdentifier",
														"src": "2175:2:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "2175:15:11"
												},
												"nodeType": "YulForLoop",
												"post": {
													"nodeType": "YulBlock",
													"src": "2191:22:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2193:18:11",
															"value": {
																"arguments": [
																	{
																		"name": "i_1",
																		"nodeType": "YulIdentifier",
																		"src": "2204:3:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2209:1:11",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2200:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2200:11:11"
															},
															"variableNames": [
																{
																	"name": "i_1",
																	"nodeType": "YulIdentifier",
																	"src": "2193:3:11"
																}
															]
														}
													]
												},
												"pre": {
													"nodeType": "YulBlock",
													"src": "2171:3:11",
													"statements": []
												},
												"src": "2167:277:11"
											}
										]
									},
									"name": "abi_decode_t_array$_t_int128_$dyn",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "offset",
											"nodeType": "YulTypedName",
											"src": "1671:6:11",
											"type": ""
										},
										{
											"name": "end",
											"nodeType": "YulTypedName",
											"src": "1679:3:11",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "array",
											"nodeType": "YulTypedName",
											"src": "1687:5:11",
											"type": ""
										}
									],
									"src": "1628:822:11"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "2540:1594:11",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2589:24:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "array",
																		"nodeType": "YulIdentifier",
																		"src": "2598:5:11"
																	},
																	{
																		"name": "array",
																		"nodeType": "YulIdentifier",
																		"src": "2605:5:11"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "2591:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2591:20:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2591:20:11"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "offset",
																			"nodeType": "YulIdentifier",
																			"src": "2568:6:11"
																		},
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "2576:4:11",
																			"type": "",
																			"value": "0x1f"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nodeType": "YulIdentifier",
																		"src": "2564:3:11"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "2564:17:11"
																},
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "2583:3:11"
																}
															],
															"functionName": {
																"name": "slt",
																"nodeType": "YulIdentifier",
																"src": "2560:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "2560:27:11"
														}
													],
													"functionName": {
														"name": "iszero",
														"nodeType": "YulIdentifier",
														"src": "2553:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "2553:35:11"
												},
												"nodeType": "YulIf",
												"src": "2550:2:11"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "2622:34:11",
												"value": {
													"arguments": [
														{
															"name": "offset",
															"nodeType": "YulIdentifier",
															"src": "2649:6:11"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "2636:12:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "2636:20:11"
												},
												"variables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "2626:6:11",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulAssignment",
												"src": "2665:78:11",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "2735:6:11"
																}
															],
															"functionName": {
																"name": "array_allocation_size_t_array$_t_address_$dyn",
																"nodeType": "YulIdentifier",
																"src": "2689:45:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "2689:53:11"
														}
													],
													"functionName": {
														"name": "allocateMemory",
														"nodeType": "YulIdentifier",
														"src": "2674:14:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "2674:69:11"
												},
												"variableNames": [
													{
														"name": "array",
														"nodeType": "YulIdentifier",
														"src": "2665:5:11"
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "2752:16:11",
												"value": {
													"name": "array",
													"nodeType": "YulIdentifier",
													"src": "2763:5:11"
												},
												"variables": [
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "2756:3:11",
														"type": ""
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "array",
															"nodeType": "YulIdentifier",
															"src": "2784:5:11"
														},
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "2791:6:11"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "2777:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "2777:21:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "2777:21:11"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "2807:14:11",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "2817:4:11",
													"type": "",
													"value": "0x20"
												},
												"variables": [
													{
														"name": "_1",
														"nodeType": "YulTypedName",
														"src": "2811:2:11",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulAssignment",
												"src": "2830:21:11",
												"value": {
													"arguments": [
														{
															"name": "array",
															"nodeType": "YulIdentifier",
															"src": "2841:5:11"
														},
														{
															"name": "_1",
															"nodeType": "YulIdentifier",
															"src": "2848:2:11"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "2837:3:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "2837:14:11"
												},
												"variableNames": [
													{
														"name": "dst",
														"nodeType": "YulIdentifier",
														"src": "2830:3:11"
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "2860:26:11",
												"value": {
													"arguments": [
														{
															"name": "offset",
															"nodeType": "YulIdentifier",
															"src": "2875:6:11"
														},
														{
															"name": "_1",
															"nodeType": "YulIdentifier",
															"src": "2883:2:11"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "2871:3:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "2871:15:11"
												},
												"variables": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "2864:3:11",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "2895:10:11",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "2904:1:11",
													"type": "",
													"value": "0"
												},
												"variables": [
													{
														"name": "i",
														"nodeType": "YulTypedName",
														"src": "2899:1:11",
														"type": ""
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2963:1165:11",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2977:40:11",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "2991:6:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "src",
																				"nodeType": "YulIdentifier",
																				"src": "3012:3:11"
																			}
																		],
																		"functionName": {
																			"name": "calldataload",
																			"nodeType": "YulIdentifier",
																			"src": "2999:12:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2999:17:11"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2987:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2987:30:11"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "2981:2:11",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3030:16:11",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "3040:6:11",
																"type": "",
																"value": "0x0100"
															},
															"variables": [
																{
																	"name": "_3",
																	"nodeType": "YulTypedName",
																	"src": "3034:2:11",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3157:16:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3166:1:11",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3169:1:11",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3159:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3159:12:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3159:12:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "end",
																						"nodeType": "YulIdentifier",
																						"src": "3074:3:11"
																					},
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "3079:2:11"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "3070:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3070:12:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3084:66:11",
																				"type": "",
																				"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3066:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3066:85:11"
																	},
																	{
																		"name": "_3",
																		"nodeType": "YulIdentifier",
																		"src": "3153:2:11"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3062:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3062:94:11"
															},
															"nodeType": "YulIf",
															"src": "3059:2:11"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3186:14:11",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "3196:4:11",
																"type": "",
																"value": "0xc0"
															},
															"variables": [
																{
																	"name": "_4",
																	"nodeType": "YulTypedName",
																	"src": "3190:2:11",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3213:31:11",
															"value": {
																"arguments": [
																	{
																		"name": "_4",
																		"nodeType": "YulIdentifier",
																		"src": "3241:2:11"
																	}
																],
																"functionName": {
																	"name": "allocateMemory",
																	"nodeType": "YulIdentifier",
																	"src": "3226:14:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3226:18:11"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "3217:5:11",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "3264:5:11"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "3296:2:11"
																					},
																					{
																						"name": "_1",
																						"nodeType": "YulIdentifier",
																						"src": "3300:2:11"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3292:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3292:11:11"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "3271:20:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3271:33:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3257:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3257:48:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3257:48:11"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3318:12:11",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "3328:2:11",
																"type": "",
																"value": "64"
															},
															"variables": [
																{
																	"name": "_5",
																	"nodeType": "YulTypedName",
																	"src": "3322:2:11",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3354:5:11"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "3361:2:11"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3350:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3350:14:11"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "3383:2:11"
																					},
																					{
																						"name": "_5",
																						"nodeType": "YulIdentifier",
																						"src": "3387:2:11"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3379:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3379:11:11"
																			}
																		],
																		"functionName": {
																			"name": "calldataload",
																			"nodeType": "YulIdentifier",
																			"src": "3366:12:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3366:25:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3343:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3343:49:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3343:49:11"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3405:12:11",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "3415:2:11",
																"type": "",
																"value": "96"
															},
															"variables": [
																{
																	"name": "_6",
																	"nodeType": "YulTypedName",
																	"src": "3409:2:11",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3441:5:11"
																			},
																			{
																				"name": "_5",
																				"nodeType": "YulIdentifier",
																				"src": "3448:2:11"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3437:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3437:14:11"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "3488:2:11"
																					},
																					{
																						"name": "_6",
																						"nodeType": "YulIdentifier",
																						"src": "3492:2:11"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3484:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3484:11:11"
																			},
																			{
																				"name": "end",
																				"nodeType": "YulIdentifier",
																				"src": "3497:3:11"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_struct$_Signature",
																			"nodeType": "YulIdentifier",
																			"src": "3453:30:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3453:48:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3430:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3430:72:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3430:72:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3526:5:11"
																			},
																			{
																				"name": "_6",
																				"nodeType": "YulIdentifier",
																				"src": "3533:2:11"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3522:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3522:14:11"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "3555:2:11"
																					},
																					{
																						"name": "_4",
																						"nodeType": "YulIdentifier",
																						"src": "3559:2:11"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3551:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3551:11:11"
																			}
																		],
																		"functionName": {
																			"name": "calldataload",
																			"nodeType": "YulIdentifier",
																			"src": "3538:12:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3538:25:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3515:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3515:49:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3515:49:11"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3577:42:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "3610:2:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3614:3:11",
																				"type": "",
																				"value": "224"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3606:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3606:12:11"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3593:12:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3593:26:11"
															},
															"variables": [
																{
																	"name": "offset_1",
																	"nodeType": "YulTypedName",
																	"src": "3581:8:11",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3632:28:11",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "3642:18:11",
																"type": "",
																"value": "0xffffffffffffffff"
															},
															"variables": [
																{
																	"name": "_7",
																	"nodeType": "YulTypedName",
																	"src": "3636:2:11",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3693:16:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3702:1:11",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3705:1:11",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3695:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3695:12:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3695:12:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset_1",
																		"nodeType": "YulIdentifier",
																		"src": "3679:8:11"
																	},
																	{
																		"name": "_7",
																		"nodeType": "YulIdentifier",
																		"src": "3689:2:11"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "3676:2:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3676:16:11"
															},
															"nodeType": "YulIf",
															"src": "3673:2:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3733:5:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3740:4:11",
																				"type": "",
																				"value": "0x80"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3729:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3729:16:11"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "_2",
																								"nodeType": "YulIdentifier",
																								"src": "3790:2:11"
																							},
																							{
																								"name": "offset_1",
																								"nodeType": "YulIdentifier",
																								"src": "3794:8:11"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "3786:3:11"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "3786:17:11"
																					},
																					{
																						"name": "_1",
																						"nodeType": "YulIdentifier",
																						"src": "3805:2:11"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3782:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3782:26:11"
																			},
																			{
																				"name": "end",
																				"nodeType": "YulIdentifier",
																				"src": "3810:3:11"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_array$_t_address_$dyn",
																			"nodeType": "YulIdentifier",
																			"src": "3747:34:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3747:67:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3722:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3722:93:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3722:93:11"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3828:41:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "3861:2:11"
																			},
																			{
																				"name": "_3",
																				"nodeType": "YulIdentifier",
																				"src": "3865:2:11"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3857:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3857:11:11"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3844:12:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3844:25:11"
															},
															"variables": [
																{
																	"name": "offset_2",
																	"nodeType": "YulTypedName",
																	"src": "3832:8:11",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3902:16:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3911:1:11",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3914:1:11",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3904:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3904:12:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3904:12:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset_2",
																		"nodeType": "YulIdentifier",
																		"src": "3888:8:11"
																	},
																	{
																		"name": "_7",
																		"nodeType": "YulIdentifier",
																		"src": "3898:2:11"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "3885:2:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3885:16:11"
															},
															"nodeType": "YulIf",
															"src": "3882:2:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3942:5:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3949:3:11",
																				"type": "",
																				"value": "160"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3938:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3938:15:11"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "_2",
																								"nodeType": "YulIdentifier",
																								"src": "3998:2:11"
																							},
																							{
																								"name": "offset_2",
																								"nodeType": "YulIdentifier",
																								"src": "4002:8:11"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "3994:3:11"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "3994:17:11"
																					},
																					{
																						"name": "_1",
																						"nodeType": "YulIdentifier",
																						"src": "4013:2:11"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3990:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3990:26:11"
																			},
																			{
																				"name": "end",
																				"nodeType": "YulIdentifier",
																				"src": "4018:3:11"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_array$_t_bytes32_$dyn",
																			"nodeType": "YulIdentifier",
																			"src": "3955:34:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3955:67:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3931:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3931:92:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3931:92:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "dst",
																		"nodeType": "YulIdentifier",
																		"src": "4043:3:11"
																	},
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "4048:5:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4036:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4036:18:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4036:18:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4067:19:11",
															"value": {
																"arguments": [
																	{
																		"name": "dst",
																		"nodeType": "YulIdentifier",
																		"src": "4078:3:11"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "4083:2:11"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4074:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4074:12:11"
															},
															"variableNames": [
																{
																	"name": "dst",
																	"nodeType": "YulIdentifier",
																	"src": "4067:3:11"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4099:19:11",
															"value": {
																"arguments": [
																	{
																		"name": "src",
																		"nodeType": "YulIdentifier",
																		"src": "4110:3:11"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "4115:2:11"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4106:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4106:12:11"
															},
															"variableNames": [
																{
																	"name": "src",
																	"nodeType": "YulIdentifier",
																	"src": "4099:3:11"
																}
															]
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"name": "i",
															"nodeType": "YulIdentifier",
															"src": "2925:1:11"
														},
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "2928:6:11"
														}
													],
													"functionName": {
														"name": "lt",
														"nodeType": "YulIdentifier",
														"src": "2922:2:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "2922:13:11"
												},
												"nodeType": "YulForLoop",
												"post": {
													"nodeType": "YulBlock",
													"src": "2936:18:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2938:14:11",
															"value": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "2947:1:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2950:1:11",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2943:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2943:9:11"
															},
															"variableNames": [
																{
																	"name": "i",
																	"nodeType": "YulIdentifier",
																	"src": "2938:1:11"
																}
															]
														}
													]
												},
												"pre": {
													"nodeType": "YulBlock",
													"src": "2918:3:11",
													"statements": []
												},
												"src": "2914:1214:11"
											}
										]
									},
									"name": "abi_decode_t_array$_t_struct$_SettlementData_$dyn",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "offset",
											"nodeType": "YulTypedName",
											"src": "2514:6:11",
											"type": ""
										},
										{
											"name": "end",
											"nodeType": "YulTypedName",
											"src": "2522:3:11",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "array",
											"nodeType": "YulTypedName",
											"src": "2530:5:11",
											"type": ""
										}
									],
									"src": "2455:1679:11"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "4187:114:11",
										"statements": [
											{
												"nodeType": "YulAssignment",
												"src": "4197:29:11",
												"value": {
													"arguments": [
														{
															"name": "offset",
															"nodeType": "YulIdentifier",
															"src": "4219:6:11"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "4206:12:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "4206:20:11"
												},
												"variableNames": [
													{
														"name": "value",
														"nodeType": "YulIdentifier",
														"src": "4197:5:11"
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4279:16:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4288:1:11",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4291:1:11",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "4281:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4281:12:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4281:12:11"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "4248:5:11"
																},
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"name": "value",
																					"nodeType": "YulIdentifier",
																					"src": "4269:5:11"
																				}
																			],
																			"functionName": {
																				"name": "iszero",
																				"nodeType": "YulIdentifier",
																				"src": "4262:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4262:13:11"
																		}
																	],
																	"functionName": {
																		"name": "iszero",
																		"nodeType": "YulIdentifier",
																		"src": "4255:6:11"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "4255:21:11"
																}
															],
															"functionName": {
																"name": "eq",
																"nodeType": "YulIdentifier",
																"src": "4245:2:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "4245:32:11"
														}
													],
													"functionName": {
														"name": "iszero",
														"nodeType": "YulIdentifier",
														"src": "4238:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "4238:40:11"
												},
												"nodeType": "YulIf",
												"src": "4235:2:11"
											}
										]
									},
									"name": "abi_decode_t_bool",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "offset",
											"nodeType": "YulTypedName",
											"src": "4166:6:11",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "value",
											"nodeType": "YulTypedName",
											"src": "4177:5:11",
											"type": ""
										}
									],
									"src": "4139:162:11"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "4354:113:11",
										"statements": [
											{
												"nodeType": "YulAssignment",
												"src": "4364:29:11",
												"value": {
													"arguments": [
														{
															"name": "offset",
															"nodeType": "YulIdentifier",
															"src": "4386:6:11"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "4373:12:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "4373:20:11"
												},
												"variableNames": [
													{
														"name": "value",
														"nodeType": "YulIdentifier",
														"src": "4364:5:11"
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4445:16:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4454:1:11",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4457:1:11",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "4447:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4447:12:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4447:12:11"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "4415:5:11"
																},
																{
																	"arguments": [
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "4433:1:11",
																			"type": "",
																			"value": "0"
																		},
																		{
																			"name": "value",
																			"nodeType": "YulIdentifier",
																			"src": "4436:5:11"
																		}
																	],
																	"functionName": {
																		"name": "signextend",
																		"nodeType": "YulIdentifier",
																		"src": "4422:10:11"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "4422:20:11"
																}
															],
															"functionName": {
																"name": "eq",
																"nodeType": "YulIdentifier",
																"src": "4412:2:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "4412:31:11"
														}
													],
													"functionName": {
														"name": "iszero",
														"nodeType": "YulIdentifier",
														"src": "4405:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "4405:39:11"
												},
												"nodeType": "YulIf",
												"src": "4402:2:11"
											}
										]
									},
									"name": "abi_decode_t_int8",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "offset",
											"nodeType": "YulTypedName",
											"src": "4333:6:11",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "value",
											"nodeType": "YulTypedName",
											"src": "4344:5:11",
											"type": ""
										}
									],
									"src": "4306:161:11"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "4527:526:11",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4576:24:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "array",
																		"nodeType": "YulIdentifier",
																		"src": "4585:5:11"
																	},
																	{
																		"name": "array",
																		"nodeType": "YulIdentifier",
																		"src": "4592:5:11"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "4578:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4578:20:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4578:20:11"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "offset",
																			"nodeType": "YulIdentifier",
																			"src": "4555:6:11"
																		},
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "4563:4:11",
																			"type": "",
																			"value": "0x1f"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nodeType": "YulIdentifier",
																		"src": "4551:3:11"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "4551:17:11"
																},
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "4570:3:11"
																}
															],
															"functionName": {
																"name": "slt",
																"nodeType": "YulIdentifier",
																"src": "4547:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "4547:27:11"
														}
													],
													"functionName": {
														"name": "iszero",
														"nodeType": "YulIdentifier",
														"src": "4540:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "4540:35:11"
												},
												"nodeType": "YulIf",
												"src": "4537:2:11"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "4609:34:11",
												"value": {
													"arguments": [
														{
															"name": "offset",
															"nodeType": "YulIdentifier",
															"src": "4636:6:11"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "4623:12:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "4623:20:11"
												},
												"variables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "4613:6:11",
														"type": ""
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4686:13:11",
													"statements": [
														{
															"expression": {
																"arguments": [],
																"functionName": {
																	"name": "invalid",
																	"nodeType": "YulIdentifier",
																	"src": "4688:7:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4688:9:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4688:9:11"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "4658:6:11"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "4666:18:11",
															"type": "",
															"value": "0xffffffffffffffff"
														}
													],
													"functionName": {
														"name": "gt",
														"nodeType": "YulIdentifier",
														"src": "4655:2:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "4655:30:11"
												},
												"nodeType": "YulIf",
												"src": "4652:2:11"
											},
											{
												"nodeType": "YulAssignment",
												"src": "4708:126:11",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "4744:6:11"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4752:4:11",
																					"type": "",
																					"value": "0x1f"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "4740:3:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4740:17:11"
																		},
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "4759:66:11",
																			"type": "",
																			"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"
																		}
																	],
																	"functionName": {
																		"name": "and",
																		"nodeType": "YulIdentifier",
																		"src": "4736:3:11"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "4736:90:11"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "4828:4:11",
																	"type": "",
																	"value": "0x20"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "4732:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "4732:101:11"
														}
													],
													"functionName": {
														"name": "allocateMemory",
														"nodeType": "YulIdentifier",
														"src": "4717:14:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "4717:117:11"
												},
												"variableNames": [
													{
														"name": "array",
														"nodeType": "YulIdentifier",
														"src": "4708:5:11"
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "array",
															"nodeType": "YulIdentifier",
															"src": "4850:5:11"
														},
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "4857:6:11"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "4843:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "4843:21:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "4843:21:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4916:16:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4925:1:11",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4928:1:11",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "4918:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4918:12:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4918:12:11"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "offset",
																			"nodeType": "YulIdentifier",
																			"src": "4887:6:11"
																		},
																		{
																			"name": "length",
																			"nodeType": "YulIdentifier",
																			"src": "4895:6:11"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nodeType": "YulIdentifier",
																		"src": "4883:3:11"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "4883:19:11"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "4904:4:11",
																	"type": "",
																	"value": "0x20"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "4879:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "4879:30:11"
														},
														{
															"name": "end",
															"nodeType": "YulIdentifier",
															"src": "4911:3:11"
														}
													],
													"functionName": {
														"name": "gt",
														"nodeType": "YulIdentifier",
														"src": "4876:2:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "4876:39:11"
												},
												"nodeType": "YulIf",
												"src": "4873:2:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "array",
																	"nodeType": "YulIdentifier",
																	"src": "4958:5:11"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "4965:4:11",
																	"type": "",
																	"value": "0x20"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "4954:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "4954:16:11"
														},
														{
															"arguments": [
																{
																	"name": "offset",
																	"nodeType": "YulIdentifier",
																	"src": "4976:6:11"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "4984:4:11",
																	"type": "",
																	"value": "0x20"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "4972:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "4972:17:11"
														},
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "4991:6:11"
														}
													],
													"functionName": {
														"name": "calldatacopy",
														"nodeType": "YulIdentifier",
														"src": "4941:12:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "4941:57:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "4941:57:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "array",
																			"nodeType": "YulIdentifier",
																			"src": "5022:5:11"
																		},
																		{
																			"name": "length",
																			"nodeType": "YulIdentifier",
																			"src": "5029:6:11"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nodeType": "YulIdentifier",
																		"src": "5018:3:11"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "5018:18:11"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "5038:4:11",
																	"type": "",
																	"value": "0x20"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "5014:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "5014:29:11"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "5045:1:11",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "5007:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "5007:40:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "5007:40:11"
											}
										]
									},
									"name": "abi_decode_t_string",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "offset",
											"nodeType": "YulTypedName",
											"src": "4501:6:11",
											"type": ""
										},
										{
											"name": "end",
											"nodeType": "YulTypedName",
											"src": "4509:3:11",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "array",
											"nodeType": "YulTypedName",
											"src": "4517:5:11",
											"type": ""
										}
									],
									"src": "4472:581:11"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "5132:1622:11",
										"statements": [
											{
												"nodeType": "YulVariableDeclaration",
												"src": "5142:16:11",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "5152:6:11",
													"type": "",
													"value": "0x01e0"
												},
												"variables": [
													{
														"name": "_1",
														"nodeType": "YulTypedName",
														"src": "5146:2:11",
														"type": ""
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5199:24:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "5208:5:11"
																	},
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "5215:5:11"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "5201:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "5201:20:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5201:20:11"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "5178:3:11"
																},
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "5183:9:11"
																}
															],
															"functionName": {
																"name": "sub",
																"nodeType": "YulIdentifier",
																"src": "5174:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "5174:19:11"
														},
														{
															"name": "_1",
															"nodeType": "YulIdentifier",
															"src": "5195:2:11"
														}
													],
													"functionName": {
														"name": "slt",
														"nodeType": "YulIdentifier",
														"src": "5170:3:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "5170:28:11"
												},
												"nodeType": "YulIf",
												"src": "5167:2:11"
											},
											{
												"nodeType": "YulAssignment",
												"src": "5232:27:11",
												"value": {
													"arguments": [
														{
															"name": "_1",
															"nodeType": "YulIdentifier",
															"src": "5256:2:11"
														}
													],
													"functionName": {
														"name": "allocateMemory",
														"nodeType": "YulIdentifier",
														"src": "5241:14:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "5241:18:11"
												},
												"variableNames": [
													{
														"name": "value",
														"nodeType": "YulIdentifier",
														"src": "5232:5:11"
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "5268:37:11",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "5295:9:11"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "5282:12:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "5282:23:11"
												},
												"variables": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "5272:6:11",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "5314:28:11",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "5324:18:11",
													"type": "",
													"value": "0xffffffffffffffff"
												},
												"variables": [
													{
														"name": "_2",
														"nodeType": "YulTypedName",
														"src": "5318:2:11",
														"type": ""
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5369:16:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5378:1:11",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5381:1:11",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "5371:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "5371:12:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5371:12:11"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"name": "offset",
															"nodeType": "YulIdentifier",
															"src": "5357:6:11"
														},
														{
															"name": "_2",
															"nodeType": "YulIdentifier",
															"src": "5365:2:11"
														}
													],
													"functionName": {
														"name": "gt",
														"nodeType": "YulIdentifier",
														"src": "5354:2:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "5354:14:11"
												},
												"nodeType": "YulIf",
												"src": "5351:2:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "value",
															"nodeType": "YulIdentifier",
															"src": "5401:5:11"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "headStart",
																			"nodeType": "YulIdentifier",
																			"src": "5432:9:11"
																		},
																		{
																			"name": "offset",
																			"nodeType": "YulIdentifier",
																			"src": "5443:6:11"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nodeType": "YulIdentifier",
																		"src": "5428:3:11"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "5428:22:11"
																},
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "5452:3:11"
																}
															],
															"functionName": {
																"name": "abi_decode_t_string",
																"nodeType": "YulIdentifier",
																"src": "5408:19:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "5408:48:11"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "5394:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "5394:63:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "5394:63:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "5477:5:11"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "5484:2:11",
																	"type": "",
																	"value": "32"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "5473:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "5473:14:11"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "headStart",
																			"nodeType": "YulIdentifier",
																			"src": "5513:9:11"
																		},
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "5524:2:11",
																			"type": "",
																			"value": "32"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nodeType": "YulIdentifier",
																		"src": "5509:3:11"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "5509:18:11"
																}
															],
															"functionName": {
																"name": "abi_decode_t_uint40",
																"nodeType": "YulIdentifier",
																"src": "5489:19:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "5489:39:11"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "5466:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "5466:63:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "5466:63:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "5549:5:11"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "5556:2:11",
																	"type": "",
																	"value": "64"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "5545:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "5545:14:11"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "headStart",
																			"nodeType": "YulIdentifier",
																			"src": "5585:9:11"
																		},
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "5596:2:11",
																			"type": "",
																			"value": "64"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nodeType": "YulIdentifier",
																		"src": "5581:3:11"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "5581:18:11"
																}
															],
															"functionName": {
																"name": "abi_decode_t_uint24",
																"nodeType": "YulIdentifier",
																"src": "5561:19:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "5561:39:11"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "5538:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "5538:63:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "5538:63:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "5621:5:11"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "5628:2:11",
																	"type": "",
																	"value": "96"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "5617:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "5617:14:11"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "headStart",
																			"nodeType": "YulIdentifier",
																			"src": "5656:9:11"
																		},
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "5667:2:11",
																			"type": "",
																			"value": "96"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nodeType": "YulIdentifier",
																		"src": "5652:3:11"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "5652:18:11"
																}
															],
															"functionName": {
																"name": "abi_decode_t_uint8",
																"nodeType": "YulIdentifier",
																"src": "5633:18:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "5633:38:11"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "5610:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "5610:62:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "5610:62:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "5692:5:11"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "5699:3:11",
																	"type": "",
																	"value": "128"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "5688:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "5688:15:11"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "headStart",
																			"nodeType": "YulIdentifier",
																			"src": "5728:9:11"
																		},
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "5739:3:11",
																			"type": "",
																			"value": "128"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nodeType": "YulIdentifier",
																		"src": "5724:3:11"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "5724:19:11"
																}
															],
															"functionName": {
																"name": "abi_decode_t_uint8",
																"nodeType": "YulIdentifier",
																"src": "5705:18:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "5705:39:11"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "5681:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "5681:64:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "5681:64:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "5765:5:11"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "5772:3:11",
																	"type": "",
																	"value": "160"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "5761:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "5761:15:11"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "headStart",
																			"nodeType": "YulIdentifier",
																			"src": "5801:9:11"
																		},
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "5812:3:11",
																			"type": "",
																			"value": "160"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nodeType": "YulIdentifier",
																		"src": "5797:3:11"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "5797:19:11"
																}
															],
															"functionName": {
																"name": "abi_decode_t_uint8",
																"nodeType": "YulIdentifier",
																"src": "5778:18:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "5778:39:11"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "5754:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "5754:64:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "5754:64:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "5838:5:11"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "5845:3:11",
																	"type": "",
																	"value": "192"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "5834:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "5834:15:11"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "headStart",
																			"nodeType": "YulIdentifier",
																			"src": "5873:9:11"
																		},
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "5884:3:11",
																			"type": "",
																			"value": "192"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nodeType": "YulIdentifier",
																		"src": "5869:3:11"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "5869:19:11"
																}
															],
															"functionName": {
																"name": "abi_decode_t_int8",
																"nodeType": "YulIdentifier",
																"src": "5851:17:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "5851:38:11"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "5827:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "5827:63:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "5827:63:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "5910:5:11"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "5917:3:11",
																	"type": "",
																	"value": "224"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "5906:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "5906:15:11"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "headStart",
																			"nodeType": "YulIdentifier",
																			"src": "5948:9:11"
																		},
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "5959:3:11",
																			"type": "",
																			"value": "224"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nodeType": "YulIdentifier",
																		"src": "5944:3:11"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "5944:19:11"
																}
															],
															"functionName": {
																"name": "abi_decode_t_address",
																"nodeType": "YulIdentifier",
																"src": "5923:20:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "5923:41:11"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "5899:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "5899:66:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "5899:66:11"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "5974:13:11",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "5984:3:11",
													"type": "",
													"value": "256"
												},
												"variables": [
													{
														"name": "_3",
														"nodeType": "YulTypedName",
														"src": "5978:2:11",
														"type": ""
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "6007:5:11"
																},
																{
																	"name": "_3",
																	"nodeType": "YulIdentifier",
																	"src": "6014:2:11"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "6003:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "6003:14:11"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "headStart",
																			"nodeType": "YulIdentifier",
																			"src": "6042:9:11"
																		},
																		{
																			"name": "_3",
																			"nodeType": "YulIdentifier",
																			"src": "6053:2:11"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nodeType": "YulIdentifier",
																		"src": "6038:3:11"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "6038:18:11"
																}
															],
															"functionName": {
																"name": "abi_decode_t_uint8",
																"nodeType": "YulIdentifier",
																"src": "6019:18:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "6019:38:11"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "5996:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "5996:62:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "5996:62:11"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "6067:13:11",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "6077:3:11",
													"type": "",
													"value": "288"
												},
												"variables": [
													{
														"name": "_4",
														"nodeType": "YulTypedName",
														"src": "6071:2:11",
														"type": ""
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "6100:5:11"
																},
																{
																	"name": "_4",
																	"nodeType": "YulIdentifier",
																	"src": "6107:2:11"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "6096:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "6096:14:11"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "headStart",
																			"nodeType": "YulIdentifier",
																			"src": "6135:9:11"
																		},
																		{
																			"name": "_4",
																			"nodeType": "YulIdentifier",
																			"src": "6146:2:11"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nodeType": "YulIdentifier",
																		"src": "6131:3:11"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "6131:18:11"
																}
															],
															"functionName": {
																"name": "abi_decode_t_uint8",
																"nodeType": "YulIdentifier",
																"src": "6112:18:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "6112:38:11"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "6089:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "6089:62:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "6089:62:11"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "6160:13:11",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "6170:3:11",
													"type": "",
													"value": "320"
												},
												"variables": [
													{
														"name": "_5",
														"nodeType": "YulTypedName",
														"src": "6164:2:11",
														"type": ""
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "6193:5:11"
																},
																{
																	"name": "_5",
																	"nodeType": "YulIdentifier",
																	"src": "6200:2:11"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "6189:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "6189:14:11"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "headStart",
																			"nodeType": "YulIdentifier",
																			"src": "6228:9:11"
																		},
																		{
																			"name": "_5",
																			"nodeType": "YulIdentifier",
																			"src": "6239:2:11"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nodeType": "YulIdentifier",
																		"src": "6224:3:11"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "6224:18:11"
																}
															],
															"functionName": {
																"name": "abi_decode_t_uint8",
																"nodeType": "YulIdentifier",
																"src": "6205:18:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "6205:38:11"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "6182:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "6182:62:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "6182:62:11"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "6253:13:11",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "6263:3:11",
													"type": "",
													"value": "352"
												},
												"variables": [
													{
														"name": "_6",
														"nodeType": "YulTypedName",
														"src": "6257:2:11",
														"type": ""
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "6286:5:11"
																},
																{
																	"name": "_6",
																	"nodeType": "YulIdentifier",
																	"src": "6293:2:11"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "6282:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "6282:14:11"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "headStart",
																			"nodeType": "YulIdentifier",
																			"src": "6321:9:11"
																		},
																		{
																			"name": "_6",
																			"nodeType": "YulIdentifier",
																			"src": "6332:2:11"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nodeType": "YulIdentifier",
																		"src": "6317:3:11"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "6317:18:11"
																}
															],
															"functionName": {
																"name": "abi_decode_t_uint8",
																"nodeType": "YulIdentifier",
																"src": "6298:18:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "6298:38:11"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "6275:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "6275:62:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "6275:62:11"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "6346:13:11",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "6356:3:11",
													"type": "",
													"value": "384"
												},
												"variables": [
													{
														"name": "_7",
														"nodeType": "YulTypedName",
														"src": "6350:2:11",
														"type": ""
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "6379:5:11"
																},
																{
																	"name": "_7",
																	"nodeType": "YulIdentifier",
																	"src": "6386:2:11"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "6375:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "6375:14:11"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "headStart",
																			"nodeType": "YulIdentifier",
																			"src": "6416:9:11"
																		},
																		{
																			"name": "_7",
																			"nodeType": "YulIdentifier",
																			"src": "6427:2:11"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nodeType": "YulIdentifier",
																		"src": "6412:3:11"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "6412:18:11"
																}
															],
															"functionName": {
																"name": "abi_decode_t_address",
																"nodeType": "YulIdentifier",
																"src": "6391:20:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "6391:40:11"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "6368:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "6368:64:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "6368:64:11"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "6441:13:11",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "6451:3:11",
													"type": "",
													"value": "416"
												},
												"variables": [
													{
														"name": "_8",
														"nodeType": "YulTypedName",
														"src": "6445:2:11",
														"type": ""
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "6474:5:11"
																},
																{
																	"name": "_8",
																	"nodeType": "YulIdentifier",
																	"src": "6481:2:11"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "6470:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "6470:14:11"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "headStart",
																			"nodeType": "YulIdentifier",
																			"src": "6511:9:11"
																		},
																		{
																			"name": "_8",
																			"nodeType": "YulIdentifier",
																			"src": "6522:2:11"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nodeType": "YulIdentifier",
																		"src": "6507:3:11"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "6507:18:11"
																}
															],
															"functionName": {
																"name": "abi_decode_t_address",
																"nodeType": "YulIdentifier",
																"src": "6486:20:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "6486:40:11"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "6463:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "6463:64:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "6463:64:11"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "6536:13:11",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "6546:3:11",
													"type": "",
													"value": "448"
												},
												"variables": [
													{
														"name": "_9",
														"nodeType": "YulTypedName",
														"src": "6540:2:11",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "6558:48:11",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "6591:9:11"
																},
																{
																	"name": "_9",
																	"nodeType": "YulIdentifier",
																	"src": "6602:2:11"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "6587:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "6587:18:11"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "6574:12:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "6574:32:11"
												},
												"variables": [
													{
														"name": "offset_1",
														"nodeType": "YulTypedName",
														"src": "6562:8:11",
														"type": ""
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6635:16:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6644:1:11",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6647:1:11",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "6637:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "6637:12:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6637:12:11"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"name": "offset_1",
															"nodeType": "YulIdentifier",
															"src": "6621:8:11"
														},
														{
															"name": "_2",
															"nodeType": "YulIdentifier",
															"src": "6631:2:11"
														}
													],
													"functionName": {
														"name": "gt",
														"nodeType": "YulIdentifier",
														"src": "6618:2:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "6618:16:11"
												},
												"nodeType": "YulIf",
												"src": "6615:2:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "6671:5:11"
																},
																{
																	"name": "_9",
																	"nodeType": "YulIdentifier",
																	"src": "6678:2:11"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "6667:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "6667:14:11"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "headStart",
																			"nodeType": "YulIdentifier",
																			"src": "6721:9:11"
																		},
																		{
																			"name": "offset_1",
																			"nodeType": "YulIdentifier",
																			"src": "6732:8:11"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nodeType": "YulIdentifier",
																		"src": "6717:3:11"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "6717:24:11"
																},
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "6743:3:11"
																}
															],
															"functionName": {
																"name": "abi_decode_t_array$_t_int128_$dyn",
																"nodeType": "YulIdentifier",
																"src": "6683:33:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "6683:64:11"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "6660:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "6660:88:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "6660:88:11"
											}
										]
									},
									"name": "abi_decode_t_struct$_MarketBaseData",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "5103:9:11",
											"type": ""
										},
										{
											"name": "end",
											"nodeType": "YulTypedName",
											"src": "5114:3:11",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "value",
											"nodeType": "YulTypedName",
											"src": "5122:5:11",
											"type": ""
										}
									],
									"src": "5058:1696:11"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "6828:479:11",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6872:24:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "6881:5:11"
																	},
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "6888:5:11"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "6874:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "6874:20:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6874:20:11"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "6849:3:11"
																},
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "6854:9:11"
																}
															],
															"functionName": {
																"name": "sub",
																"nodeType": "YulIdentifier",
																"src": "6845:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "6845:19:11"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "6866:4:11",
															"type": "",
															"value": "0x60"
														}
													],
													"functionName": {
														"name": "slt",
														"nodeType": "YulIdentifier",
														"src": "6841:3:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "6841:30:11"
												},
												"nodeType": "YulIf",
												"src": "6838:2:11"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "6905:23:11",
												"value": {
													"arguments": [
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "6925:2:11",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "mload",
														"nodeType": "YulIdentifier",
														"src": "6919:5:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "6919:9:11"
												},
												"variables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "6909:6:11",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "6937:35:11",
												"value": {
													"arguments": [
														{
															"name": "memPtr",
															"nodeType": "YulIdentifier",
															"src": "6959:6:11"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "6967:4:11",
															"type": "",
															"value": "0x60"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "6955:3:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "6955:17:11"
												},
												"variables": [
													{
														"name": "newFreePtr",
														"nodeType": "YulTypedName",
														"src": "6941:10:11",
														"type": ""
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7047:13:11",
													"statements": [
														{
															"expression": {
																"arguments": [],
																"functionName": {
																	"name": "invalid",
																	"nodeType": "YulIdentifier",
																	"src": "7049:7:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "7049:9:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7049:9:11"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulIdentifier",
																	"src": "6990:10:11"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "7002:18:11",
																	"type": "",
																	"value": "0xffffffffffffffff"
																}
															],
															"functionName": {
																"name": "gt",
																"nodeType": "YulIdentifier",
																"src": "6987:2:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "6987:34:11"
														},
														{
															"arguments": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulIdentifier",
																	"src": "7026:10:11"
																},
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "7038:6:11"
																}
															],
															"functionName": {
																"name": "lt",
																"nodeType": "YulIdentifier",
																"src": "7023:2:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "7023:22:11"
														}
													],
													"functionName": {
														"name": "or",
														"nodeType": "YulIdentifier",
														"src": "6984:2:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "6984:62:11"
												},
												"nodeType": "YulIf",
												"src": "6981:2:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "7076:2:11",
															"type": "",
															"value": "64"
														},
														{
															"name": "newFreePtr",
															"nodeType": "YulIdentifier",
															"src": "7080:10:11"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "7069:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "7069:22:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "7069:22:11"
											},
											{
												"nodeType": "YulAssignment",
												"src": "7100:15:11",
												"value": {
													"name": "memPtr",
													"nodeType": "YulIdentifier",
													"src": "7109:6:11"
												},
												"variableNames": [
													{
														"name": "value",
														"nodeType": "YulIdentifier",
														"src": "7100:5:11"
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "memPtr",
															"nodeType": "YulIdentifier",
															"src": "7131:6:11"
														},
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "7158:9:11"
																}
															],
															"functionName": {
																"name": "abi_decode_t_uint8",
																"nodeType": "YulIdentifier",
																"src": "7139:18:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "7139:29:11"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "7124:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "7124:45:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "7124:45:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "7189:6:11"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "7197:2:11",
																	"type": "",
																	"value": "32"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "7185:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "7185:15:11"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "headStart",
																			"nodeType": "YulIdentifier",
																			"src": "7219:9:11"
																		},
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "7230:2:11",
																			"type": "",
																			"value": "32"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nodeType": "YulIdentifier",
																		"src": "7215:3:11"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "7215:18:11"
																}
															],
															"functionName": {
																"name": "calldataload",
																"nodeType": "YulIdentifier",
																"src": "7202:12:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "7202:32:11"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "7178:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "7178:57:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "7178:57:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "7255:6:11"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "7263:2:11",
																	"type": "",
																	"value": "64"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "7251:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "7251:15:11"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "headStart",
																			"nodeType": "YulIdentifier",
																			"src": "7285:9:11"
																		},
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "7296:2:11",
																			"type": "",
																			"value": "64"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nodeType": "YulIdentifier",
																		"src": "7281:3:11"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "7281:18:11"
																}
															],
															"functionName": {
																"name": "calldataload",
																"nodeType": "YulIdentifier",
																"src": "7268:12:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "7268:32:11"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "7244:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "7244:57:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "7244:57:11"
											}
										]
									},
									"name": "abi_decode_t_struct$_Signature",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "6799:9:11",
											"type": ""
										},
										{
											"name": "end",
											"nodeType": "YulTypedName",
											"src": "6810:3:11",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "value",
											"nodeType": "YulTypedName",
											"src": "6818:5:11",
											"type": ""
										}
									],
									"src": "6759:548:11"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "7362:113:11",
										"statements": [
											{
												"nodeType": "YulAssignment",
												"src": "7372:29:11",
												"value": {
													"arguments": [
														{
															"name": "offset",
															"nodeType": "YulIdentifier",
															"src": "7394:6:11"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "7381:12:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "7381:20:11"
												},
												"variableNames": [
													{
														"name": "value",
														"nodeType": "YulIdentifier",
														"src": "7372:5:11"
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7453:16:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7462:1:11",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7465:1:11",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "7455:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "7455:12:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7455:12:11"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "7423:5:11"
																},
																{
																	"arguments": [
																		{
																			"name": "value",
																			"nodeType": "YulIdentifier",
																			"src": "7434:5:11"
																		},
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "7441:8:11",
																			"type": "",
																			"value": "0xffffff"
																		}
																	],
																	"functionName": {
																		"name": "and",
																		"nodeType": "YulIdentifier",
																		"src": "7430:3:11"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "7430:20:11"
																}
															],
															"functionName": {
																"name": "eq",
																"nodeType": "YulIdentifier",
																"src": "7420:2:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "7420:31:11"
														}
													],
													"functionName": {
														"name": "iszero",
														"nodeType": "YulIdentifier",
														"src": "7413:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "7413:39:11"
												},
												"nodeType": "YulIf",
												"src": "7410:2:11"
											}
										]
									},
									"name": "abi_decode_t_uint24",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "offset",
											"nodeType": "YulTypedName",
											"src": "7341:6:11",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "value",
											"nodeType": "YulTypedName",
											"src": "7352:5:11",
											"type": ""
										}
									],
									"src": "7312:163:11"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "7530:117:11",
										"statements": [
											{
												"nodeType": "YulAssignment",
												"src": "7540:29:11",
												"value": {
													"arguments": [
														{
															"name": "offset",
															"nodeType": "YulIdentifier",
															"src": "7562:6:11"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "7549:12:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "7549:20:11"
												},
												"variableNames": [
													{
														"name": "value",
														"nodeType": "YulIdentifier",
														"src": "7540:5:11"
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7625:16:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7634:1:11",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7637:1:11",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "7627:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "7627:12:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7627:12:11"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "7591:5:11"
																},
																{
																	"arguments": [
																		{
																			"name": "value",
																			"nodeType": "YulIdentifier",
																			"src": "7602:5:11"
																		},
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "7609:12:11",
																			"type": "",
																			"value": "0xffffffffff"
																		}
																	],
																	"functionName": {
																		"name": "and",
																		"nodeType": "YulIdentifier",
																		"src": "7598:3:11"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "7598:24:11"
																}
															],
															"functionName": {
																"name": "eq",
																"nodeType": "YulIdentifier",
																"src": "7588:2:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "7588:35:11"
														}
													],
													"functionName": {
														"name": "iszero",
														"nodeType": "YulIdentifier",
														"src": "7581:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "7581:43:11"
												},
												"nodeType": "YulIf",
												"src": "7578:2:11"
											}
										]
									},
									"name": "abi_decode_t_uint40",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "offset",
											"nodeType": "YulTypedName",
											"src": "7509:6:11",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "value",
											"nodeType": "YulTypedName",
											"src": "7520:5:11",
											"type": ""
										}
									],
									"src": "7480:167:11"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "7701:109:11",
										"statements": [
											{
												"nodeType": "YulAssignment",
												"src": "7711:29:11",
												"value": {
													"arguments": [
														{
															"name": "offset",
															"nodeType": "YulIdentifier",
															"src": "7733:6:11"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "7720:12:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "7720:20:11"
												},
												"variableNames": [
													{
														"name": "value",
														"nodeType": "YulIdentifier",
														"src": "7711:5:11"
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7788:16:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7797:1:11",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7800:1:11",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "7790:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "7790:12:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7790:12:11"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "7762:5:11"
																},
																{
																	"arguments": [
																		{
																			"name": "value",
																			"nodeType": "YulIdentifier",
																			"src": "7773:5:11"
																		},
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "7780:4:11",
																			"type": "",
																			"value": "0xff"
																		}
																	],
																	"functionName": {
																		"name": "and",
																		"nodeType": "YulIdentifier",
																		"src": "7769:3:11"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "7769:16:11"
																}
															],
															"functionName": {
																"name": "eq",
																"nodeType": "YulIdentifier",
																"src": "7759:2:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "7759:27:11"
														}
													],
													"functionName": {
														"name": "iszero",
														"nodeType": "YulIdentifier",
														"src": "7752:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "7752:35:11"
												},
												"nodeType": "YulIf",
												"src": "7749:2:11"
											}
										]
									},
									"name": "abi_decode_t_uint8",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "offset",
											"nodeType": "YulTypedName",
											"src": "7680:6:11",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "value",
											"nodeType": "YulTypedName",
											"src": "7691:5:11",
											"type": ""
										}
									],
									"src": "7652:158:11"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "8023:1921:11",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8069:26:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "8078:6:11"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "8086:6:11"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "8071:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "8071:22:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8071:22:11"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "dataEnd",
																	"nodeType": "YulIdentifier",
																	"src": "8044:7:11"
																},
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "8053:9:11"
																}
															],
															"functionName": {
																"name": "sub",
																"nodeType": "YulIdentifier",
																"src": "8040:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "8040:23:11"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "8065:2:11",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "slt",
														"nodeType": "YulIdentifier",
														"src": "8036:3:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "8036:32:11"
												},
												"nodeType": "YulIf",
												"src": "8033:2:11"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "8104:37:11",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "8131:9:11"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "8118:12:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "8118:23:11"
												},
												"variables": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "8108:6:11",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "8150:28:11",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "8160:18:11",
													"type": "",
													"value": "0xffffffffffffffff"
												},
												"variables": [
													{
														"name": "_1",
														"nodeType": "YulTypedName",
														"src": "8154:2:11",
														"type": ""
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8205:26:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "8214:6:11"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "8222:6:11"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "8207:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "8207:22:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8207:22:11"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"name": "offset",
															"nodeType": "YulIdentifier",
															"src": "8193:6:11"
														},
														{
															"name": "_1",
															"nodeType": "YulIdentifier",
															"src": "8201:2:11"
														}
													],
													"functionName": {
														"name": "gt",
														"nodeType": "YulIdentifier",
														"src": "8190:2:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "8190:14:11"
												},
												"nodeType": "YulIf",
												"src": "8187:2:11"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "8240:32:11",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "8254:9:11"
														},
														{
															"name": "offset",
															"nodeType": "YulIdentifier",
															"src": "8265:6:11"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "8250:3:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "8250:22:11"
												},
												"variables": [
													{
														"name": "_2",
														"nodeType": "YulTypedName",
														"src": "8244:2:11",
														"type": ""
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8320:26:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "8329:6:11"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "8337:6:11"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "8322:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "8322:22:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8322:22:11"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "_2",
																			"nodeType": "YulIdentifier",
																			"src": "8299:2:11"
																		},
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "8303:4:11",
																			"type": "",
																			"value": "0x1f"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nodeType": "YulIdentifier",
																		"src": "8295:3:11"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "8295:13:11"
																},
																{
																	"name": "dataEnd",
																	"nodeType": "YulIdentifier",
																	"src": "8310:7:11"
																}
															],
															"functionName": {
																"name": "slt",
																"nodeType": "YulIdentifier",
																"src": "8291:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "8291:27:11"
														}
													],
													"functionName": {
														"name": "iszero",
														"nodeType": "YulIdentifier",
														"src": "8284:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "8284:35:11"
												},
												"nodeType": "YulIf",
												"src": "8281:2:11"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "8355:30:11",
												"value": {
													"arguments": [
														{
															"name": "_2",
															"nodeType": "YulIdentifier",
															"src": "8382:2:11"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "8369:12:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "8369:16:11"
												},
												"variables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "8359:6:11",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "8394:80:11",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "8466:6:11"
																}
															],
															"functionName": {
																"name": "array_allocation_size_t_array$_t_address_$dyn",
																"nodeType": "YulIdentifier",
																"src": "8420:45:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "8420:53:11"
														}
													],
													"functionName": {
														"name": "allocateMemory",
														"nodeType": "YulIdentifier",
														"src": "8405:14:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "8405:69:11"
												},
												"variables": [
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "8398:3:11",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "8483:16:11",
												"value": {
													"name": "dst",
													"nodeType": "YulIdentifier",
													"src": "8496:3:11"
												},
												"variables": [
													{
														"name": "dst_1",
														"nodeType": "YulTypedName",
														"src": "8487:5:11",
														"type": ""
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "dst",
															"nodeType": "YulIdentifier",
															"src": "8515:3:11"
														},
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "8520:6:11"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "8508:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "8508:19:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "8508:19:11"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "8536:14:11",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "8546:4:11",
													"type": "",
													"value": "0x20"
												},
												"variables": [
													{
														"name": "_3",
														"nodeType": "YulTypedName",
														"src": "8540:2:11",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulAssignment",
												"src": "8559:19:11",
												"value": {
													"arguments": [
														{
															"name": "dst",
															"nodeType": "YulIdentifier",
															"src": "8570:3:11"
														},
														{
															"name": "_3",
															"nodeType": "YulIdentifier",
															"src": "8575:2:11"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "8566:3:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "8566:12:11"
												},
												"variableNames": [
													{
														"name": "dst",
														"nodeType": "YulIdentifier",
														"src": "8559:3:11"
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "8587:22:11",
												"value": {
													"arguments": [
														{
															"name": "_2",
															"nodeType": "YulIdentifier",
															"src": "8602:2:11"
														},
														{
															"name": "_3",
															"nodeType": "YulIdentifier",
															"src": "8606:2:11"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "8598:3:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "8598:11:11"
												},
												"variables": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "8591:3:11",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "8618:15:11",
												"value": {
													"name": "value0",
													"nodeType": "YulIdentifier",
													"src": "8627:6:11"
												},
												"variables": [
													{
														"name": "i",
														"nodeType": "YulTypedName",
														"src": "8622:1:11",
														"type": ""
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8691:1008:11",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8705:36:11",
															"value": {
																"arguments": [
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "8719:2:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "src",
																				"nodeType": "YulIdentifier",
																				"src": "8736:3:11"
																			}
																		],
																		"functionName": {
																			"name": "calldataload",
																			"nodeType": "YulIdentifier",
																			"src": "8723:12:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8723:17:11"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8715:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "8715:26:11"
															},
															"variables": [
																{
																	"name": "_4",
																	"nodeType": "YulTypedName",
																	"src": "8709:2:11",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "8858:26:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "8867:6:11"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "8875:6:11"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "8860:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8860:22:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8860:22:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "dataEnd",
																						"nodeType": "YulIdentifier",
																						"src": "8769:7:11"
																					},
																					{
																						"name": "_4",
																						"nodeType": "YulIdentifier",
																						"src": "8778:2:11"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "8765:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8765:16:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8783:66:11",
																				"type": "",
																				"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8761:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8761:89:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8852:4:11",
																		"type": "",
																		"value": "0xc0"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "8757:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "8757:100:11"
															},
															"nodeType": "YulIf",
															"src": "8754:2:11"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8897:23:11",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8917:2:11",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "8911:5:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "8911:9:11"
															},
															"variables": [
																{
																	"name": "memPtr",
																	"nodeType": "YulTypedName",
																	"src": "8901:6:11",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8933:35:11",
															"value": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "8955:6:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8963:4:11",
																		"type": "",
																		"value": "0x80"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8951:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "8951:17:11"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulTypedName",
																	"src": "8937:10:11",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "9031:13:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "invalid",
																				"nodeType": "YulIdentifier",
																				"src": "9033:7:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9033:9:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9033:9:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "8990:10:11"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "9002:2:11"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "8987:2:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8987:18:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "9010:10:11"
																			},
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "9022:6:11"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "9007:2:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9007:22:11"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "8984:2:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "8984:46:11"
															},
															"nodeType": "YulIf",
															"src": "8981:2:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9064:2:11",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nodeType": "YulIdentifier",
																		"src": "9068:10:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9057:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "9057:22:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9057:22:11"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "9092:38:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "_4",
																				"nodeType": "YulIdentifier",
																				"src": "9122:2:11"
																			},
																			{
																				"name": "_3",
																				"nodeType": "YulIdentifier",
																				"src": "9126:2:11"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9118:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9118:11:11"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "9105:12:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "9105:25:11"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "9096:5:11",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "9170:5:11"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "9143:26:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "9143:33:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9143:33:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "9196:6:11"
																	},
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "9204:5:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9189:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "9189:21:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9189:21:11"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "9223:41:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "_4",
																				"nodeType": "YulIdentifier",
																				"src": "9256:2:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9260:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9252:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9252:11:11"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "9239:12:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "9239:25:11"
															},
															"variables": [
																{
																	"name": "offset_1",
																	"nodeType": "YulTypedName",
																	"src": "9227:8:11",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "9297:26:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "9306:6:11"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "9314:6:11"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "9299:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9299:22:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9299:22:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset_1",
																		"nodeType": "YulIdentifier",
																		"src": "9283:8:11"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "9293:2:11"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "9280:2:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "9280:16:11"
															},
															"nodeType": "YulIf",
															"src": "9277:2:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "9347:6:11"
																			},
																			{
																				"name": "_3",
																				"nodeType": "YulIdentifier",
																				"src": "9355:2:11"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9343:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9343:15:11"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "_4",
																								"nodeType": "YulIdentifier",
																								"src": "9404:2:11"
																							},
																							{
																								"name": "offset_1",
																								"nodeType": "YulIdentifier",
																								"src": "9408:8:11"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "9400:3:11"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "9400:17:11"
																					},
																					{
																						"name": "_3",
																						"nodeType": "YulIdentifier",
																						"src": "9419:2:11"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "9396:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "9396:26:11"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "9424:7:11"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_struct$_MarketBaseData",
																			"nodeType": "YulIdentifier",
																			"src": "9360:35:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9360:72:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9336:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "9336:97:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9336:97:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "9457:6:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9465:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9453:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9453:15:11"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_4",
																						"nodeType": "YulIdentifier",
																						"src": "9492:2:11"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "9496:2:11",
																						"type": "",
																						"value": "96"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "9488:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "9488:11:11"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bool",
																			"nodeType": "YulIdentifier",
																			"src": "9470:17:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9470:30:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9446:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "9446:55:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9446:55:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "9525:6:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9533:2:11",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9521:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9521:15:11"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_4",
																						"nodeType": "YulIdentifier",
																						"src": "9573:2:11"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "9577:4:11",
																						"type": "",
																						"value": "0x80"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "9569:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "9569:13:11"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "9584:7:11"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_struct$_Signature",
																			"nodeType": "YulIdentifier",
																			"src": "9538:30:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9538:54:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9514:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "9514:79:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9514:79:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "dst",
																		"nodeType": "YulIdentifier",
																		"src": "9613:3:11"
																	},
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "9618:6:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9606:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "9606:19:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9606:19:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9638:19:11",
															"value": {
																"arguments": [
																	{
																		"name": "dst",
																		"nodeType": "YulIdentifier",
																		"src": "9649:3:11"
																	},
																	{
																		"name": "_3",
																		"nodeType": "YulIdentifier",
																		"src": "9654:2:11"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9645:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "9645:12:11"
															},
															"variableNames": [
																{
																	"name": "dst",
																	"nodeType": "YulIdentifier",
																	"src": "9638:3:11"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "9670:19:11",
															"value": {
																"arguments": [
																	{
																		"name": "src",
																		"nodeType": "YulIdentifier",
																		"src": "9681:3:11"
																	},
																	{
																		"name": "_3",
																		"nodeType": "YulIdentifier",
																		"src": "9686:2:11"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9677:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "9677:12:11"
															},
															"variableNames": [
																{
																	"name": "src",
																	"nodeType": "YulIdentifier",
																	"src": "9670:3:11"
																}
															]
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"name": "i",
															"nodeType": "YulIdentifier",
															"src": "8653:1:11"
														},
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "8656:6:11"
														}
													],
													"functionName": {
														"name": "lt",
														"nodeType": "YulIdentifier",
														"src": "8650:2:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "8650:13:11"
												},
												"nodeType": "YulForLoop",
												"post": {
													"nodeType": "YulBlock",
													"src": "8664:18:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8666:14:11",
															"value": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "8675:1:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8678:1:11",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8671:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "8671:9:11"
															},
															"variableNames": [
																{
																	"name": "i",
																	"nodeType": "YulIdentifier",
																	"src": "8666:1:11"
																}
															]
														}
													]
												},
												"pre": {
													"nodeType": "YulBlock",
													"src": "8646:3:11",
													"statements": []
												},
												"src": "8642:1057:11"
											},
											{
												"nodeType": "YulAssignment",
												"src": "9708:15:11",
												"value": {
													"name": "dst_1",
													"nodeType": "YulIdentifier",
													"src": "9718:5:11"
												},
												"variableNames": [
													{
														"name": "value0",
														"nodeType": "YulIdentifier",
														"src": "9708:6:11"
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "9732:48:11",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "9765:9:11"
																},
																{
																	"name": "_3",
																	"nodeType": "YulIdentifier",
																	"src": "9776:2:11"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "9761:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "9761:18:11"
														}
													],
													"functionName": {
														"name": "calldataload",
														"nodeType": "YulIdentifier",
														"src": "9748:12:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "9748:32:11"
												},
												"variables": [
													{
														"name": "offset_2",
														"nodeType": "YulTypedName",
														"src": "9736:8:11",
														"type": ""
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9809:26:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "9818:6:11"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "9826:6:11"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "9811:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "9811:22:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9811:22:11"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"name": "offset_2",
															"nodeType": "YulIdentifier",
															"src": "9795:8:11"
														},
														{
															"name": "_1",
															"nodeType": "YulIdentifier",
															"src": "9805:2:11"
														}
													],
													"functionName": {
														"name": "gt",
														"nodeType": "YulIdentifier",
														"src": "9792:2:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "9792:16:11"
												},
												"nodeType": "YulIf",
												"src": "9789:2:11"
											},
											{
												"nodeType": "YulAssignment",
												"src": "9844:94:11",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "9908:9:11"
																},
																{
																	"name": "offset_2",
																	"nodeType": "YulIdentifier",
																	"src": "9919:8:11"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "9904:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "9904:24:11"
														},
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "9930:7:11"
														}
													],
													"functionName": {
														"name": "abi_decode_t_array$_t_struct$_SettlementData_$dyn",
														"nodeType": "YulIdentifier",
														"src": "9854:49:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "9854:84:11"
												},
												"variableNames": [
													{
														"name": "value1",
														"nodeType": "YulIdentifier",
														"src": "9844:6:11"
													}
												]
											}
										]
									},
									"name": "abi_decode_tuple_t_array$_t_struct$_CreateAndRegisterData_$3788_memory_ptr_$dyn_memory_ptrt_array$_t_struct$_SettlementData_$3803_memory_ptr_$dyn_memory_ptr",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "7981:9:11",
											"type": ""
										},
										{
											"name": "dataEnd",
											"nodeType": "YulTypedName",
											"src": "7992:7:11",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "8004:6:11",
											"type": ""
										},
										{
											"name": "value1",
											"nodeType": "YulTypedName",
											"src": "8012:6:11",
											"type": ""
										}
									],
									"src": "7815:2129:11"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "10030:113:11",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10076:26:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "10085:6:11"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "10093:6:11"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "10078:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "10078:22:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10078:22:11"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "dataEnd",
																	"nodeType": "YulIdentifier",
																	"src": "10051:7:11"
																},
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "10060:9:11"
																}
															],
															"functionName": {
																"name": "sub",
																"nodeType": "YulIdentifier",
																"src": "10047:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "10047:23:11"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "10072:2:11",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "slt",
														"nodeType": "YulIdentifier",
														"src": "10043:3:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "10043:32:11"
												},
												"nodeType": "YulIf",
												"src": "10040:2:11"
											},
											{
												"nodeType": "YulAssignment",
												"src": "10111:26:11",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "10127:9:11"
														}
													],
													"functionName": {
														"name": "mload",
														"nodeType": "YulIdentifier",
														"src": "10121:5:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "10121:16:11"
												},
												"variableNames": [
													{
														"name": "value0",
														"nodeType": "YulIdentifier",
														"src": "10111:6:11"
													}
												]
											}
										]
									},
									"name": "abi_decode_tuple_t_bytes32_fromMemory",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "9996:9:11",
											"type": ""
										},
										{
											"name": "dataEnd",
											"nodeType": "YulTypedName",
											"src": "10007:7:11",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "10019:6:11",
											"type": ""
										}
									],
									"src": "9949:194:11"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "10194:83:11",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"name": "pos",
															"nodeType": "YulIdentifier",
															"src": "10211:3:11"
														},
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "10220:5:11"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "10227:42:11",
																	"type": "",
																	"value": "0xffffffffffffffffffffffffffffffffffffffff"
																}
															],
															"functionName": {
																"name": "and",
																"nodeType": "YulIdentifier",
																"src": "10216:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "10216:54:11"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "10204:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "10204:67:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "10204:67:11"
											}
										]
									},
									"name": "abi_encode_t_address",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "value",
											"nodeType": "YulTypedName",
											"src": "10178:5:11",
											"type": ""
										},
										{
											"name": "pos",
											"nodeType": "YulTypedName",
											"src": "10185:3:11",
											"type": ""
										}
									],
									"src": "10148:129:11"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "10348:392:11",
										"statements": [
											{
												"nodeType": "YulVariableDeclaration",
												"src": "10358:26:11",
												"value": {
													"arguments": [
														{
															"name": "value",
															"nodeType": "YulIdentifier",
															"src": "10378:5:11"
														}
													],
													"functionName": {
														"name": "mload",
														"nodeType": "YulIdentifier",
														"src": "10372:5:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "10372:12:11"
												},
												"variables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "10362:6:11",
														"type": ""
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "pos",
															"nodeType": "YulIdentifier",
															"src": "10400:3:11"
														},
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "10405:6:11"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "10393:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "10393:19:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "10393:19:11"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "10421:14:11",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "10431:4:11",
													"type": "",
													"value": "0x20"
												},
												"variables": [
													{
														"name": "_1",
														"nodeType": "YulTypedName",
														"src": "10425:2:11",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulAssignment",
												"src": "10444:19:11",
												"value": {
													"arguments": [
														{
															"name": "pos",
															"nodeType": "YulIdentifier",
															"src": "10455:3:11"
														},
														{
															"name": "_1",
															"nodeType": "YulIdentifier",
															"src": "10460:2:11"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "10451:3:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "10451:12:11"
												},
												"variableNames": [
													{
														"name": "pos",
														"nodeType": "YulIdentifier",
														"src": "10444:3:11"
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "10472:28:11",
												"value": {
													"arguments": [
														{
															"name": "value",
															"nodeType": "YulIdentifier",
															"src": "10490:5:11"
														},
														{
															"name": "_1",
															"nodeType": "YulIdentifier",
															"src": "10497:2:11"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "10486:3:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "10486:14:11"
												},
												"variables": [
													{
														"name": "srcPtr",
														"nodeType": "YulTypedName",
														"src": "10476:6:11",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "10509:12:11",
												"value": {
													"name": "end",
													"nodeType": "YulIdentifier",
													"src": "10518:3:11"
												},
												"variables": [
													{
														"name": "i",
														"nodeType": "YulTypedName",
														"src": "10513:1:11",
														"type": ""
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10579:136:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "10600:3:11"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10616:2:11",
																				"type": "",
																				"value": "15"
																			},
																			{
																				"arguments": [
																					{
																						"name": "srcPtr",
																						"nodeType": "YulIdentifier",
																						"src": "10626:6:11"
																					}
																				],
																				"functionName": {
																					"name": "mload",
																					"nodeType": "YulIdentifier",
																					"src": "10620:5:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "10620:13:11"
																			}
																		],
																		"functionName": {
																			"name": "signextend",
																			"nodeType": "YulIdentifier",
																			"src": "10605:10:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10605:29:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10593:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "10593:42:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10593:42:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10648:19:11",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "10659:3:11"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "10664:2:11"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10655:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "10655:12:11"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "10648:3:11"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "10680:25:11",
															"value": {
																"arguments": [
																	{
																		"name": "srcPtr",
																		"nodeType": "YulIdentifier",
																		"src": "10694:6:11"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "10702:2:11"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10690:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "10690:15:11"
															},
															"variableNames": [
																{
																	"name": "srcPtr",
																	"nodeType": "YulIdentifier",
																	"src": "10680:6:11"
																}
															]
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"name": "i",
															"nodeType": "YulIdentifier",
															"src": "10541:1:11"
														},
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "10544:6:11"
														}
													],
													"functionName": {
														"name": "lt",
														"nodeType": "YulIdentifier",
														"src": "10538:2:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "10538:13:11"
												},
												"nodeType": "YulForLoop",
												"post": {
													"nodeType": "YulBlock",
													"src": "10552:18:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10554:14:11",
															"value": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "10563:1:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10566:1:11",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10559:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "10559:9:11"
															},
															"variableNames": [
																{
																	"name": "i",
																	"nodeType": "YulIdentifier",
																	"src": "10554:1:11"
																}
															]
														}
													]
												},
												"pre": {
													"nodeType": "YulBlock",
													"src": "10534:3:11",
													"statements": []
												},
												"src": "10530:185:11"
											},
											{
												"nodeType": "YulAssignment",
												"src": "10724:10:11",
												"value": {
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "10731:3:11"
												},
												"variableNames": [
													{
														"name": "end",
														"nodeType": "YulIdentifier",
														"src": "10724:3:11"
													}
												]
											}
										]
									},
									"name": "abi_encode_t_array$_t_int128_$dyn",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "value",
											"nodeType": "YulTypedName",
											"src": "10325:5:11",
											"type": ""
										},
										{
											"name": "pos",
											"nodeType": "YulTypedName",
											"src": "10332:3:11",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "end",
											"nodeType": "YulTypedName",
											"src": "10340:3:11",
											"type": ""
										}
									],
									"src": "10282:458:11"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "10788:50:11",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"name": "pos",
															"nodeType": "YulIdentifier",
															"src": "10805:3:11"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "value",
																			"nodeType": "YulIdentifier",
																			"src": "10824:5:11"
																		}
																	],
																	"functionName": {
																		"name": "iszero",
																		"nodeType": "YulIdentifier",
																		"src": "10817:6:11"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "10817:13:11"
																}
															],
															"functionName": {
																"name": "iszero",
																"nodeType": "YulIdentifier",
																"src": "10810:6:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "10810:21:11"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "10798:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "10798:34:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "10798:34:11"
											}
										]
									},
									"name": "abi_encode_t_bool",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "value",
											"nodeType": "YulTypedName",
											"src": "10772:5:11",
											"type": ""
										},
										{
											"name": "pos",
											"nodeType": "YulTypedName",
											"src": "10779:3:11",
											"type": ""
										}
									],
									"src": "10745:93:11"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "10886:49:11",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"name": "pos",
															"nodeType": "YulIdentifier",
															"src": "10903:3:11"
														},
														{
															"arguments": [
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "10919:1:11",
																	"type": "",
																	"value": "0"
																},
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "10922:5:11"
																}
															],
															"functionName": {
																"name": "signextend",
																"nodeType": "YulIdentifier",
																"src": "10908:10:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "10908:20:11"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "10896:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "10896:33:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "10896:33:11"
											}
										]
									},
									"name": "abi_encode_t_int8",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "value",
											"nodeType": "YulTypedName",
											"src": "10870:5:11",
											"type": ""
										},
										{
											"name": "pos",
											"nodeType": "YulTypedName",
											"src": "10877:3:11",
											"type": ""
										}
									],
									"src": "10843:92:11"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "10992:485:11",
										"statements": [
											{
												"nodeType": "YulVariableDeclaration",
												"src": "11002:26:11",
												"value": {
													"arguments": [
														{
															"name": "value",
															"nodeType": "YulIdentifier",
															"src": "11022:5:11"
														}
													],
													"functionName": {
														"name": "mload",
														"nodeType": "YulIdentifier",
														"src": "11016:5:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "11016:12:11"
												},
												"variables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "11006:6:11",
														"type": ""
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "pos",
															"nodeType": "YulIdentifier",
															"src": "11044:3:11"
														},
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "11049:6:11"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "11037:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "11037:19:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "11037:19:11"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "11065:12:11",
												"value": {
													"name": "end",
													"nodeType": "YulIdentifier",
													"src": "11074:3:11"
												},
												"variables": [
													{
														"name": "i",
														"nodeType": "YulTypedName",
														"src": "11069:1:11",
														"type": ""
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11138:110:11",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "11152:14:11",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "11162:4:11",
																"type": "",
																"value": "0x20"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "11156:2:11",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "11194:3:11"
																					},
																					{
																						"name": "i",
																						"nodeType": "YulIdentifier",
																						"src": "11199:1:11"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "11190:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "11190:11:11"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "11203:2:11"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11186:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11186:20:11"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "value",
																								"nodeType": "YulIdentifier",
																								"src": "11222:5:11"
																							},
																							{
																								"name": "i",
																								"nodeType": "YulIdentifier",
																								"src": "11229:1:11"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "11218:3:11"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "11218:13:11"
																					},
																					{
																						"name": "_1",
																						"nodeType": "YulIdentifier",
																						"src": "11233:2:11"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "11214:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "11214:22:11"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "11208:5:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11208:29:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11179:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "11179:59:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11179:59:11"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"name": "i",
															"nodeType": "YulIdentifier",
															"src": "11097:1:11"
														},
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "11100:6:11"
														}
													],
													"functionName": {
														"name": "lt",
														"nodeType": "YulIdentifier",
														"src": "11094:2:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "11094:13:11"
												},
												"nodeType": "YulForLoop",
												"post": {
													"nodeType": "YulBlock",
													"src": "11108:21:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11110:17:11",
															"value": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "11119:1:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11122:4:11",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11115:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "11115:12:11"
															},
															"variableNames": [
																{
																	"name": "i",
																	"nodeType": "YulIdentifier",
																	"src": "11110:1:11"
																}
															]
														}
													]
												},
												"pre": {
													"nodeType": "YulBlock",
													"src": "11090:3:11",
													"statements": []
												},
												"src": "11086:162:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11282:64:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "11311:3:11"
																					},
																					{
																						"name": "length",
																						"nodeType": "YulIdentifier",
																						"src": "11316:6:11"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "11307:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "11307:16:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11325:4:11",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11303:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11303:27:11"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "11332:3:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11296:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "11296:40:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11296:40:11"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"name": "i",
															"nodeType": "YulIdentifier",
															"src": "11263:1:11"
														},
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "11266:6:11"
														}
													],
													"functionName": {
														"name": "gt",
														"nodeType": "YulIdentifier",
														"src": "11260:2:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "11260:13:11"
												},
												"nodeType": "YulIf",
												"src": "11257:2:11"
											},
											{
												"nodeType": "YulAssignment",
												"src": "11355:116:11",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "11370:3:11"
																},
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "11383:6:11"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "11391:2:11",
																					"type": "",
																					"value": "31"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "11379:3:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "11379:15:11"
																		},
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "11396:66:11",
																			"type": "",
																			"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"
																		}
																	],
																	"functionName": {
																		"name": "and",
																		"nodeType": "YulIdentifier",
																		"src": "11375:3:11"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "11375:88:11"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "11366:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "11366:98:11"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "11466:4:11",
															"type": "",
															"value": "0x20"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "11362:3:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "11362:109:11"
												},
												"variableNames": [
													{
														"name": "end",
														"nodeType": "YulIdentifier",
														"src": "11355:3:11"
													}
												]
											}
										]
									},
									"name": "abi_encode_t_string",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "value",
											"nodeType": "YulTypedName",
											"src": "10969:5:11",
											"type": ""
										},
										{
											"name": "pos",
											"nodeType": "YulTypedName",
											"src": "10976:3:11",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "end",
											"nodeType": "YulTypedName",
											"src": "10984:3:11",
											"type": ""
										}
									],
									"src": "10940:537:11"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "11538:164:11",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"name": "pos",
															"nodeType": "YulIdentifier",
															"src": "11555:3:11"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "value",
																			"nodeType": "YulIdentifier",
																			"src": "11570:5:11"
																		}
																	],
																	"functionName": {
																		"name": "mload",
																		"nodeType": "YulIdentifier",
																		"src": "11564:5:11"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "11564:12:11"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "11578:4:11",
																	"type": "",
																	"value": "0xff"
																}
															],
															"functionName": {
																"name": "and",
																"nodeType": "YulIdentifier",
																"src": "11560:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "11560:23:11"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "11548:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "11548:36:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "11548:36:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "11604:3:11"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "11609:4:11",
																	"type": "",
																	"value": "0x20"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "11600:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "11600:14:11"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "value",
																			"nodeType": "YulIdentifier",
																			"src": "11626:5:11"
																		},
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "11633:4:11",
																			"type": "",
																			"value": "0x20"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nodeType": "YulIdentifier",
																		"src": "11622:3:11"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "11622:16:11"
																}
															],
															"functionName": {
																"name": "mload",
																"nodeType": "YulIdentifier",
																"src": "11616:5:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "11616:23:11"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "11593:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "11593:47:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "11593:47:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "11660:3:11"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "11665:4:11",
																	"type": "",
																	"value": "0x40"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "11656:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "11656:14:11"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "value",
																			"nodeType": "YulIdentifier",
																			"src": "11682:5:11"
																		},
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "11689:4:11",
																			"type": "",
																			"value": "0x40"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nodeType": "YulIdentifier",
																		"src": "11678:3:11"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "11678:16:11"
																}
															],
															"functionName": {
																"name": "mload",
																"nodeType": "YulIdentifier",
																"src": "11672:5:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "11672:23:11"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "11649:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "11649:47:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "11649:47:11"
											}
										]
									},
									"name": "abi_encode_t_struct$_Signature",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "value",
											"nodeType": "YulTypedName",
											"src": "11522:5:11",
											"type": ""
										},
										{
											"name": "pos",
											"nodeType": "YulTypedName",
											"src": "11529:3:11",
											"type": ""
										}
									],
									"src": "11482:220:11"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "11752:49:11",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"name": "pos",
															"nodeType": "YulIdentifier",
															"src": "11769:3:11"
														},
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "11778:5:11"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "11785:8:11",
																	"type": "",
																	"value": "0xffffff"
																}
															],
															"functionName": {
																"name": "and",
																"nodeType": "YulIdentifier",
																"src": "11774:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "11774:20:11"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "11762:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "11762:33:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "11762:33:11"
											}
										]
									},
									"name": "abi_encode_t_uint24",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "value",
											"nodeType": "YulTypedName",
											"src": "11736:5:11",
											"type": ""
										},
										{
											"name": "pos",
											"nodeType": "YulTypedName",
											"src": "11743:3:11",
											"type": ""
										}
									],
									"src": "11707:94:11"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "11851:53:11",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"name": "pos",
															"nodeType": "YulIdentifier",
															"src": "11868:3:11"
														},
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "11877:5:11"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "11884:12:11",
																	"type": "",
																	"value": "0xffffffffff"
																}
															],
															"functionName": {
																"name": "and",
																"nodeType": "YulIdentifier",
																"src": "11873:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "11873:24:11"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "11861:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "11861:37:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "11861:37:11"
											}
										]
									},
									"name": "abi_encode_t_uint40",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "value",
											"nodeType": "YulTypedName",
											"src": "11835:5:11",
											"type": ""
										},
										{
											"name": "pos",
											"nodeType": "YulTypedName",
											"src": "11842:3:11",
											"type": ""
										}
									],
									"src": "11806:98:11"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "11953:33:11",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"name": "pos",
															"nodeType": "YulIdentifier",
															"src": "11962:3:11"
														},
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "11971:5:11"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "11978:4:11",
																	"type": "",
																	"value": "0xff"
																}
															],
															"functionName": {
																"name": "and",
																"nodeType": "YulIdentifier",
																"src": "11967:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "11967:16:11"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "11955:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "11955:29:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "11955:29:11"
											}
										]
									},
									"name": "abi_encode_t_uint8",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "value",
											"nodeType": "YulTypedName",
											"src": "11937:5:11",
											"type": ""
										},
										{
											"name": "pos",
											"nodeType": "YulTypedName",
											"src": "11944:3:11",
											"type": ""
										}
									],
									"src": "11909:77:11"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "12356:1135:11",
										"statements": [
											{
												"nodeType": "YulVariableDeclaration",
												"src": "12366:33:11",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "12384:9:11"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "12395:3:11",
															"type": "",
															"value": "224"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "12380:3:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "12380:19:11"
												},
												"variables": [
													{
														"name": "tail_1",
														"nodeType": "YulTypedName",
														"src": "12370:6:11",
														"type": ""
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "12415:9:11"
														},
														{
															"name": "value0",
															"nodeType": "YulIdentifier",
															"src": "12426:6:11"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "12408:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "12408:25:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "12408:25:11"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "12442:12:11",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "12452:2:11",
													"type": "",
													"value": "32"
												},
												"variables": [
													{
														"name": "_1",
														"nodeType": "YulTypedName",
														"src": "12446:2:11",
														"type": ""
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "value1",
															"nodeType": "YulIdentifier",
															"src": "12494:6:11"
														},
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "12506:9:11"
																},
																{
																	"name": "_1",
																	"nodeType": "YulIdentifier",
																	"src": "12517:2:11"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "12502:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "12502:18:11"
														}
													],
													"functionName": {
														"name": "abi_encode_t_struct$_Signature",
														"nodeType": "YulIdentifier",
														"src": "12463:30:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "12463:58:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "12463:58:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "12541:9:11"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "12552:3:11",
																	"type": "",
																	"value": "128"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "12537:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "12537:19:11"
														},
														{
															"name": "value2",
															"nodeType": "YulIdentifier",
															"src": "12558:6:11"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "12530:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "12530:35:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "12530:35:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "12585:9:11"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "12596:3:11",
																	"type": "",
																	"value": "160"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "12581:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "12581:19:11"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "12602:3:11",
															"type": "",
															"value": "224"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "12574:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "12574:32:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "12574:32:11"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "12615:17:11",
												"value": {
													"name": "tail_1",
													"nodeType": "YulIdentifier",
													"src": "12626:6:11"
												},
												"variables": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "12619:3:11",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "12641:27:11",
												"value": {
													"arguments": [
														{
															"name": "value3",
															"nodeType": "YulIdentifier",
															"src": "12661:6:11"
														}
													],
													"functionName": {
														"name": "mload",
														"nodeType": "YulIdentifier",
														"src": "12655:5:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "12655:13:11"
												},
												"variables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "12645:6:11",
														"type": ""
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "tail_1",
															"nodeType": "YulIdentifier",
															"src": "12684:6:11"
														},
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "12692:6:11"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "12677:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "12677:22:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "12677:22:11"
											},
											{
												"nodeType": "YulAssignment",
												"src": "12708:26:11",
												"value": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "12719:9:11"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "12730:3:11",
															"type": "",
															"value": "256"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "12715:3:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "12715:19:11"
												},
												"variableNames": [
													{
														"name": "pos",
														"nodeType": "YulIdentifier",
														"src": "12708:3:11"
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "12743:29:11",
												"value": {
													"arguments": [
														{
															"name": "value3",
															"nodeType": "YulIdentifier",
															"src": "12761:6:11"
														},
														{
															"name": "_1",
															"nodeType": "YulIdentifier",
															"src": "12769:2:11"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "12757:3:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "12757:15:11"
												},
												"variables": [
													{
														"name": "srcPtr",
														"nodeType": "YulTypedName",
														"src": "12747:6:11",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "12781:13:11",
												"value": {
													"name": "tail",
													"nodeType": "YulIdentifier",
													"src": "12790:4:11"
												},
												"variables": [
													{
														"name": "i",
														"nodeType": "YulTypedName",
														"src": "12785:1:11",
														"type": ""
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12852:169:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "12873:3:11"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "srcPtr",
																						"nodeType": "YulIdentifier",
																						"src": "12888:6:11"
																					}
																				],
																				"functionName": {
																					"name": "mload",
																					"nodeType": "YulIdentifier",
																					"src": "12882:5:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "12882:13:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12897:42:11",
																				"type": "",
																				"value": "0xffffffffffffffffffffffffffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "12878:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12878:62:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12866:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "12866:75:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12866:75:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "12954:19:11",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "12965:3:11"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "12970:2:11"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12961:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "12961:12:11"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "12954:3:11"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "12986:25:11",
															"value": {
																"arguments": [
																	{
																		"name": "srcPtr",
																		"nodeType": "YulIdentifier",
																		"src": "13000:6:11"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "13008:2:11"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12996:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "12996:15:11"
															},
															"variableNames": [
																{
																	"name": "srcPtr",
																	"nodeType": "YulIdentifier",
																	"src": "12986:6:11"
																}
															]
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"name": "i",
															"nodeType": "YulIdentifier",
															"src": "12814:1:11"
														},
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "12817:6:11"
														}
													],
													"functionName": {
														"name": "lt",
														"nodeType": "YulIdentifier",
														"src": "12811:2:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "12811:13:11"
												},
												"nodeType": "YulForLoop",
												"post": {
													"nodeType": "YulBlock",
													"src": "12825:18:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "12827:14:11",
															"value": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "12836:1:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12839:1:11",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12832:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "12832:9:11"
															},
															"variableNames": [
																{
																	"name": "i",
																	"nodeType": "YulIdentifier",
																	"src": "12827:1:11"
																}
															]
														}
													]
												},
												"pre": {
													"nodeType": "YulBlock",
													"src": "12807:3:11",
													"statements": []
												},
												"src": "12803:218:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "13041:9:11"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "13052:3:11",
																	"type": "",
																	"value": "192"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "13037:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "13037:19:11"
														},
														{
															"arguments": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "13062:3:11"
																},
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "13067:9:11"
																}
															],
															"functionName": {
																"name": "sub",
																"nodeType": "YulIdentifier",
																"src": "13058:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "13058:19:11"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "13030:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "13030:48:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "13030:48:11"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "13087:16:11",
												"value": {
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "13100:3:11"
												},
												"variables": [
													{
														"name": "pos_1",
														"nodeType": "YulTypedName",
														"src": "13091:5:11",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "13112:29:11",
												"value": {
													"arguments": [
														{
															"name": "value4",
															"nodeType": "YulIdentifier",
															"src": "13134:6:11"
														}
													],
													"functionName": {
														"name": "mload",
														"nodeType": "YulIdentifier",
														"src": "13128:5:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "13128:13:11"
												},
												"variables": [
													{
														"name": "length_1",
														"nodeType": "YulTypedName",
														"src": "13116:8:11",
														"type": ""
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "pos",
															"nodeType": "YulIdentifier",
															"src": "13157:3:11"
														},
														{
															"name": "length_1",
															"nodeType": "YulIdentifier",
															"src": "13162:8:11"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "13150:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "13150:21:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "13150:21:11"
											},
											{
												"nodeType": "YulAssignment",
												"src": "13180:21:11",
												"value": {
													"arguments": [
														{
															"name": "pos",
															"nodeType": "YulIdentifier",
															"src": "13193:3:11"
														},
														{
															"name": "_1",
															"nodeType": "YulIdentifier",
															"src": "13198:2:11"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "13189:3:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "13189:12:11"
												},
												"variableNames": [
													{
														"name": "pos_1",
														"nodeType": "YulIdentifier",
														"src": "13180:5:11"
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "13210:31:11",
												"value": {
													"arguments": [
														{
															"name": "value4",
															"nodeType": "YulIdentifier",
															"src": "13230:6:11"
														},
														{
															"name": "_1",
															"nodeType": "YulIdentifier",
															"src": "13238:2:11"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "13226:3:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "13226:15:11"
												},
												"variables": [
													{
														"name": "srcPtr_1",
														"nodeType": "YulTypedName",
														"src": "13214:8:11",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "13250:15:11",
												"value": {
													"name": "tail",
													"nodeType": "YulIdentifier",
													"src": "13261:4:11"
												},
												"variables": [
													{
														"name": "i_1",
														"nodeType": "YulTypedName",
														"src": "13254:3:11",
														"type": ""
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13331:132:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos_1",
																		"nodeType": "YulIdentifier",
																		"src": "13352:5:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "srcPtr_1",
																				"nodeType": "YulIdentifier",
																				"src": "13365:8:11"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "13359:5:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13359:15:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13345:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "13345:30:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13345:30:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "13388:23:11",
															"value": {
																"arguments": [
																	{
																		"name": "pos_1",
																		"nodeType": "YulIdentifier",
																		"src": "13401:5:11"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "13408:2:11"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13397:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "13397:14:11"
															},
															"variableNames": [
																{
																	"name": "pos_1",
																	"nodeType": "YulIdentifier",
																	"src": "13388:5:11"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "13424:29:11",
															"value": {
																"arguments": [
																	{
																		"name": "srcPtr_1",
																		"nodeType": "YulIdentifier",
																		"src": "13440:8:11"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "13450:2:11"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13436:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "13436:17:11"
															},
															"variableNames": [
																{
																	"name": "srcPtr_1",
																	"nodeType": "YulIdentifier",
																	"src": "13424:8:11"
																}
															]
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"name": "i_1",
															"nodeType": "YulIdentifier",
															"src": "13285:3:11"
														},
														{
															"name": "length_1",
															"nodeType": "YulIdentifier",
															"src": "13290:8:11"
														}
													],
													"functionName": {
														"name": "lt",
														"nodeType": "YulIdentifier",
														"src": "13282:2:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "13282:17:11"
												},
												"nodeType": "YulForLoop",
												"post": {
													"nodeType": "YulBlock",
													"src": "13300:22:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "13302:18:11",
															"value": {
																"arguments": [
																	{
																		"name": "i_1",
																		"nodeType": "YulIdentifier",
																		"src": "13313:3:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13318:1:11",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13309:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "13309:11:11"
															},
															"variableNames": [
																{
																	"name": "i_1",
																	"nodeType": "YulIdentifier",
																	"src": "13302:3:11"
																}
															]
														}
													]
												},
												"pre": {
													"nodeType": "YulBlock",
													"src": "13278:3:11",
													"statements": []
												},
												"src": "13274:189:11"
											},
											{
												"nodeType": "YulAssignment",
												"src": "13472:13:11",
												"value": {
													"name": "pos_1",
													"nodeType": "YulIdentifier",
													"src": "13480:5:11"
												},
												"variableNames": [
													{
														"name": "tail",
														"nodeType": "YulIdentifier",
														"src": "13472:4:11"
													}
												]
											}
										]
									},
									"name": "abi_encode_tuple_t_bytes32_t_struct$_Signature_$4447_memory_ptr_t_int256_t_array$_t_address_$dyn_memory_ptr_t_array$_t_bytes32_$dyn_memory_ptr__to_t_bytes32_t_struct$_Signature_$4447_memory_ptr_t_int256_t_array$_t_address_$dyn_memory_ptr_t_array$_t_bytes32_$dyn_memory_ptr__fromStack_reversed",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "12293:9:11",
											"type": ""
										},
										{
											"name": "value4",
											"nodeType": "YulTypedName",
											"src": "12304:6:11",
											"type": ""
										},
										{
											"name": "value3",
											"nodeType": "YulTypedName",
											"src": "12312:6:11",
											"type": ""
										},
										{
											"name": "value2",
											"nodeType": "YulTypedName",
											"src": "12320:6:11",
											"type": ""
										},
										{
											"name": "value1",
											"nodeType": "YulTypedName",
											"src": "12328:6:11",
											"type": ""
										},
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "12336:6:11",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "tail",
											"nodeType": "YulTypedName",
											"src": "12347:4:11",
											"type": ""
										}
									],
									"src": "11991:1500:11"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "13763:2302:11",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "13780:9:11"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "13791:3:11",
															"type": "",
															"value": "160"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "13773:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "13773:22:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "13773:22:11"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "13804:33:11",
												"value": {
													"arguments": [
														{
															"name": "value0",
															"nodeType": "YulIdentifier",
															"src": "13830:6:11"
														}
													],
													"functionName": {
														"name": "mload",
														"nodeType": "YulIdentifier",
														"src": "13824:5:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "13824:13:11"
												},
												"variables": [
													{
														"name": "memberValue0",
														"nodeType": "YulTypedName",
														"src": "13808:12:11",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "13846:16:11",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "13856:6:11",
													"type": "",
													"value": "0x01e0"
												},
												"variables": [
													{
														"name": "_1",
														"nodeType": "YulTypedName",
														"src": "13850:2:11",
														"type": ""
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "13882:9:11"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "13893:3:11",
																	"type": "",
																	"value": "160"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "13878:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "13878:19:11"
														},
														{
															"name": "_1",
															"nodeType": "YulIdentifier",
															"src": "13899:2:11"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "13871:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "13871:31:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "13871:31:11"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "13911:68:11",
												"value": {
													"arguments": [
														{
															"name": "memberValue0",
															"nodeType": "YulIdentifier",
															"src": "13945:12:11"
														},
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "13963:9:11"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "13974:3:11",
																	"type": "",
																	"value": "640"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "13959:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "13959:19:11"
														}
													],
													"functionName": {
														"name": "abi_encode_t_string",
														"nodeType": "YulIdentifier",
														"src": "13925:19:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "13925:54:11"
												},
												"variables": [
													{
														"name": "tail_1",
														"nodeType": "YulTypedName",
														"src": "13915:6:11",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "13988:46:11",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "14020:6:11"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "14028:4:11",
																	"type": "",
																	"value": "0x20"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "14016:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "14016:17:11"
														}
													],
													"functionName": {
														"name": "mload",
														"nodeType": "YulIdentifier",
														"src": "14010:5:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "14010:24:11"
												},
												"variables": [
													{
														"name": "memberValue0_1",
														"nodeType": "YulTypedName",
														"src": "13992:14:11",
														"type": ""
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "memberValue0_1",
															"nodeType": "YulIdentifier",
															"src": "14063:14:11"
														},
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "14083:9:11"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "14094:3:11",
																	"type": "",
																	"value": "192"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "14079:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "14079:19:11"
														}
													],
													"functionName": {
														"name": "abi_encode_t_uint40",
														"nodeType": "YulIdentifier",
														"src": "14043:19:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "14043:56:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "14043:56:11"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "14108:46:11",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "14140:6:11"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "14148:4:11",
																	"type": "",
																	"value": "0x40"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "14136:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "14136:17:11"
														}
													],
													"functionName": {
														"name": "mload",
														"nodeType": "YulIdentifier",
														"src": "14130:5:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "14130:24:11"
												},
												"variables": [
													{
														"name": "memberValue0_2",
														"nodeType": "YulTypedName",
														"src": "14112:14:11",
														"type": ""
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "memberValue0_2",
															"nodeType": "YulIdentifier",
															"src": "14183:14:11"
														},
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "14203:9:11"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "14214:3:11",
																	"type": "",
																	"value": "224"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "14199:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "14199:19:11"
														}
													],
													"functionName": {
														"name": "abi_encode_t_uint24",
														"nodeType": "YulIdentifier",
														"src": "14163:19:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "14163:56:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "14163:56:11"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "14228:46:11",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "14260:6:11"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "14268:4:11",
																	"type": "",
																	"value": "0x60"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "14256:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "14256:17:11"
														}
													],
													"functionName": {
														"name": "mload",
														"nodeType": "YulIdentifier",
														"src": "14250:5:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "14250:24:11"
												},
												"variables": [
													{
														"name": "memberValue0_3",
														"nodeType": "YulTypedName",
														"src": "14232:14:11",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "14283:13:11",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "14293:3:11",
													"type": "",
													"value": "256"
												},
												"variables": [
													{
														"name": "_2",
														"nodeType": "YulTypedName",
														"src": "14287:2:11",
														"type": ""
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "memberValue0_3",
															"nodeType": "YulIdentifier",
															"src": "14324:14:11"
														},
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "14344:9:11"
																},
																{
																	"name": "_2",
																	"nodeType": "YulIdentifier",
																	"src": "14355:2:11"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "14340:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "14340:18:11"
														}
													],
													"functionName": {
														"name": "abi_encode_t_uint8",
														"nodeType": "YulIdentifier",
														"src": "14305:18:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "14305:54:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "14305:54:11"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "14368:46:11",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "14400:6:11"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "14408:4:11",
																	"type": "",
																	"value": "0x80"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "14396:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "14396:17:11"
														}
													],
													"functionName": {
														"name": "mload",
														"nodeType": "YulIdentifier",
														"src": "14390:5:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "14390:24:11"
												},
												"variables": [
													{
														"name": "memberValue0_4",
														"nodeType": "YulTypedName",
														"src": "14372:14:11",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "14423:13:11",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "14433:3:11",
													"type": "",
													"value": "288"
												},
												"variables": [
													{
														"name": "_3",
														"nodeType": "YulTypedName",
														"src": "14427:2:11",
														"type": ""
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "memberValue0_4",
															"nodeType": "YulIdentifier",
															"src": "14464:14:11"
														},
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "14484:9:11"
																},
																{
																	"name": "_3",
																	"nodeType": "YulIdentifier",
																	"src": "14495:2:11"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "14480:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "14480:18:11"
														}
													],
													"functionName": {
														"name": "abi_encode_t_uint8",
														"nodeType": "YulIdentifier",
														"src": "14445:18:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "14445:54:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "14445:54:11"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "14508:45:11",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "14540:6:11"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "14548:3:11",
																	"type": "",
																	"value": "160"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "14536:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "14536:16:11"
														}
													],
													"functionName": {
														"name": "mload",
														"nodeType": "YulIdentifier",
														"src": "14530:5:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "14530:23:11"
												},
												"variables": [
													{
														"name": "memberValue0_5",
														"nodeType": "YulTypedName",
														"src": "14512:14:11",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "14562:13:11",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "14572:3:11",
													"type": "",
													"value": "320"
												},
												"variables": [
													{
														"name": "_4",
														"nodeType": "YulTypedName",
														"src": "14566:2:11",
														"type": ""
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "memberValue0_5",
															"nodeType": "YulIdentifier",
															"src": "14603:14:11"
														},
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "14623:9:11"
																},
																{
																	"name": "_4",
																	"nodeType": "YulIdentifier",
																	"src": "14634:2:11"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "14619:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "14619:18:11"
														}
													],
													"functionName": {
														"name": "abi_encode_t_uint8",
														"nodeType": "YulIdentifier",
														"src": "14584:18:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "14584:54:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "14584:54:11"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "14647:45:11",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "14679:6:11"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "14687:3:11",
																	"type": "",
																	"value": "192"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "14675:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "14675:16:11"
														}
													],
													"functionName": {
														"name": "mload",
														"nodeType": "YulIdentifier",
														"src": "14669:5:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "14669:23:11"
												},
												"variables": [
													{
														"name": "memberValue0_6",
														"nodeType": "YulTypedName",
														"src": "14651:14:11",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "14701:13:11",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "14711:3:11",
													"type": "",
													"value": "352"
												},
												"variables": [
													{
														"name": "_5",
														"nodeType": "YulTypedName",
														"src": "14705:2:11",
														"type": ""
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "memberValue0_6",
															"nodeType": "YulIdentifier",
															"src": "14741:14:11"
														},
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "14761:9:11"
																},
																{
																	"name": "_5",
																	"nodeType": "YulIdentifier",
																	"src": "14772:2:11"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "14757:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "14757:18:11"
														}
													],
													"functionName": {
														"name": "abi_encode_t_int8",
														"nodeType": "YulIdentifier",
														"src": "14723:17:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "14723:53:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "14723:53:11"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "14785:45:11",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "14817:6:11"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "14825:3:11",
																	"type": "",
																	"value": "224"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "14813:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "14813:16:11"
														}
													],
													"functionName": {
														"name": "mload",
														"nodeType": "YulIdentifier",
														"src": "14807:5:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "14807:23:11"
												},
												"variables": [
													{
														"name": "memberValue0_7",
														"nodeType": "YulTypedName",
														"src": "14789:14:11",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "14839:13:11",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "14849:3:11",
													"type": "",
													"value": "384"
												},
												"variables": [
													{
														"name": "_6",
														"nodeType": "YulTypedName",
														"src": "14843:2:11",
														"type": ""
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "memberValue0_7",
															"nodeType": "YulIdentifier",
															"src": "14882:14:11"
														},
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "14902:9:11"
																},
																{
																	"name": "_6",
																	"nodeType": "YulIdentifier",
																	"src": "14913:2:11"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "14898:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "14898:18:11"
														}
													],
													"functionName": {
														"name": "abi_encode_t_address",
														"nodeType": "YulIdentifier",
														"src": "14861:20:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "14861:56:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "14861:56:11"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "14926:44:11",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "14958:6:11"
																},
																{
																	"name": "_2",
																	"nodeType": "YulIdentifier",
																	"src": "14966:2:11"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "14954:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "14954:15:11"
														}
													],
													"functionName": {
														"name": "mload",
														"nodeType": "YulIdentifier",
														"src": "14948:5:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "14948:22:11"
												},
												"variables": [
													{
														"name": "memberValue0_8",
														"nodeType": "YulTypedName",
														"src": "14930:14:11",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "14979:13:11",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "14989:3:11",
													"type": "",
													"value": "416"
												},
												"variables": [
													{
														"name": "_7",
														"nodeType": "YulTypedName",
														"src": "14983:2:11",
														"type": ""
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "memberValue0_8",
															"nodeType": "YulIdentifier",
															"src": "15020:14:11"
														},
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "15040:9:11"
																},
																{
																	"name": "_7",
																	"nodeType": "YulIdentifier",
																	"src": "15051:2:11"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "15036:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "15036:18:11"
														}
													],
													"functionName": {
														"name": "abi_encode_t_uint8",
														"nodeType": "YulIdentifier",
														"src": "15001:18:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "15001:54:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "15001:54:11"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "15064:44:11",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "15096:6:11"
																},
																{
																	"name": "_3",
																	"nodeType": "YulIdentifier",
																	"src": "15104:2:11"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "15092:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "15092:15:11"
														}
													],
													"functionName": {
														"name": "mload",
														"nodeType": "YulIdentifier",
														"src": "15086:5:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "15086:22:11"
												},
												"variables": [
													{
														"name": "memberValue0_9",
														"nodeType": "YulTypedName",
														"src": "15068:14:11",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "15117:13:11",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "15127:3:11",
													"type": "",
													"value": "448"
												},
												"variables": [
													{
														"name": "_8",
														"nodeType": "YulTypedName",
														"src": "15121:2:11",
														"type": ""
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "memberValue0_9",
															"nodeType": "YulIdentifier",
															"src": "15158:14:11"
														},
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "15178:9:11"
																},
																{
																	"name": "_8",
																	"nodeType": "YulIdentifier",
																	"src": "15189:2:11"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "15174:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "15174:18:11"
														}
													],
													"functionName": {
														"name": "abi_encode_t_uint8",
														"nodeType": "YulIdentifier",
														"src": "15139:18:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "15139:54:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "15139:54:11"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "15202:45:11",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "15235:6:11"
																},
																{
																	"name": "_4",
																	"nodeType": "YulIdentifier",
																	"src": "15243:2:11"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "15231:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "15231:15:11"
														}
													],
													"functionName": {
														"name": "mload",
														"nodeType": "YulIdentifier",
														"src": "15225:5:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "15225:22:11"
												},
												"variables": [
													{
														"name": "memberValue0_10",
														"nodeType": "YulTypedName",
														"src": "15206:15:11",
														"type": ""
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "memberValue0_10",
															"nodeType": "YulIdentifier",
															"src": "15275:15:11"
														},
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "15296:9:11"
																},
																{
																	"name": "_1",
																	"nodeType": "YulIdentifier",
																	"src": "15307:2:11"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "15292:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "15292:18:11"
														}
													],
													"functionName": {
														"name": "abi_encode_t_uint8",
														"nodeType": "YulIdentifier",
														"src": "15256:18:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "15256:55:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "15256:55:11"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "15320:45:11",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "15353:6:11"
																},
																{
																	"name": "_5",
																	"nodeType": "YulIdentifier",
																	"src": "15361:2:11"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "15349:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "15349:15:11"
														}
													],
													"functionName": {
														"name": "mload",
														"nodeType": "YulIdentifier",
														"src": "15343:5:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "15343:22:11"
												},
												"variables": [
													{
														"name": "memberValue0_11",
														"nodeType": "YulTypedName",
														"src": "15324:15:11",
														"type": ""
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "memberValue0_11",
															"nodeType": "YulIdentifier",
															"src": "15393:15:11"
														},
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "15414:9:11"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "15425:3:11",
																	"type": "",
																	"value": "512"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "15410:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "15410:19:11"
														}
													],
													"functionName": {
														"name": "abi_encode_t_uint8",
														"nodeType": "YulIdentifier",
														"src": "15374:18:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "15374:56:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "15374:56:11"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "15439:45:11",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "15472:6:11"
																},
																{
																	"name": "_6",
																	"nodeType": "YulIdentifier",
																	"src": "15480:2:11"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "15468:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "15468:15:11"
														}
													],
													"functionName": {
														"name": "mload",
														"nodeType": "YulIdentifier",
														"src": "15462:5:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "15462:22:11"
												},
												"variables": [
													{
														"name": "memberValue0_12",
														"nodeType": "YulTypedName",
														"src": "15443:15:11",
														"type": ""
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "memberValue0_12",
															"nodeType": "YulIdentifier",
															"src": "15514:15:11"
														},
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "15535:9:11"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "15546:3:11",
																	"type": "",
																	"value": "544"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "15531:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "15531:19:11"
														}
													],
													"functionName": {
														"name": "abi_encode_t_address",
														"nodeType": "YulIdentifier",
														"src": "15493:20:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "15493:58:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "15493:58:11"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "15560:45:11",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "15593:6:11"
																},
																{
																	"name": "_7",
																	"nodeType": "YulIdentifier",
																	"src": "15601:2:11"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "15589:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "15589:15:11"
														}
													],
													"functionName": {
														"name": "mload",
														"nodeType": "YulIdentifier",
														"src": "15583:5:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "15583:22:11"
												},
												"variables": [
													{
														"name": "memberValue0_13",
														"nodeType": "YulTypedName",
														"src": "15564:15:11",
														"type": ""
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "memberValue0_13",
															"nodeType": "YulIdentifier",
															"src": "15635:15:11"
														},
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "15656:9:11"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "15667:3:11",
																	"type": "",
																	"value": "576"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "15652:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "15652:19:11"
														}
													],
													"functionName": {
														"name": "abi_encode_t_address",
														"nodeType": "YulIdentifier",
														"src": "15614:20:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "15614:58:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "15614:58:11"
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "15681:45:11",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "15714:6:11"
																},
																{
																	"name": "_8",
																	"nodeType": "YulIdentifier",
																	"src": "15722:2:11"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "15710:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "15710:15:11"
														}
													],
													"functionName": {
														"name": "mload",
														"nodeType": "YulIdentifier",
														"src": "15704:5:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "15704:22:11"
												},
												"variables": [
													{
														"name": "memberValue0_14",
														"nodeType": "YulTypedName",
														"src": "15685:15:11",
														"type": ""
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "15746:9:11"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "15757:3:11",
																	"type": "",
																	"value": "608"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "15742:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "15742:19:11"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "tail_1",
																			"nodeType": "YulIdentifier",
																			"src": "15771:6:11"
																		},
																		{
																			"name": "headStart",
																			"nodeType": "YulIdentifier",
																			"src": "15779:9:11"
																		}
																	],
																	"functionName": {
																		"name": "sub",
																		"nodeType": "YulIdentifier",
																		"src": "15767:3:11"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "15767:22:11"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "15791:66:11",
																	"type": "",
																	"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "15763:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "15763:95:11"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "15735:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "15735:124:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "15735:124:11"
											},
											{
												"nodeType": "YulAssignment",
												"src": "15868:66:11",
												"value": {
													"arguments": [
														{
															"name": "memberValue0_14",
															"nodeType": "YulIdentifier",
															"src": "15910:15:11"
														},
														{
															"name": "tail_1",
															"nodeType": "YulIdentifier",
															"src": "15927:6:11"
														}
													],
													"functionName": {
														"name": "abi_encode_t_array$_t_int128_$dyn",
														"nodeType": "YulIdentifier",
														"src": "15876:33:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "15876:58:11"
												},
												"variableNames": [
													{
														"name": "tail",
														"nodeType": "YulIdentifier",
														"src": "15868:4:11"
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "value1",
															"nodeType": "YulIdentifier",
															"src": "15961:6:11"
														},
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "15973:9:11"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "15984:4:11",
																	"type": "",
																	"value": "0x20"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "15969:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "15969:20:11"
														}
													],
													"functionName": {
														"name": "abi_encode_t_bool",
														"nodeType": "YulIdentifier",
														"src": "15943:17:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "15943:47:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "15943:47:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"name": "value2",
															"nodeType": "YulIdentifier",
															"src": "16030:6:11"
														},
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "16042:9:11"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "16053:4:11",
																	"type": "",
																	"value": "0x40"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "16038:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "16038:20:11"
														}
													],
													"functionName": {
														"name": "abi_encode_t_struct$_Signature",
														"nodeType": "YulIdentifier",
														"src": "15999:30:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "15999:60:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "15999:60:11"
											}
										]
									},
									"name": "abi_encode_tuple_t_struct$_MarketBaseData_$125_memory_ptr_t_bool_t_struct$_Signature_$4447_memory_ptr__to_t_struct$_MarketBaseData_$125_memory_ptr_t_bool_t_struct$_Signature_$4447_memory_ptr__fromStack_reversed",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "headStart",
											"nodeType": "YulTypedName",
											"src": "13716:9:11",
											"type": ""
										},
										{
											"name": "value2",
											"nodeType": "YulTypedName",
											"src": "13727:6:11",
											"type": ""
										},
										{
											"name": "value1",
											"nodeType": "YulTypedName",
											"src": "13735:6:11",
											"type": ""
										},
										{
											"name": "value0",
											"nodeType": "YulTypedName",
											"src": "13743:6:11",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "tail",
											"nodeType": "YulTypedName",
											"src": "13754:4:11",
											"type": ""
										}
									],
									"src": "13496:2569:11"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "16114:198:11",
										"statements": [
											{
												"nodeType": "YulAssignment",
												"src": "16124:19:11",
												"value": {
													"arguments": [
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "16140:2:11",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "mload",
														"nodeType": "YulIdentifier",
														"src": "16134:5:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "16134:9:11"
												},
												"variableNames": [
													{
														"name": "memPtr",
														"nodeType": "YulIdentifier",
														"src": "16124:6:11"
													}
												]
											},
											{
												"nodeType": "YulVariableDeclaration",
												"src": "16152:35:11",
												"value": {
													"arguments": [
														{
															"name": "memPtr",
															"nodeType": "YulIdentifier",
															"src": "16174:6:11"
														},
														{
															"name": "size",
															"nodeType": "YulIdentifier",
															"src": "16182:4:11"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "16170:3:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "16170:17:11"
												},
												"variables": [
													{
														"name": "newFreePtr",
														"nodeType": "YulTypedName",
														"src": "16156:10:11",
														"type": ""
													}
												]
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16262:13:11",
													"statements": [
														{
															"expression": {
																"arguments": [],
																"functionName": {
																	"name": "invalid",
																	"nodeType": "YulIdentifier",
																	"src": "16264:7:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "16264:9:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16264:9:11"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulIdentifier",
																	"src": "16205:10:11"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "16217:18:11",
																	"type": "",
																	"value": "0xffffffffffffffff"
																}
															],
															"functionName": {
																"name": "gt",
																"nodeType": "YulIdentifier",
																"src": "16202:2:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "16202:34:11"
														},
														{
															"arguments": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulIdentifier",
																	"src": "16241:10:11"
																},
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "16253:6:11"
																}
															],
															"functionName": {
																"name": "lt",
																"nodeType": "YulIdentifier",
																"src": "16238:2:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "16238:22:11"
														}
													],
													"functionName": {
														"name": "or",
														"nodeType": "YulIdentifier",
														"src": "16199:2:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "16199:62:11"
												},
												"nodeType": "YulIf",
												"src": "16196:2:11"
											},
											{
												"expression": {
													"arguments": [
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "16291:2:11",
															"type": "",
															"value": "64"
														},
														{
															"name": "newFreePtr",
															"nodeType": "YulIdentifier",
															"src": "16295:10:11"
														}
													],
													"functionName": {
														"name": "mstore",
														"nodeType": "YulIdentifier",
														"src": "16284:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "16284:22:11"
												},
												"nodeType": "YulExpressionStatement",
												"src": "16284:22:11"
											}
										]
									},
									"name": "allocateMemory",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "size",
											"nodeType": "YulTypedName",
											"src": "16094:4:11",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "memPtr",
											"nodeType": "YulTypedName",
											"src": "16103:6:11",
											"type": ""
										}
									],
									"src": "16070:242:11"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "16392:108:11",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16436:13:11",
													"statements": [
														{
															"expression": {
																"arguments": [],
																"functionName": {
																	"name": "invalid",
																	"nodeType": "YulIdentifier",
																	"src": "16438:7:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "16438:9:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16438:9:11"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "16408:6:11"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "16416:18:11",
															"type": "",
															"value": "0xffffffffffffffff"
														}
													],
													"functionName": {
														"name": "gt",
														"nodeType": "YulIdentifier",
														"src": "16405:2:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "16405:30:11"
												},
												"nodeType": "YulIf",
												"src": "16402:2:11"
											},
											{
												"nodeType": "YulAssignment",
												"src": "16458:36:11",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "16474:6:11"
																},
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "16482:4:11",
																	"type": "",
																	"value": "0x20"
																}
															],
															"functionName": {
																"name": "mul",
																"nodeType": "YulIdentifier",
																"src": "16470:3:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "16470:17:11"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "16489:4:11",
															"type": "",
															"value": "0x20"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "16466:3:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "16466:28:11"
												},
												"variableNames": [
													{
														"name": "size",
														"nodeType": "YulIdentifier",
														"src": "16458:4:11"
													}
												]
											}
										]
									},
									"name": "array_allocation_size_t_array$_t_address_$dyn",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "length",
											"nodeType": "YulTypedName",
											"src": "16372:6:11",
											"type": ""
										}
									],
									"returnVariables": [
										{
											"name": "size",
											"nodeType": "YulTypedName",
											"src": "16383:4:11",
											"type": ""
										}
									],
									"src": "16317:183:11"
								},
								{
									"body": {
										"nodeType": "YulBlock",
										"src": "16552:109:11",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16639:16:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16648:1:11",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16651:1:11",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "16641:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "16641:12:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16641:12:11"
														}
													]
												},
												"condition": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "16575:5:11"
																},
																{
																	"arguments": [
																		{
																			"name": "value",
																			"nodeType": "YulIdentifier",
																			"src": "16586:5:11"
																		},
																		{
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "16593:42:11",
																			"type": "",
																			"value": "0xffffffffffffffffffffffffffffffffffffffff"
																		}
																	],
																	"functionName": {
																		"name": "and",
																		"nodeType": "YulIdentifier",
																		"src": "16582:3:11"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "16582:54:11"
																}
															],
															"functionName": {
																"name": "eq",
																"nodeType": "YulIdentifier",
																"src": "16572:2:11"
															},
															"nodeType": "YulFunctionCall",
															"src": "16572:65:11"
														}
													],
													"functionName": {
														"name": "iszero",
														"nodeType": "YulIdentifier",
														"src": "16565:6:11"
													},
													"nodeType": "YulFunctionCall",
													"src": "16565:73:11"
												},
												"nodeType": "YulIf",
												"src": "16562:2:11"
											}
										]
									},
									"name": "validator_revert_t_address",
									"nodeType": "YulFunctionDefinition",
									"parameters": [
										{
											"name": "value",
											"nodeType": "YulTypedName",
											"src": "16541:5:11",
											"type": ""
										}
									],
									"src": "16505:156:11"
								}
							]
						},
						"contents": "{\n    { }\n    function abi_decode_t_address(offset) -> value\n    {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n    function abi_decode_t_array$_t_address_$dyn(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(array, array) }\n        let length := calldataload(offset)\n        array := allocateMemory(array_allocation_size_t_array$_t_address_$dyn(length))\n        let dst := array\n        mstore(array, length)\n        let _1 := 0x20\n        dst := add(array, _1)\n        let src := add(offset, _1)\n        if gt(add(add(offset, mul(length, _1)), _1), end) { revert(0, 0) }\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            let value := calldataload(src)\n            validator_revert_t_address(value)\n            mstore(dst, value)\n            dst := add(dst, _1)\n            src := add(src, _1)\n        }\n    }\n    function abi_decode_t_array$_t_bytes32_$dyn(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(array, array) }\n        let length := calldataload(offset)\n        array := allocateMemory(array_allocation_size_t_array$_t_address_$dyn(length))\n        let dst := array\n        mstore(array, length)\n        let _1 := 0x20\n        dst := add(array, _1)\n        let src := add(offset, _1)\n        if gt(add(add(offset, mul(length, _1)), _1), end) { revert(0, 0) }\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(dst, calldataload(src))\n            dst := add(dst, _1)\n            src := add(src, _1)\n        }\n    }\n    function abi_decode_t_array$_t_int128_$dyn(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(array, array) }\n        let length := calldataload(offset)\n        array := allocateMemory(array_allocation_size_t_array$_t_address_$dyn(length))\n        let dst := array\n        mstore(array, length)\n        let _1 := 0x20\n        dst := add(array, _1)\n        let src := add(offset, _1)\n        if gt(add(add(offset, mul(length, _1)), _1), end) { revert(0, 0) }\n        let i := 0\n        let i_1 := i\n        for { } lt(i_1, length) { i_1 := add(i_1, 1) }\n        {\n            let value := calldataload(src)\n            if iszero(eq(value, signextend(15, value))) { revert(i, i) }\n            mstore(dst, value)\n            dst := add(dst, _1)\n            src := add(src, _1)\n        }\n    }\n    function abi_decode_t_array$_t_struct$_SettlementData_$dyn(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(array, array) }\n        let length := calldataload(offset)\n        array := allocateMemory(array_allocation_size_t_array$_t_address_$dyn(length))\n        let dst := array\n        mstore(array, length)\n        let _1 := 0x20\n        dst := add(array, _1)\n        let src := add(offset, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            let _2 := add(offset, calldataload(src))\n            let _3 := 0x0100\n            if slt(add(sub(end, _2), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0), _3) { revert(0, 0) }\n            let _4 := 0xc0\n            let value := allocateMemory(_4)\n            mstore(value, abi_decode_t_address(add(_2, _1)))\n            let _5 := 64\n            mstore(add(value, _1), calldataload(add(_2, _5)))\n            let _6 := 96\n            mstore(add(value, _5), abi_decode_t_struct$_Signature(add(_2, _6), end))\n            mstore(add(value, _6), calldataload(add(_2, _4)))\n            let offset_1 := calldataload(add(_2, 224))\n            let _7 := 0xffffffffffffffff\n            if gt(offset_1, _7) { revert(0, 0) }\n            mstore(add(value, 0x80), abi_decode_t_array$_t_address_$dyn(add(add(_2, offset_1), _1), end))\n            let offset_2 := calldataload(add(_2, _3))\n            if gt(offset_2, _7) { revert(0, 0) }\n            mstore(add(value, 160), abi_decode_t_array$_t_bytes32_$dyn(add(add(_2, offset_2), _1), end))\n            mstore(dst, value)\n            dst := add(dst, _1)\n            src := add(src, _1)\n        }\n    }\n    function abi_decode_t_bool(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n    }\n    function abi_decode_t_int8(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, signextend(0, value))) { revert(0, 0) }\n    }\n    function abi_decode_t_string(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(array, array) }\n        let length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { invalid() }\n        array := allocateMemory(add(and(add(length, 0x1f), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0), 0x20))\n        mstore(array, length)\n        if gt(add(add(offset, length), 0x20), end) { revert(0, 0) }\n        calldatacopy(add(array, 0x20), add(offset, 0x20), length)\n        mstore(add(add(array, length), 0x20), 0)\n    }\n    function abi_decode_t_struct$_MarketBaseData(headStart, end) -> value\n    {\n        let _1 := 0x01e0\n        if slt(sub(end, headStart), _1) { revert(value, value) }\n        value := allocateMemory(_1)\n        let offset := calldataload(headStart)\n        let _2 := 0xffffffffffffffff\n        if gt(offset, _2) { revert(0, 0) }\n        mstore(value, abi_decode_t_string(add(headStart, offset), end))\n        mstore(add(value, 32), abi_decode_t_uint40(add(headStart, 32)))\n        mstore(add(value, 64), abi_decode_t_uint24(add(headStart, 64)))\n        mstore(add(value, 96), abi_decode_t_uint8(add(headStart, 96)))\n        mstore(add(value, 128), abi_decode_t_uint8(add(headStart, 128)))\n        mstore(add(value, 160), abi_decode_t_uint8(add(headStart, 160)))\n        mstore(add(value, 192), abi_decode_t_int8(add(headStart, 192)))\n        mstore(add(value, 224), abi_decode_t_address(add(headStart, 224)))\n        let _3 := 256\n        mstore(add(value, _3), abi_decode_t_uint8(add(headStart, _3)))\n        let _4 := 288\n        mstore(add(value, _4), abi_decode_t_uint8(add(headStart, _4)))\n        let _5 := 320\n        mstore(add(value, _5), abi_decode_t_uint8(add(headStart, _5)))\n        let _6 := 352\n        mstore(add(value, _6), abi_decode_t_uint8(add(headStart, _6)))\n        let _7 := 384\n        mstore(add(value, _7), abi_decode_t_address(add(headStart, _7)))\n        let _8 := 416\n        mstore(add(value, _8), abi_decode_t_address(add(headStart, _8)))\n        let _9 := 448\n        let offset_1 := calldataload(add(headStart, _9))\n        if gt(offset_1, _2) { revert(0, 0) }\n        mstore(add(value, _9), abi_decode_t_array$_t_int128_$dyn(add(headStart, offset_1), end))\n    }\n    function abi_decode_t_struct$_Signature(headStart, end) -> value\n    {\n        if slt(sub(end, headStart), 0x60) { revert(value, value) }\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, 0x60)\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { invalid() }\n        mstore(64, newFreePtr)\n        value := memPtr\n        mstore(memPtr, abi_decode_t_uint8(headStart))\n        mstore(add(memPtr, 32), calldataload(add(headStart, 32)))\n        mstore(add(memPtr, 64), calldataload(add(headStart, 64)))\n    }\n    function abi_decode_t_uint24(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffff))) { revert(0, 0) }\n    }\n    function abi_decode_t_uint40(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_t_uint8(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_array$_t_struct$_CreateAndRegisterData_$3788_memory_ptr_$dyn_memory_ptrt_array$_t_struct$_SettlementData_$3803_memory_ptr_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(value0, value0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(value0, value0) }\n        let length := calldataload(_2)\n        let dst := allocateMemory(array_allocation_size_t_array$_t_address_$dyn(length))\n        let dst_1 := dst\n        mstore(dst, length)\n        let _3 := 0x20\n        dst := add(dst, _3)\n        let src := add(_2, _3)\n        let i := value0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            let _4 := add(_2, calldataload(src))\n            if slt(add(sub(dataEnd, _4), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0), 0xc0) { revert(value0, value0) }\n            let memPtr := mload(64)\n            let newFreePtr := add(memPtr, 0x80)\n            if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { invalid() }\n            mstore(64, newFreePtr)\n            let value := calldataload(add(_4, _3))\n            validator_revert_t_address(value)\n            mstore(memPtr, value)\n            let offset_1 := calldataload(add(_4, 64))\n            if gt(offset_1, _1) { revert(value0, value0) }\n            mstore(add(memPtr, _3), abi_decode_t_struct$_MarketBaseData(add(add(_4, offset_1), _3), dataEnd))\n            mstore(add(memPtr, 64), abi_decode_t_bool(add(_4, 96)))\n            mstore(add(memPtr, 96), abi_decode_t_struct$_Signature(add(_4, 0x80), dataEnd))\n            mstore(dst, memPtr)\n            dst := add(dst, _3)\n            src := add(src, _3)\n        }\n        value0 := dst_1\n        let offset_2 := calldataload(add(headStart, _3))\n        if gt(offset_2, _1) { revert(value1, value1) }\n        value1 := abi_decode_t_array$_t_struct$_SettlementData_$dyn(add(headStart, offset_2), dataEnd)\n    }\n    function abi_decode_tuple_t_bytes32_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_t_address(value, pos)\n    {\n        mstore(pos, and(value, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_t_array$_t_int128_$dyn(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        let _1 := 0x20\n        pos := add(pos, _1)\n        let srcPtr := add(value, _1)\n        let i := end\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, signextend(15, mload(srcPtr)))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        end := pos\n    }\n    function abi_encode_t_bool(value, pos)\n    {\n        mstore(pos, iszero(iszero(value)))\n    }\n    function abi_encode_t_int8(value, pos)\n    {\n        mstore(pos, signextend(0, value))\n    }\n    function abi_encode_t_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        let i := end\n        for { } lt(i, length) { i := add(i, 0x20) }\n        {\n            let _1 := 0x20\n            mstore(add(add(pos, i), _1), mload(add(add(value, i), _1)))\n        }\n        if gt(i, length)\n        {\n            mstore(add(add(pos, length), 0x20), end)\n        }\n        end := add(add(pos, and(add(length, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 0x20)\n    }\n    function abi_encode_t_struct$_Signature(value, pos)\n    {\n        mstore(pos, and(mload(value), 0xff))\n        mstore(add(pos, 0x20), mload(add(value, 0x20)))\n        mstore(add(pos, 0x40), mload(add(value, 0x40)))\n    }\n    function abi_encode_t_uint24(value, pos)\n    {\n        mstore(pos, and(value, 0xffffff))\n    }\n    function abi_encode_t_uint40(value, pos)\n    {\n        mstore(pos, and(value, 0xffffffffff))\n    }\n    function abi_encode_t_uint8(value, pos)\n    { mstore(pos, and(value, 0xff)) }\n    function abi_encode_tuple_t_bytes32_t_struct$_Signature_$4447_memory_ptr_t_int256_t_array$_t_address_$dyn_memory_ptr_t_array$_t_bytes32_$dyn_memory_ptr__to_t_bytes32_t_struct$_Signature_$4447_memory_ptr_t_int256_t_array$_t_address_$dyn_memory_ptr_t_array$_t_bytes32_$dyn_memory_ptr__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        let tail_1 := add(headStart, 224)\n        mstore(headStart, value0)\n        let _1 := 32\n        abi_encode_t_struct$_Signature(value1, add(headStart, _1))\n        mstore(add(headStart, 128), value2)\n        mstore(add(headStart, 160), 224)\n        let pos := tail_1\n        let length := mload(value3)\n        mstore(tail_1, length)\n        pos := add(headStart, 256)\n        let srcPtr := add(value3, _1)\n        let i := tail\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, and(mload(srcPtr), 0xffffffffffffffffffffffffffffffffffffffff))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        mstore(add(headStart, 192), sub(pos, headStart))\n        let pos_1 := pos\n        let length_1 := mload(value4)\n        mstore(pos, length_1)\n        pos_1 := add(pos, _1)\n        let srcPtr_1 := add(value4, _1)\n        let i_1 := tail\n        for { } lt(i_1, length_1) { i_1 := add(i_1, 1) }\n        {\n            mstore(pos_1, mload(srcPtr_1))\n            pos_1 := add(pos_1, _1)\n            srcPtr_1 := add(srcPtr_1, _1)\n        }\n        tail := pos_1\n    }\n    function abi_encode_tuple_t_struct$_MarketBaseData_$125_memory_ptr_t_bool_t_struct$_Signature_$4447_memory_ptr__to_t_struct$_MarketBaseData_$125_memory_ptr_t_bool_t_struct$_Signature_$4447_memory_ptr__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        mstore(headStart, 160)\n        let memberValue0 := mload(value0)\n        let _1 := 0x01e0\n        mstore(add(headStart, 160), _1)\n        let tail_1 := abi_encode_t_string(memberValue0, add(headStart, 640))\n        let memberValue0_1 := mload(add(value0, 0x20))\n        abi_encode_t_uint40(memberValue0_1, add(headStart, 192))\n        let memberValue0_2 := mload(add(value0, 0x40))\n        abi_encode_t_uint24(memberValue0_2, add(headStart, 224))\n        let memberValue0_3 := mload(add(value0, 0x60))\n        let _2 := 256\n        abi_encode_t_uint8(memberValue0_3, add(headStart, _2))\n        let memberValue0_4 := mload(add(value0, 0x80))\n        let _3 := 288\n        abi_encode_t_uint8(memberValue0_4, add(headStart, _3))\n        let memberValue0_5 := mload(add(value0, 160))\n        let _4 := 320\n        abi_encode_t_uint8(memberValue0_5, add(headStart, _4))\n        let memberValue0_6 := mload(add(value0, 192))\n        let _5 := 352\n        abi_encode_t_int8(memberValue0_6, add(headStart, _5))\n        let memberValue0_7 := mload(add(value0, 224))\n        let _6 := 384\n        abi_encode_t_address(memberValue0_7, add(headStart, _6))\n        let memberValue0_8 := mload(add(value0, _2))\n        let _7 := 416\n        abi_encode_t_uint8(memberValue0_8, add(headStart, _7))\n        let memberValue0_9 := mload(add(value0, _3))\n        let _8 := 448\n        abi_encode_t_uint8(memberValue0_9, add(headStart, _8))\n        let memberValue0_10 := mload(add(value0, _4))\n        abi_encode_t_uint8(memberValue0_10, add(headStart, _1))\n        let memberValue0_11 := mload(add(value0, _5))\n        abi_encode_t_uint8(memberValue0_11, add(headStart, 512))\n        let memberValue0_12 := mload(add(value0, _6))\n        abi_encode_t_address(memberValue0_12, add(headStart, 544))\n        let memberValue0_13 := mload(add(value0, _7))\n        abi_encode_t_address(memberValue0_13, add(headStart, 576))\n        let memberValue0_14 := mload(add(value0, _8))\n        mstore(add(headStart, 608), add(sub(tail_1, headStart), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60))\n        tail := abi_encode_t_array$_t_int128_$dyn(memberValue0_14, tail_1)\n        abi_encode_t_bool(value1, add(headStart, 0x20))\n        abi_encode_t_struct$_Signature(value2, add(headStart, 0x40))\n    }\n    function allocateMemory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, size)\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { invalid() }\n        mstore(64, newFreePtr)\n    }\n    function array_allocation_size_t_array$_t_address_$dyn(length) -> size\n    {\n        if gt(length, 0xffffffffffffffff) { invalid() }\n        size := add(mul(length, 0x20), 0x20)\n    }\n    function validator_revert_t_address(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n}",
						"id": 11,
						"language": "Yul",
						"name": "#utility.yul"
					}
				],
				"immutableReferences": {},
				"linkReferences": {},
				"object": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063da571e0414610030575b600080fd5b61004361003e366004610814565b610045565b005b60005b8251811015610118576100596101e0565b83828151811061006557fe5b60200260200101519050806000015173ffffffffffffffffffffffffffffffffffffffff16632556d8d08260200151836040015184606001516040518463ffffffff1660e01b81526004016100bc93929190610b25565b602060405180830381600087803b1580156100d657600080fd5b505af11580156100ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061010e919061095a565b5050600101610048565b5060005b81518110156101db5761012d610229565b82828151811061013957fe5b60200260200101519050806000015173ffffffffffffffffffffffffffffffffffffffff1663a1aa12b282602001518360400151846060015185608001518660a001516040518663ffffffff1660e01b815260040161019c959493929190610a76565b600060405180830381600087803b1580156101b657600080fd5b505af11580156101ca573d6000803e3d6000fd5b50506001909301925061011c915050565b505050565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001610210610263565b8152600060208201526040016102246102e1565b905290565b6040805160c081018252600080825260208201529081016102486102e1565b81526020016000815260200160608152602001606081525090565b604080516101e08101825260608082526000602083018190529282018390528082018390526080820183905260a0820183905260c0820183905260e08201839052610100820183905261012082018390526101408201839052610160820183905261018082018390526101a08201929092526101c081019190915290565b604080516060810182526000808252602082018190529181019190915290565b803561030c81610cfa565b919050565b600082601f830112610321578081fd5b813561033461032f82610cdc565b610cb8565b81815291506020808301908481018184028601820187101561035557600080fd5b60005b8481101561037d57813561036b81610cfa565b84529282019290820190600101610358565b505050505092915050565b600082601f830112610398578081fd5b81356103a661032f82610cdc565b8181529150602080830190848101818402860182018710156103c757600080fd5b60005b8481101561037d578135845292820192908201906001016103ca565b600082601f8301126103f6578081fd5b813561040461032f82610cdc565b81815291506020808301908481018184028601820187101561042557600080fd5b6000805b8581101561045357823580600f0b8114610441578283fd5b85529383019391830191600101610429565b50505050505092915050565b600082601f83011261046f578081fd5b813561047d61032f82610cdc565b818152915060208083019084810160005b8481101561037d5781358701610100807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0838c030112156104ce57600080fd5b60c06104d981610cb8565b6104e4878501610301565b81526040808501358883015260606104fe8e828801610781565b828401528386013581840152505060e0840135915067ffffffffffffffff8083111561052957600080fd5b6105378d8985880101610311565b608083015292840135928084111561054e57600080fd5b5061055d8c8885870101610388565b60a08201528752505050928201929082019060010161048e565b8035801515811461030c57600080fd5b8035600081900b811461030c57600080fd5b600082601f8301126105a9578081fd5b813567ffffffffffffffff8111156105bd57fe5b6105ee60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601610cb8565b915080825283602082850101111561060557600080fd5b8060208401602084013760009082016020015292915050565b60006101e0808385031215610631578182fd5b61063a81610cb8565b915050813567ffffffffffffffff8082111561065557600080fd5b61066185838601610599565b835261066f602085016107ee565b6020840152610680604085016107db565b604084015261069160608501610803565b60608401526106a260808501610803565b60808401526106b360a08501610803565b60a08401526106c460c08501610587565b60c08401526106d560e08501610301565b60e084015261010091506106ea828501610803565b8284015261012091506106fe828501610803565b828401526101409150610712828501610803565b828401526101609150610726828501610803565b82840152610180915061073a828501610301565b828401526101a0915061074e828501610301565b828401526101c09150818401358181111561076857600080fd5b610774868287016103e6565b8385015250505092915050565b600060608284031215610792578081fd5b6040516060810181811067ffffffffffffffff821117156107af57fe5b6040529050806107be83610803565b815260208301356020820152604083013560408201525092915050565b803562ffffff8116811461030c57600080fd5b803564ffffffffff8116811461030c57600080fd5b803560ff8116811461030c57600080fd5b60008060408385031215610826578182fd5b823567ffffffffffffffff8082111561083d578384fd5b818501915085601f830112610850578384fd5b813561085e61032f82610cdc565b81815260208082019190858101885b8581101561092b578135880160c07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0828f030112156108aa578a8bfd5b604051608081018181108a821117156108bf57fe5b604052818501356108cf81610cfa565b81526040820135898111156108e2578c8dfd5b6108f08f878386010161061e565b868301525061090160608301610577565b60408201526109138e60808401610781565b6060820152865250938201939082019060010161086d565b50919750880135945050505080821115610943578283fd5b506109508582860161045f565b9150509250929050565b60006020828403121561096b578081fd5b5051919050565b73ffffffffffffffffffffffffffffffffffffffff169052565b6000815180845260208085019450808401835b838110156109be578151600f0b8752958201959082019060010161099f565b509495945050505050565b15159052565b60000b9052565b60008151808452815b818110156109fb576020818501810151868301820152016109df565b81811115610a0c5782602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b805160ff16825260208082015190830152604090810151910152565b62ffffff169052565b64ffffffffff169052565b60ff169052565b600060e082018783526020610a8d81850189610a3f565b6080840187905260e060a085015285519182905280860191610100850190845b81811015610adf57845173ffffffffffffffffffffffffffffffffffffffff1683529383019391830191600101610aad565b505084810360c08601528551808252908201925081860190845b81811015610b1557825185529383019391830191600101610af9565b50929a9950505050505050505050565b600060a0825284516101e08060a0850152610b446102808501836109d6565b91506020870151610b5860c0860182610a64565b506040870151610b6b60e0860182610a5b565b506060870151610100610b8081870183610a6f565b60808901519150610120610b9681880184610a6f565b60a08a01519250610140610bac81890185610a6f565b60c08b01519350610160610bc2818a01866109cf565b60e08c01519450610180610bd8818b0187610972565b938c015194506101a093610bee8a860187610a6f565b928c015194506101c092610c048a850187610a6f565b828d01519550610c16878b0187610a6f565b818d01519650610c2a6102008b0188610a6f565b8c01519550610c40915050610220880185610972565b818a01519350610c54610240880185610972565b808a015193505050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6084830301610260850152610c92828261098c565b92505050610ca360208301856109c9565b610cb06040830184610a3f565b949350505050565b60405181810167ffffffffffffffff81118282101715610cd457fe5b604052919050565b600067ffffffffffffffff821115610cf057fe5b5060209081020190565b73ffffffffffffffffffffffffffffffffffffffff81168114610d1c57600080fd5b5056fea264697066735822122033e951b24800c72fe4977b327fb83ac428fb2084d9384686e4cac0f01240776f64736f6c63430007040033",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xDA571E04 EQ PUSH2 0x30 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x43 PUSH2 0x3E CALLDATASIZE PUSH1 0x4 PUSH2 0x814 JUMP JUMPDEST PUSH2 0x45 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x118 JUMPI PUSH2 0x59 PUSH2 0x1E0 JUMP JUMPDEST DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x65 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP1 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x2556D8D0 DUP3 PUSH1 0x20 ADD MLOAD DUP4 PUSH1 0x40 ADD MLOAD DUP5 PUSH1 0x60 ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBC SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB25 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xEA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x10E SWAP2 SWAP1 PUSH2 0x95A JUMP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x48 JUMP JUMPDEST POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x1DB JUMPI PUSH2 0x12D PUSH2 0x229 JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x139 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP1 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA1AA12B2 DUP3 PUSH1 0x20 ADD MLOAD DUP4 PUSH1 0x40 ADD MLOAD DUP5 PUSH1 0x60 ADD MLOAD DUP6 PUSH1 0x80 ADD MLOAD DUP7 PUSH1 0xA0 ADD MLOAD PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x19C SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA76 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1CA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x1 SWAP1 SWAP4 ADD SWAP3 POP PUSH2 0x11C SWAP2 POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x210 PUSH2 0x263 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD PUSH2 0x224 PUSH2 0x2E1 JUMP JUMPDEST SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD PUSH2 0x248 PUSH2 0x2E1 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0x1E0 DUP2 ADD DUP3 MSTORE PUSH1 0x60 DUP1 DUP3 MSTORE PUSH1 0x0 PUSH1 0x20 DUP4 ADD DUP2 SWAP1 MSTORE SWAP3 DUP3 ADD DUP4 SWAP1 MSTORE DUP1 DUP3 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 DUP3 ADD DUP4 SWAP1 MSTORE PUSH1 0xA0 DUP3 ADD DUP4 SWAP1 MSTORE PUSH1 0xC0 DUP3 ADD DUP4 SWAP1 MSTORE PUSH1 0xE0 DUP3 ADD DUP4 SWAP1 MSTORE PUSH2 0x100 DUP3 ADD DUP4 SWAP1 MSTORE PUSH2 0x120 DUP3 ADD DUP4 SWAP1 MSTORE PUSH2 0x140 DUP3 ADD DUP4 SWAP1 MSTORE PUSH2 0x160 DUP3 ADD DUP4 SWAP1 MSTORE PUSH2 0x180 DUP3 ADD DUP4 SWAP1 MSTORE PUSH2 0x1A0 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH2 0x1C0 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x30C DUP2 PUSH2 0xCFA JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x321 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x334 PUSH2 0x32F DUP3 PUSH2 0xCDC JUMP JUMPDEST PUSH2 0xCB8 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x355 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x37D JUMPI DUP2 CALLDATALOAD PUSH2 0x36B DUP2 PUSH2 0xCFA JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x358 JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x398 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x3A6 PUSH2 0x32F DUP3 PUSH2 0xCDC JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x3C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x37D JUMPI DUP2 CALLDATALOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x3CA JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3F6 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x404 PUSH2 0x32F DUP3 PUSH2 0xCDC JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x425 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x453 JUMPI DUP3 CALLDATALOAD DUP1 PUSH1 0xF SIGNEXTEND DUP2 EQ PUSH2 0x441 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP6 MSTORE SWAP4 DUP4 ADD SWAP4 SWAP2 DUP4 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x429 JUMP JUMPDEST POP POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x46F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x47D PUSH2 0x32F DUP3 PUSH2 0xCDC JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x37D JUMPI DUP2 CALLDATALOAD DUP8 ADD PUSH2 0x100 DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP4 DUP13 SUB ADD SLT ISZERO PUSH2 0x4CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0xC0 PUSH2 0x4D9 DUP2 PUSH2 0xCB8 JUMP JUMPDEST PUSH2 0x4E4 DUP8 DUP6 ADD PUSH2 0x301 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 DUP1 DUP6 ADD CALLDATALOAD DUP9 DUP4 ADD MSTORE PUSH1 0x60 PUSH2 0x4FE DUP15 DUP3 DUP9 ADD PUSH2 0x781 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE DUP4 DUP7 ADD CALLDATALOAD DUP2 DUP5 ADD MSTORE POP POP PUSH1 0xE0 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP4 GT ISZERO PUSH2 0x529 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x537 DUP14 DUP10 DUP6 DUP9 ADD ADD PUSH2 0x311 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE SWAP3 DUP5 ADD CALLDATALOAD SWAP3 DUP1 DUP5 GT ISZERO PUSH2 0x54E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x55D DUP13 DUP9 DUP6 DUP8 ADD ADD PUSH2 0x388 JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MSTORE DUP8 MSTORE POP POP POP SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x48E JUMP JUMPDEST DUP1 CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x30C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH1 0x0 DUP2 SWAP1 SIGNEXTEND DUP2 EQ PUSH2 0x30C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x5A9 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x5BD JUMPI INVALID JUMPDEST PUSH2 0x5EE PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP5 ADD AND ADD PUSH2 0xCB8 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x605 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E0 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x631 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x63A DUP2 PUSH2 0xCB8 JUMP JUMPDEST SWAP2 POP POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x655 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x661 DUP6 DUP4 DUP7 ADD PUSH2 0x599 JUMP JUMPDEST DUP4 MSTORE PUSH2 0x66F PUSH1 0x20 DUP6 ADD PUSH2 0x7EE JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x680 PUSH1 0x40 DUP6 ADD PUSH2 0x7DB JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x691 PUSH1 0x60 DUP6 ADD PUSH2 0x803 JUMP JUMPDEST PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x6A2 PUSH1 0x80 DUP6 ADD PUSH2 0x803 JUMP JUMPDEST PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x6B3 PUSH1 0xA0 DUP6 ADD PUSH2 0x803 JUMP JUMPDEST PUSH1 0xA0 DUP5 ADD MSTORE PUSH2 0x6C4 PUSH1 0xC0 DUP6 ADD PUSH2 0x587 JUMP JUMPDEST PUSH1 0xC0 DUP5 ADD MSTORE PUSH2 0x6D5 PUSH1 0xE0 DUP6 ADD PUSH2 0x301 JUMP JUMPDEST PUSH1 0xE0 DUP5 ADD MSTORE PUSH2 0x100 SWAP2 POP PUSH2 0x6EA DUP3 DUP6 ADD PUSH2 0x803 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE PUSH2 0x120 SWAP2 POP PUSH2 0x6FE DUP3 DUP6 ADD PUSH2 0x803 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE PUSH2 0x140 SWAP2 POP PUSH2 0x712 DUP3 DUP6 ADD PUSH2 0x803 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE PUSH2 0x160 SWAP2 POP PUSH2 0x726 DUP3 DUP6 ADD PUSH2 0x803 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE PUSH2 0x180 SWAP2 POP PUSH2 0x73A DUP3 DUP6 ADD PUSH2 0x301 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE PUSH2 0x1A0 SWAP2 POP PUSH2 0x74E DUP3 DUP6 ADD PUSH2 0x301 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE PUSH2 0x1C0 SWAP2 POP DUP2 DUP5 ADD CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x768 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x774 DUP7 DUP3 DUP8 ADD PUSH2 0x3E6 JUMP JUMPDEST DUP4 DUP6 ADD MSTORE POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x792 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x60 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x7AF JUMPI INVALID JUMPDEST PUSH1 0x40 MSTORE SWAP1 POP DUP1 PUSH2 0x7BE DUP4 PUSH2 0x803 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP4 ADD CALLDATALOAD PUSH1 0x40 DUP3 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH3 0xFFFFFF DUP2 AND DUP2 EQ PUSH2 0x30C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH5 0xFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x30C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x30C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x826 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x83D JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x850 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x85E PUSH2 0x32F DUP3 PUSH2 0xCDC JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP2 SWAP1 DUP6 DUP2 ADD DUP9 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x92B JUMPI DUP2 CALLDATALOAD DUP9 ADD PUSH1 0xC0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP3 DUP16 SUB ADD SLT ISZERO PUSH2 0x8AA JUMPI DUP11 DUP12 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x80 DUP2 ADD DUP2 DUP2 LT DUP11 DUP3 GT OR ISZERO PUSH2 0x8BF JUMPI INVALID JUMPDEST PUSH1 0x40 MSTORE DUP2 DUP6 ADD CALLDATALOAD PUSH2 0x8CF DUP2 PUSH2 0xCFA JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 DUP3 ADD CALLDATALOAD DUP10 DUP2 GT ISZERO PUSH2 0x8E2 JUMPI DUP13 DUP14 REVERT JUMPDEST PUSH2 0x8F0 DUP16 DUP8 DUP4 DUP7 ADD ADD PUSH2 0x61E JUMP JUMPDEST DUP7 DUP4 ADD MSTORE POP PUSH2 0x901 PUSH1 0x60 DUP4 ADD PUSH2 0x577 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x913 DUP15 PUSH1 0x80 DUP5 ADD PUSH2 0x781 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE DUP7 MSTORE POP SWAP4 DUP3 ADD SWAP4 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x86D JUMP JUMPDEST POP SWAP2 SWAP8 POP DUP9 ADD CALLDATALOAD SWAP5 POP POP POP POP DUP1 DUP3 GT ISZERO PUSH2 0x943 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x950 DUP6 DUP3 DUP7 ADD PUSH2 0x45F JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x96B JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x9BE JUMPI DUP2 MLOAD PUSH1 0xF SIGNEXTEND DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x99F JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST ISZERO ISZERO SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 SIGNEXTEND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE DUP2 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x9FB JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x9DF JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0xA0C JUMPI DUP3 PUSH1 0x20 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0xFF AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP3 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH1 0x40 SWAP1 DUP2 ADD MLOAD SWAP2 ADD MSTORE JUMP JUMPDEST PUSH3 0xFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH5 0xFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0xFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0xE0 DUP3 ADD DUP8 DUP4 MSTORE PUSH1 0x20 PUSH2 0xA8D DUP2 DUP6 ADD DUP10 PUSH2 0xA3F JUMP JUMPDEST PUSH1 0x80 DUP5 ADD DUP8 SWAP1 MSTORE PUSH1 0xE0 PUSH1 0xA0 DUP6 ADD MSTORE DUP6 MLOAD SWAP2 DUP3 SWAP1 MSTORE DUP1 DUP7 ADD SWAP2 PUSH2 0x100 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xADF JUMPI DUP5 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 MSTORE SWAP4 DUP4 ADD SWAP4 SWAP2 DUP4 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0xAAD JUMP JUMPDEST POP POP DUP5 DUP2 SUB PUSH1 0xC0 DUP7 ADD MSTORE DUP6 MLOAD DUP1 DUP3 MSTORE SWAP1 DUP3 ADD SWAP3 POP DUP2 DUP7 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xB15 JUMPI DUP3 MLOAD DUP6 MSTORE SWAP4 DUP4 ADD SWAP4 SWAP2 DUP4 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0xAF9 JUMP JUMPDEST POP SWAP3 SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 MSTORE DUP5 MLOAD PUSH2 0x1E0 DUP1 PUSH1 0xA0 DUP6 ADD MSTORE PUSH2 0xB44 PUSH2 0x280 DUP6 ADD DUP4 PUSH2 0x9D6 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP8 ADD MLOAD PUSH2 0xB58 PUSH1 0xC0 DUP7 ADD DUP3 PUSH2 0xA64 JUMP JUMPDEST POP PUSH1 0x40 DUP8 ADD MLOAD PUSH2 0xB6B PUSH1 0xE0 DUP7 ADD DUP3 PUSH2 0xA5B JUMP JUMPDEST POP PUSH1 0x60 DUP8 ADD MLOAD PUSH2 0x100 PUSH2 0xB80 DUP2 DUP8 ADD DUP4 PUSH2 0xA6F JUMP JUMPDEST PUSH1 0x80 DUP10 ADD MLOAD SWAP2 POP PUSH2 0x120 PUSH2 0xB96 DUP2 DUP9 ADD DUP5 PUSH2 0xA6F JUMP JUMPDEST PUSH1 0xA0 DUP11 ADD MLOAD SWAP3 POP PUSH2 0x140 PUSH2 0xBAC DUP2 DUP10 ADD DUP6 PUSH2 0xA6F JUMP JUMPDEST PUSH1 0xC0 DUP12 ADD MLOAD SWAP4 POP PUSH2 0x160 PUSH2 0xBC2 DUP2 DUP11 ADD DUP7 PUSH2 0x9CF JUMP JUMPDEST PUSH1 0xE0 DUP13 ADD MLOAD SWAP5 POP PUSH2 0x180 PUSH2 0xBD8 DUP2 DUP12 ADD DUP8 PUSH2 0x972 JUMP JUMPDEST SWAP4 DUP13 ADD MLOAD SWAP5 POP PUSH2 0x1A0 SWAP4 PUSH2 0xBEE DUP11 DUP7 ADD DUP8 PUSH2 0xA6F JUMP JUMPDEST SWAP3 DUP13 ADD MLOAD SWAP5 POP PUSH2 0x1C0 SWAP3 PUSH2 0xC04 DUP11 DUP6 ADD DUP8 PUSH2 0xA6F JUMP JUMPDEST DUP3 DUP14 ADD MLOAD SWAP6 POP PUSH2 0xC16 DUP8 DUP12 ADD DUP8 PUSH2 0xA6F JUMP JUMPDEST DUP2 DUP14 ADD MLOAD SWAP7 POP PUSH2 0xC2A PUSH2 0x200 DUP12 ADD DUP9 PUSH2 0xA6F JUMP JUMPDEST DUP13 ADD MLOAD SWAP6 POP PUSH2 0xC40 SWAP2 POP POP PUSH2 0x220 DUP9 ADD DUP6 PUSH2 0x972 JUMP JUMPDEST DUP2 DUP11 ADD MLOAD SWAP4 POP PUSH2 0xC54 PUSH2 0x240 DUP9 ADD DUP6 PUSH2 0x972 JUMP JUMPDEST DUP1 DUP11 ADD MLOAD SWAP4 POP POP POP POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF60 DUP5 DUP4 SUB ADD PUSH2 0x260 DUP6 ADD MSTORE PUSH2 0xC92 DUP3 DUP3 PUSH2 0x98C JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0xCA3 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x9C9 JUMP JUMPDEST PUSH2 0xCB0 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0xA3F JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xCD4 JUMPI INVALID JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xCF0 JUMPI INVALID JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xD1C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLER 0xE9 MLOAD 0xB2 0x48 STOP 0xC7 0x2F 0xE4 SWAP8 PUSH28 0x327FB83AC428FB2084D9384686E4CAC0F01240776F64736F6C634300 SMOD DIV STOP CALLER ",
				"sourceMap": "1837:2919:4:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2558:2195;;;;;;:::i;:::-;;:::i;:::-;;;2829:32;2824:1416;2892:25;:32;2865:24;:59;2824:1416;;;2968:50;;:::i;:::-;3021:25;3047:24;3021:51;;;;;;;;;;;;;;2968:104;;4009:21;:40;;;:53;;;4080:21;:36;;;4134:21;:32;;;4184:21;:31;;;4009:220;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;2926:26:4;;2824:1416;;;;4254:25;4249:498;4303:18;:25;4283:17;:45;4249:498;;;4365:36;;:::i;:::-;4404:18;4423:17;4404:37;;;;;;;;;;;;;;4365:76;;4455:14;:33;;;:44;;;4517:14;:25;;;4580:14;:24;;;4622:14;:20;;;4660:14;:20;;;4698:14;:24;;;4455:281;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;4330:19:4;;;;;-1:-1:-1;4249:498:4;;-1:-1:-1;;4249:498:4;;;2558:2195;;:::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;14:138:11:-;84:20;;113:33;84:20;113:33;:::i;:::-;65:87;;;:::o;157:769::-;;270:3;263:4;255:6;251:17;247:27;237:2;;292:5;285;278:20;237:2;336:6;323:20;361:69;376:53;422:6;376:53;:::i;:::-;361:69;:::i;:::-;464:21;;;352:78;-1:-1:-1;504:4:11;524:14;;;;558:15;;;604;;;592:28;;588:37;;585:46;-1:-1:-1;582:2:11;;;644:1;641;634:12;582:2;666:1;676:244;690:6;687:1;684:13;676:244;;;765:3;752:17;782:33;809:5;782:33;:::i;:::-;828:18;;866:12;;;;898;;;;712:1;705:9;676:244;;;680:3;;;;;227:699;;;;:::o;931:692::-;;1044:3;1037:4;1029:6;1025:17;1021:27;1011:2;;1066:5;1059;1052:20;1011:2;1110:6;1097:20;1135:69;1150:53;1196:6;1150:53;:::i;1135:69::-;1238:21;;;1126:78;-1:-1:-1;1278:4:11;1298:14;;;;1332:15;;;1378;;;1366:28;;1362:37;;1359:46;-1:-1:-1;1356:2:11;;;1418:1;1415;1408:12;1356:2;1440:1;1450:167;1464:6;1461:1;1458:13;1450:167;;;1525:17;;1513:30;;1563:12;;;;1595;;;;1486:1;1479:9;1450:167;;1628:822;;1740:3;1733:4;1725:6;1721:17;1717:27;1707:2;;1762:5;1755;1748:20;1707:2;1806:6;1793:20;1831:69;1846:53;1892:6;1846:53;:::i;1831:69::-;1934:21;;;1822:78;-1:-1:-1;1974:4:11;1994:14;;;;2028:15;;;2074;;;2062:28;;2058:37;;2055:46;-1:-1:-1;2052:2:11;;;2114:1;2111;2104:12;2052:2;2136:1;2157;2167:277;2183:6;2178:3;2175:15;2167:277;;;2262:3;2249:17;2314:5;2310:2;2299:21;2292:5;2289:32;2279:2;;2335:1;2332;2325:12;2279:2;2352:18;;2390:12;;;;2422;;;;2209:1;2200:11;2167:277;;;2171:3;;;;;;1697:753;;;;:::o;2455:1679::-;;2583:3;2576:4;2568:6;2564:17;2560:27;2550:2;;2605:5;2598;2591:20;2550:2;2649:6;2636:20;2674:69;2689:53;2735:6;2689:53;:::i;2674:69::-;2777:21;;;2665:78;-1:-1:-1;2817:4:11;2837:14;;;;2871:15;;;2904:1;2914:1214;2928:6;2925:1;2922:13;2914:1214;;;3012:3;2999:17;2991:6;2987:30;3040:6;3153:2;3084:66;3079:2;3074:3;3070:12;3066:85;3062:94;3059:2;;;3169:1;3166;3159:12;3059:2;3196:4;3226:18;3241:2;3226:18;:::i;:::-;3271:33;3300:2;3296;3292:11;3271:33;:::i;:::-;3264:5;3257:48;3328:2;3387;3383;3379:11;3366:25;3361:2;3354:5;3350:14;3343:49;3415:2;3453:48;3497:3;3492:2;3488;3484:11;3453:48;:::i;:::-;3448:2;3441:5;3437:14;3430:72;3559:2;3555;3551:11;3538:25;3533:2;3526:5;3522:14;3515:49;;;3614:3;3610:2;3606:12;3593:26;3577:42;;3642:18;3689:2;3679:8;3676:16;3673:2;;;3705:1;3702;3695:12;3673:2;3747:67;3810:3;3805:2;3794:8;3790:2;3786:17;3782:26;3747:67;:::i;:::-;3740:4;3729:16;;3722:93;3857:11;;;3844:25;;3885:16;;;3882:2;;;3914:1;3911;3904:12;3882:2;;3955:67;4018:3;4013:2;4002:8;3998:2;3994:17;3990:26;3955:67;:::i;:::-;3949:3;3938:15;;3931:92;4036:18;;-1:-1:-1;;;4074:12:11;;;;4106;;;;2950:1;2943:9;2914:1214;;4139:162;4206:20;;4262:13;;4255:21;4245:32;;4235:2;;4291:1;4288;4281:12;4306:161;4373:20;;4306:161;4422:20;;;4412:31;;4402:2;;4457:1;4454;4447:12;4472:581;;4570:3;4563:4;4555:6;4551:17;4547:27;4537:2;;4592:5;4585;4578:20;4537:2;4636:6;4623:20;4666:18;4658:6;4655:30;4652:2;;;4688:9;4652:2;4717:117;4828:4;4759:66;4752:4;4744:6;4740:17;4736:90;4732:101;4717:117;:::i;:::-;4708:126;;4857:6;4850:5;4843:21;4911:3;4904:4;4895:6;4887;4883:19;4879:30;4876:39;4873:2;;;4928:1;4925;4918:12;4873:2;4991:6;4984:4;4976:6;4972:17;4965:4;4958:5;4954:16;4941:57;5045:1;5018:18;;;5038:4;5014:29;5007:40;5022:5;4527:526;-1:-1:-1;;4527:526:11:o;5058:1696::-;;5152:6;5195:2;5183:9;5178:3;5174:19;5170:28;5167:2;;;5215:5;5208;5201:20;5167:2;5241:18;5256:2;5241:18;:::i;:::-;5232:27;;;5295:9;5282:23;5324:18;5365:2;5357:6;5354:14;5351:2;;;5381:1;5378;5371:12;5351:2;5408:48;5452:3;5443:6;5432:9;5428:22;5408:48;:::i;:::-;5401:5;5394:63;5489:39;5524:2;5513:9;5509:18;5489:39;:::i;:::-;5484:2;5477:5;5473:14;5466:63;5561:39;5596:2;5585:9;5581:18;5561:39;:::i;:::-;5556:2;5549:5;5545:14;5538:63;5633:38;5667:2;5656:9;5652:18;5633:38;:::i;:::-;5628:2;5621:5;5617:14;5610:62;5705:39;5739:3;5728:9;5724:19;5705:39;:::i;:::-;5699:3;5692:5;5688:15;5681:64;5778:39;5812:3;5801:9;5797:19;5778:39;:::i;:::-;5772:3;5765:5;5761:15;5754:64;5851:38;5884:3;5873:9;5869:19;5851:38;:::i;:::-;5845:3;5838:5;5834:15;5827:63;5923:41;5959:3;5948:9;5944:19;5923:41;:::i;:::-;5917:3;5910:5;5906:15;5899:66;5984:3;5974:13;;6019:38;6053:2;6042:9;6038:18;6019:38;:::i;:::-;6014:2;6007:5;6003:14;5996:62;6077:3;6067:13;;6112:38;6146:2;6135:9;6131:18;6112:38;:::i;:::-;6107:2;6100:5;6096:14;6089:62;6170:3;6160:13;;6205:38;6239:2;6228:9;6224:18;6205:38;:::i;:::-;6200:2;6193:5;6189:14;6182:62;6263:3;6253:13;;6298:38;6332:2;6321:9;6317:18;6298:38;:::i;:::-;6293:2;6286:5;6282:14;6275:62;6356:3;6346:13;;6391:40;6427:2;6416:9;6412:18;6391:40;:::i;:::-;6386:2;6379:5;6375:14;6368:64;6451:3;6441:13;;6486:40;6522:2;6511:9;6507:18;6486:40;:::i;:::-;6481:2;6474:5;6470:14;6463:64;6546:3;6536:13;;6602:2;6591:9;6587:18;6574:32;6631:2;6621:8;6618:16;6615:2;;;6647:1;6644;6637:12;6615:2;6683:64;6743:3;6732:8;6721:9;6717:24;6683:64;:::i;:::-;6678:2;6671:5;6667:14;6660:88;;;;5132:1622;;;;:::o;6759:548::-;;6866:4;6854:9;6849:3;6845:19;6841:30;6838:2;;;6888:5;6881;6874:20;6838:2;6925;6919:9;6967:4;6959:6;6955:17;7038:6;7026:10;7023:22;7002:18;6990:10;6987:34;6984:62;6981:2;;;7049:9;6981:2;7076;7069:22;7109:6;-1:-1:-1;7109:6:11;7139:29;7158:9;7139:29;:::i;:::-;7131:6;7124:45;7230:2;7219:9;7215:18;7202:32;7197:2;7189:6;7185:15;7178:57;7296:2;7285:9;7281:18;7268:32;7263:2;7255:6;7251:15;7244:57;;6828:479;;;;:::o;7312:163::-;7381:20;;7441:8;7430:20;;7420:31;;7410:2;;7465:1;7462;7455:12;7480:167;7549:20;;7609:12;7598:24;;7588:35;;7578:2;;7637:1;7634;7627:12;7652:158;7720:20;;7780:4;7769:16;;7759:27;;7749:2;;7800:1;7797;7790:12;7815:2129;;;8065:2;8053:9;8044:7;8040:23;8036:32;8033:2;;;8086:6;8078;8071:22;8033:2;8131:9;8118:23;8160:18;8201:2;8193:6;8190:14;8187:2;;;8222:6;8214;8207:22;8187:2;8265:6;8254:9;8250:22;8240:32;;8310:7;8303:4;8299:2;8295:13;8291:27;8281:2;;8337:6;8329;8322:22;8281:2;8382;8369:16;8405:69;8420:53;8466:6;8420:53;:::i;8405:69::-;8508:19;;;8546:4;8566:12;;;;8496:3;8598:11;;;8627:6;8642:1057;8656:6;8653:1;8650:13;8642:1057;;;8736:3;8723:17;8719:2;8715:26;8852:4;8783:66;8778:2;8769:7;8765:16;8761:89;8757:100;8754:2;;;8875:6;8867;8860:22;8754:2;8917;8911:9;8963:4;8955:6;8951:17;9022:6;9010:10;9007:22;9002:2;8990:10;8987:18;8984:46;8981:2;;;9033:9;8981:2;9064;9057:22;9118:11;;;9105:25;9143:33;9105:25;9143:33;:::i;:::-;9189:21;;9260:2;9252:11;;9239:25;9280:16;;;9277:2;;;9314:6;9306;9299:22;9277:2;9360:72;9424:7;9419:2;9408:8;9404:2;9400:17;9396:26;9360:72;:::i;:::-;9355:2;9347:6;9343:15;9336:97;;9470:30;9496:2;9492;9488:11;9470:30;:::i;:::-;9465:2;9457:6;9453:15;9446:55;9538:54;9584:7;9577:4;9573:2;9569:13;9538:54;:::i;:::-;9533:2;9521:15;;9514:79;9606:19;;-1:-1:-1;9645:12:11;;;;9677;;;;8678:1;8671:9;8642:1057;;;-1:-1:-1;9718:5:11;;-1:-1:-1;9761:18:11;;9748:32;;-1:-1:-1;;;;9792:16:11;;;9789:2;;;9826:6;9818;9811:22;9789:2;;9854:84;9930:7;9919:8;9908:9;9904:24;9854:84;:::i;:::-;9844:94;;;8023:1921;;;;;:::o;9949:194::-;;10072:2;10060:9;10051:7;10047:23;10043:32;10040:2;;;10093:6;10085;10078:22;10040:2;-1:-1:-1;10121:16:11;;10030:113;-1:-1:-1;10030:113:11:o;10148:129::-;10227:42;10216:54;10204:67;;10194:83::o;10282:458::-;;10378:5;10372:12;10405:6;10400:3;10393:19;10431:4;10460:2;10455:3;10451:12;10444:19;;10497:2;10490:5;10486:14;10518:3;10530:185;10544:6;10541:1;10538:13;10530:185;;;10620:13;;10616:2;10605:29;10593:42;;10655:12;;;;10690:15;;;;10566:1;10559:9;10530:185;;;-1:-1:-1;10731:3:11;;10348:392;-1:-1:-1;;;;;10348:392:11:o;10745:93::-;10817:13;10810:21;10798:34;;10788:50::o;10843:92::-;10919:1;10908:20;10896:33;;10886:49::o;10940:537::-;;11022:5;11016:12;11049:6;11044:3;11037:19;11074:3;11086:162;11100:6;11097:1;11094:13;11086:162;;;11162:4;11218:13;;;11214:22;;11208:29;11190:11;;;11186:20;;11179:59;11115:12;11086:162;;;11266:6;11263:1;11260:13;11257:2;;;11332:3;11325:4;11316:6;11311:3;11307:16;11303:27;11296:40;11257:2;-1:-1:-1;11391:2:11;11379:15;11396:66;11375:88;11366:98;;;;11466:4;11362:109;;10992:485;-1:-1:-1;;10992:485:11:o;11482:220::-;11564:12;;11578:4;11560:23;11548:36;;11633:4;11622:16;;;11616:23;11600:14;;;11593:47;11689:4;11678:16;;;11672:23;11656:14;;11649:47;11538:164::o;11707:94::-;11785:8;11774:20;11762:33;;11752:49::o;11806:98::-;11884:12;11873:24;11861:37;;11851:53::o;11909:77::-;11978:4;11967:16;11955:29;;11953:33::o;11991:1500::-;;12395:3;12384:9;12380:19;12426:6;12415:9;12408:25;12452:2;12463:58;12517:2;12506:9;12502:18;12494:6;12463:58;:::i;:::-;12552:3;12537:19;;12530:35;;;12602:3;12596;12581:19;;12574:32;12655:13;;12677:22;;;;12757:15;;;;12730:3;12715:19;;;12790:4;12803:218;12817:6;12814:1;12811:13;12803:218;;;12882:13;;12897:42;12878:62;12866:75;;12996:15;;;;12961:12;;;;12839:1;12832:9;12803:218;;;-1:-1:-1;;13058:19:11;;;13052:3;13037:19;;13030:48;13128:13;;13150:21;;;13189:12;;;;-1:-1:-1;13226:15:11;;;;13261:4;13274:189;13290:8;13285:3;13282:17;13274:189;;;13359:15;;13345:30;;13397:14;;;;13436:17;;;;13318:1;13309:11;13274:189;;;-1:-1:-1;13480:5:11;;12356:1135;-1:-1:-1;;;;;;;;;;12356:1135:11:o;13496:2569::-;;13791:3;13780:9;13773:22;13830:6;13824:13;13856:6;13899:2;13893:3;13882:9;13878:19;13871:31;13925:54;13974:3;13963:9;13959:19;13945:12;13925:54;:::i;:::-;13911:68;;14028:4;14020:6;14016:17;14010:24;14043:56;14094:3;14083:9;14079:19;14063:14;14043:56;:::i;:::-;;14148:4;14140:6;14136:17;14130:24;14163:56;14214:3;14203:9;14199:19;14183:14;14163:56;:::i;:::-;;14268:4;14260:6;14256:17;14250:24;14293:3;14305:54;14355:2;14344:9;14340:18;14324:14;14305:54;:::i;:::-;14408:4;14400:6;14396:17;14390:24;14368:46;;14433:3;14445:54;14495:2;14484:9;14480:18;14464:14;14445:54;:::i;:::-;14548:3;14540:6;14536:16;14530:23;14508:45;;14572:3;14584:54;14634:2;14623:9;14619:18;14603:14;14584:54;:::i;:::-;14687:3;14679:6;14675:16;14669:23;14647:45;;14711:3;14723:53;14772:2;14761:9;14757:18;14741:14;14723:53;:::i;:::-;14825:3;14817:6;14813:16;14807:23;14785:45;;14849:3;14861:56;14913:2;14902:9;14898:18;14882:14;14861:56;:::i;:::-;14954:15;;;14948:22;;-1:-1:-1;14989:3:11;;15001:54;15036:18;;;14948:22;15001:54;:::i;:::-;15092:15;;;15086:22;;-1:-1:-1;15127:3:11;;15139:54;15174:18;;;15086:22;15139:54;:::i;:::-;15243:2;15235:6;15231:15;15225:22;15202:45;;15256:55;15307:2;15296:9;15292:18;15275:15;15256:55;:::i;:::-;15361:2;15353:6;15349:15;15343:22;15320:45;;15374:56;15425:3;15414:9;15410:19;15393:15;15374:56;:::i;:::-;15468:15;;15462:22;;-1:-1:-1;15493:58:11;;-1:-1:-1;;15546:3:11;15531:19;;15462:22;15493:58;:::i;:::-;15601:2;15593:6;15589:15;15583:22;15560:45;;15614:58;15667:3;15656:9;15652:19;15635:15;15614:58;:::i;:::-;15722:2;15714:6;15710:15;15704:22;15681:45;;;;;15791:66;15779:9;15771:6;15767:22;15763:95;15757:3;15746:9;15742:19;15735:124;15876:58;15927:6;15910:15;15876:58;:::i;:::-;15868:66;;;;15943:47;15984:4;15973:9;15969:20;15961:6;15943:47;:::i;:::-;15999:60;16053:4;16042:9;16038:20;16030:6;15999:60;:::i;:::-;13763:2302;;;;;;:::o;16070:242::-;16140:2;16134:9;16170:17;;;16217:18;16202:34;;16238:22;;;16199:62;16196:2;;;16264:9;16196:2;16291;16284:22;16114:198;;-1:-1:-1;16114:198:11:o;16317:183::-;;16416:18;16408:6;16405:30;16402:2;;;16438:9;16402:2;-1:-1:-1;16489:4:11;16470:17;;;16466:28;;16392:108::o;16505:156::-;16593:42;16586:5;16582:54;16575:5;16572:65;16562:2;;16651:1;16648;16641:12;16562:2;16552:109;:::o"
			}
		}
	},
	"sourceTreeHashHex": "0xb877cd968cc7262d811f16cd67dd7d87b71bbf076c5ee07cb72374c65fc4fa84",
	"sources": {
		"./DigiOptionsMeta.sol": {
			"id": 4,
			"content": "/*\n User Driven Option Markets Contract used by https://www.digioptions.com\n\n This is just a helper contract which allows to create, register ans settle\n multiple markets within one transaction.\n\n Copyright (c) [www.digioptions.com](https://www.digioptions.com)\n\n Designed to work with signatures from [www.factsigner.com](https://www.factsigner.com)\n\n Public repository:\n https://github.com/berlincode/digioptions-contracts.js\n\n elastic.code@gmail.com\n mail@digioptions.com\n\n SPDX-License-Identifier: MIT\n\n MIT License\n\n Copyright (c) digioptions.com (https://www.digioptions.com)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n*/\n\npragma solidity >=0.7.0;\npragma experimental ABIEncoderV2;\n\n//import \"./DigiOptionsBaseInterface.sol\";\nimport \"./DigiOptionsMarkets.sol\";\nimport \"./DigiOptionsMarketLister.sol\";\nimport \"./DigiOptionsLib.sol\";\n\n\ncontract DigiOptionsMeta {\n\n    /* This is the constructor */\n    //constructor () public {\n    //}\n\n    /* TODO re-enabled after 0x-tools support solc-0.6.0\n    // default fallback\n    receive () external payable {\n        revert();\n    }\n    */\n\n    struct CreateAndRegisterData {\n        DigiOptionsMarkets digiOptionsMarkets;\n        DigiOptionsLib.MarketBaseData marketBaseData;\n        bool testMarket;\n        FactsignerVerify.Signature signature;\n    }\n\n    struct SettlementData {\n        DigiOptionsMarkets digiOptionsMarkets;\n        bytes32 marketHash; /* market to settle */\n        FactsignerVerify.Signature signature;\n        int256 value;\n        address[] users;\n        bytes32[] offerHash;\n    }\n\n    function createRegisterAndSettlement (\n        CreateAndRegisterData[] memory createAndRegisterDataList,\n        SettlementData[] memory settlementDataList\n    ) public // this should be external (see https://github.com/ethereum/solidity/issues/5479)\n    {\n\n        for (uint256 createAndRegisterDataIdx=0; createAndRegisterDataIdx < createAndRegisterDataList.length; createAndRegisterDataIdx++) {\n            CreateAndRegisterData memory createAndRegisterData = createAndRegisterDataList[createAndRegisterDataIdx];\n\n            /*\n            uint256[] memory infoValues = createAndRegisterData.digiOptionsMarkets.getContractInfo();\n            DigiOptionsMarkets digiOptionsMarketsX = DigiOptionsMarkets(address(infoValues[uint256(DigiOptionsLib.InfoValues.DIGIOPTIONS_MARKETS_ADDR_IDX)]));\n            if (infoValues[uint256(DigiOptionsLib.InfoValues.CONTRACT_TYPE_IDX)] == uint256(DigiOptionsLib.ContractType.DIGIOPTIONSMARKETLISTER))\n            {\n            }\n            bytes32 marketHash = createAndRegisterData.digiOptionsMarkets.createMarket(\n                createAndRegisterData.marketBaseData,\n                createAndRegisterData.testMarket,\n                createAndRegisterData.signature\n            );\n\n\n                createAndRegisterData.digiOptionsMarketLister[marketListerIdx].registerMarket(\n                    marketHash,\n                    createAndRegisterData.testMarket\n                );\n            */\n\n            createAndRegisterData.digiOptionsMarkets.createMarket(\n                createAndRegisterData.marketBaseData,\n                createAndRegisterData.testMarket,\n                createAndRegisterData.signature\n            );\n        }\n        for (uint256 settlementDataIdx=0; settlementDataIdx < settlementDataList.length; settlementDataIdx++) {\n            SettlementData memory settlementData = settlementDataList[settlementDataIdx];\n            settlementData.digiOptionsMarkets.settlement(\n                settlementData.marketHash, // market to settle\n                settlementData.signature,\n                settlementData.value,\n                settlementData.users,\n                settlementData.offerHash\n            );\n        }\n    }\n\n}\n"
		},
		"./DigiOptionsMarkets.sol": {
			"id": 3,
			"content": "/*\n freedex-protocol / User Driven Option Markets Contract used by https://www.digioptions.com\n\n Designed to work with signatures from [www.factsigner.com](https://www.factsigner.com)\n\n Public repository:\n https://github.com/berlincode/digioptions-contracts.js\n\n elastic.code@gmail.com\n mail@digioptions.com\n\n SPDX-License-Identifier: MIT\n\n MIT License\n\n Copyright (c) digioptions.com (https://www.digioptions.com)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n*/\n\npragma solidity >=0.7.0;\npragma experimental ABIEncoderV2;\n\nimport \"./DigiOptionsBaseInterface.sol\";\nimport \"./DigiOptionsLib.sol\";\nimport \"./SafeCast.sol\";\nimport \"factsigner/contracts/FactsignerDefines.sol\";\nimport \"factsigner/contracts/FactsignerVerify.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/math/SignedSafeMath.sol\";\n\n\ncontract DigiOptionsMarkets is DigiOptionsBaseInterface {\n    using SafeCast for int256;\n    using SafeCast for uint256;\n    using SafeCast for int128;\n    using SafeCast for uint128;\n    using SafeMath for uint256;\n    using SignedSafeMath for int256;\n\n    uint256 constant private VERSION = (\n        (0 << 32) + /* major */\n        (53 << 16) + /* minor */\n        0 /* bugfix */\n    );\n    uint256 constant private OFFER_MAX_BLOCKS_INTO_FUTURE = 12; // increase for e.g. thundercore\n\n    // each atomic option is worth 10**9 = 1000000000 wei in case of win\n    uint256 constant private ATOMIC_OPTION_PAYOUT_WEI_EXP = 9;\n    int256 constant private ATOMIC_OPTION_PAYOUT_WEI = int256(uint256(10)**ATOMIC_OPTION_PAYOUT_WEI_EXP);\n\n    uint8 constant private RANGESTATE_NOT_USED = 0;\n    uint8 constant private RANGESTATE_TRADED = 1;\n    uint8 constant private RANGESTATE_PAYED_OUT = 2;\n\n    int256 constant private INT256_MAX = int256(~(uint256(1) << 255));\n\n    struct Position {\n        int128 value;\n        uint8 rangeState;\n    }\n\n    struct Market {\n        DigiOptionsLib.MarketState marketState;\n        DigiOptionsLib.MarketBaseData marketBaseData;\n        mapping(address => mapping(uint256 => Position)) positions; // position mapping for each user\n\n        mapping(bytes32 => uint256)  offersAccepted; // remember how many options from an offer are already taken\n    }\n\n    struct OrderOffer {\n        bytes32 marketHash;\n        uint16 optionID;\n        bool buy; // does the offer owner want to buy or sell options\n        uint256 pricePerOption;\n        uint256 size;\n        uint256 offerID;\n        uint256 blockExpires;\n        address offerOwner;\n    }\n\n    struct OrderOfferSigned {\n        OrderOffer orderOffer;\n        DigiOptionsLib.Signature signature;\n    }\n\n    /* variables */\n    uint256 private timestamp;\n    uint256 private blockNumber;\n    uint256 private existingMarkets; /* one bit for each marketCategory and marketInterval */\n\n    mapping(address => uint256) internal liquidityUser;\n    mapping(bytes32 => Market) internal markets;\n\n    mapping(address => uint32) internal userMarketsIdx;\n\n    event MarketCreate(\n        bytes32 marketKey, /* marketsContract stores marketHash ; marketListerContract stores baseMarketHash */\n        uint48 indexed expirationDatetimeFilter,\n        uint40 expirationDatetime,\n        uint8 indexed marketInterval,\n        uint8 indexed marketCategory,\n        string underlyingString\n    );\n    event MarketSettlement(\n        bytes32 marketHash\n    );\n    // this may result in liquidity change\n    event LiquidityAddWithdraw(address indexed addr, uint256 datetime, int256 amount);\n    event PositionChange(\n        // TODO optimize order for gas costs possible?\n        uint256 indexed buyer,\n        uint256 indexed seller,\n        bytes32 indexed marketHash,\n        uint256 datetime, // TODO we might remove this and use info from block\n        uint16 optionID,\n        uint256 pricePerOption,\n        uint256 size,\n        bytes32 offerHash\n    );\n\n    /* This is the constructor */\n    constructor ()\n    {\n        blockNumber = block.number;\n        timestamp = block.timestamp;\n    }\n\n    /* TODO re-enabled after 0x-tools support solc-0.6.0\n    // default fallback\n    receive ()\n        external\n        payable\n    {\n        liquidityAdd();\n    }\n    */\n\n    function getContractInfo (\n    )\n        external\n        override\n        virtual\n        returns (uint256[] memory contractInfoValues)\n    {\n        uint256[] memory infoValues = new uint[](uint256(DigiOptionsLib.InfoValues.MAX));\n\n        infoValues[uint256(DigiOptionsLib.InfoValues.CONTRACT_TYPE_IDX)] = uint256(DigiOptionsLib.ContractType.DIGIOPTIONSMARKETS);\n        infoValues[uint256(DigiOptionsLib.InfoValues.VERSION_MARKET_LISTER_IDX)] = 0; // versionMarketLister\n        infoValues[uint256(DigiOptionsLib.InfoValues.VERSION_MARKETS_IDX)] = VERSION; // versionMarkets\n        infoValues[uint256(DigiOptionsLib.InfoValues.DIGIOPTIONS_MARKETS_ADDR_IDX)] = uint256(uint160(address(this))); // digiOptionsMarketsAddr\n        infoValues[uint256(DigiOptionsLib.InfoValues.BLOCK_NUMBER_CREATED_IDX)] = blockNumber; // blockNumberCreated\n        infoValues[uint256(DigiOptionsLib.InfoValues.TIMESTAMP_MARKET_CREATED_IDX)] = timestamp; // timestampMarketsCreated\n        infoValues[uint256(DigiOptionsLib.InfoValues.OFFER_MAX_BLOCKS_INTO_FUTURE_IDX)] = OFFER_MAX_BLOCKS_INTO_FUTURE;\n        infoValues[uint256(DigiOptionsLib.InfoValues.ATOMIC_OPTION_PAYOUT_WEI_EXP_IDX)] = ATOMIC_OPTION_PAYOUT_WEI_EXP;\n        infoValues[uint256(DigiOptionsLib.InfoValues.EXISTING_MARKETS_IDX)] = existingMarkets;\n\n        return infoValues;\n    }\n\n    function liquidityGet()\n        public\n        view\n        returns (uint256 liquidity)\n    {\n        return liquidityUser[msg.sender];\n    }\n\n    function liquidityWithdraw (uint256 amount) external {\n        require (amount <= liquidityUser[msg.sender], \"Not enough liquidity.\");\n\n        /* Remember to reduce the liquidity BEFORE */\n        /* sending to prevent re-entrancy attacks */\n        liquidityUser[msg.sender] = liquidityUser[msg.sender].sub(amount);\n        payable(msg.sender).transfer(amount);\n        emit LiquidityAddWithdraw(msg.sender, block.timestamp, -int256(amount));\n    }\n\n    /* returns all relevant market data - if marketHash does not exist marketBaseData.expirationDatetime is 0*/\n    function getMarketDataByMarketHash (\n        address addr, // marketData.userState for this address\n        bytes32 marketHash\n    )\n        public\n        view\n        override\n        virtual\n        returns (DigiOptionsLib.MarketData memory marketData)\n    {\n        Market storage market = markets[marketHash];\n        DigiOptionsLib.MarketBaseData memory marketBaseData = market.marketBaseData;\n        DigiOptionsLib.MarketState memory marketState = market.marketState;\n\n        return DigiOptionsLib.MarketData({\n            marketBaseData: marketBaseData,\n            marketState: marketState,\n            marketHash: marketHash,\n            userState: getUserState(addr, market),\n            testMarket: false // only used by MarketLister\n        });\n    }\n\n    function getMarketBaseDataByMarketHash (bytes32 marketHash)\n        public\n        view\n        returns (DigiOptionsLib.MarketBaseData memory marketBaseData)\n    {\n        Market storage market = markets[marketHash];\n        return market.marketBaseData;\n    }\n\n    function getMarketDataListByMarketKeys (\n        address addr, // marketData.userState for this address\n        bytes32[] calldata marketKeys // marketsContract uses marketHash / marketListerContract uses baseMarketHash\n    )\n        external\n        view\n        override\n        virtual\n        returns (DigiOptionsLib.MarketData[] memory marketDataList)\n    {\n        marketDataList = new DigiOptionsLib.MarketData[](marketKeys.length);\n        uint256 idx;\n\n        for (idx= 0 ; idx < marketKeys.length ; idx++) {\n            marketDataList[idx] = getMarketDataByMarketHash(addr, marketKeys[idx]);\n        }\n        return marketDataList;\n    }\n\n    function calcMarketInterval (\n        uint40 expirationDatetime\n    )\n        external\n        view\n        override\n        virtual\n        returns (uint8 interval)\n    {\n        return DigiOptionsLib.calcMarketInterval(expirationDatetime);\n    }\n\n    function getUserState (\n        address addr,\n        Market storage market\n    )\n        internal\n        view\n        returns (DigiOptionsLib.UserState userState)\n    {\n        mapping(uint256 => Position) storage positions = market.positions[addr];\n\n        if (market.marketState.settled){\n            Position memory winningPosition = positions[market.marketState.winningOptionID];\n            if (\n                (winningPosition.rangeState == RANGESTATE_PAYED_OUT) ||\n                ((winningPosition.rangeState == RANGESTATE_TRADED) && (winningPosition.value == 0))  // TODO fixme == 0\n                ){\n                return DigiOptionsLib.UserState.PAYED_OUT;\n            }\n        }\n        // TODO for named markets one excess optionID is checked (which should not be a problem)\n        for (uint256 optionID = 0; optionID <= market.marketBaseData.strikes.length; optionID++) {\n            if (positions[optionID].rangeState > RANGESTATE_NOT_USED) {\n                return DigiOptionsLib.UserState.EXISTS;\n            }\n        }\n        return DigiOptionsLib.UserState.NONE;\n    }\n\n    function getLiquidityAndPositions (bytes32 marketHash)\n        external\n        view\n        returns (uint256 liquidity, Position[] memory positions, DigiOptionsLib.UserState userState)\n    {\n        Market storage market = markets[marketHash];\n        DigiOptionsLib.MarketBaseData memory marketBaseData = market.marketBaseData;\n\n        // return user's total contract liquidity and positions for selected market\n\n        // TODO for named markets one excess optionID is checked (which should not be a problem)\n        positions = new Position[](marketBaseData.strikes.length + 1);\n\n        for (uint256 optionID = 0; optionID <= marketBaseData.strikes.length; optionID++) {\n            positions[optionID] = market.positions[msg.sender][optionID];\n        }\n        return (\n            liquidityUser[msg.sender],\n            positions,\n            getUserState(msg.sender, market)\n        );\n    }\n\n    function liquidityAdd ()\n        public\n        payable\n    {\n        if (msg.value > 0) {\n            liquidityUser[msg.sender] = liquidityUser[msg.sender].add(msg.value);\n            emit LiquidityAddWithdraw(msg.sender, block.timestamp, int256(msg.value));\n        }\n    }\n\n    function liquidityAddFor (address user)\n        public\n        payable\n    {\n        if (msg.value > 0) {\n            liquidityUser[user] = liquidityUser[user].add(msg.value);\n            emit LiquidityAddWithdraw(user, block.timestamp, int256(msg.value));\n        }\n    }\n\n    function createMarket (\n        DigiOptionsLib.MarketBaseData memory marketBaseData,\n        bool testMarket,\n        FactsignerVerify.Signature memory signature\n    )\n        public // this should be external (see https://github.com/ethereum/solidity/issues/5479)\n        override\n        returns (bytes32 marketHash)\n    {\n        assert(marketBaseData.expirationDatetime != 0);\n\n        { // scope here to safe stack space\n        bytes32 factHash = DigiOptionsLib.calcFactHash(marketBaseData);\n        require(\n            FactsignerVerify.verifyFactsignerMessage(\n                factHash,\n                signature\n            ) == marketBaseData.signerAddr,\n            \"Signature invalid.\"\n        );\n\n        marketHash = DigiOptionsLib.calcMarketHash(marketBaseData);\n        }\n\n        /* Check that the market does not already exists */\n        if (markets[marketHash].marketBaseData.expirationDatetime != 0)\n            return marketHash;\n\n        assert(marketBaseData.baseUnitExp == 18); // TODO remove this in the future\n\n        assert(marketBaseData.marketCategory < 64); // limit marketCategory (for now)\n\n        //assert((uint256(marketBaseData.transactionFee0)).add(uint256(marketBaseData.transactionFee1)).add(uint256(marketBaseData.transactionFeeSigner)) <= 500);\n\n        uint256 optionID;\n        if ((marketBaseData.config & uint8(FactsignerDefines.ConfigMask.ConfigMarketTypeIsStrikedMask)) != 0) {\n            /* striked market */\n            /* check that we have at least one strike */\n            assert(marketBaseData.strikes.length > 0);\n            assert(marketBaseData.strikes.length < 32765); // our first optionID is 0\n\n            /* check strikes are ordered */\n            for (optionID = 1; optionID < marketBaseData.strikes.length; optionID++) {\n                assert(marketBaseData.strikes[optionID-1] < marketBaseData.strikes[optionID]);\n            }\n\n            /* check that the final settlement precision high enough for the supplied strikes */\n            assert(int16(uint16(marketBaseData.baseUnitExp)) >= marketBaseData.ndigit);\n            for (optionID = 0; optionID < marketBaseData.strikes.length; optionID++) {\n                assert((marketBaseData.strikes[optionID] % int256(10**uint256((int256(uint256(marketBaseData.baseUnitExp))-marketBaseData.ndigit)))) == 0);\n            }\n        } else {\n            /* named market */\n            /* check that we have at least two named ranges */\n            assert(marketBaseData.strikes.length > 1);\n            assert(marketBaseData.strikes.length <= 32765); // our first optionID is 0\n        }\n        assert(marketBaseData.marketCategory < 32); // limit marketCategory (for now)\n\n        uint256 existingMarketsBit = (1 << uint256(marketBaseData.marketInterval)) << (marketBaseData.marketCategory * 8);\n        if (existingMarkets & existingMarketsBit == 0) {\n            existingMarkets = existingMarkets | existingMarketsBit;\n        }\n\n        uint8 marketIntervalForEventFilter = DigiOptionsLib.calcMarketInterval(marketBaseData.expirationDatetime);\n        if ((marketBaseData.config & uint8(FactsignerDefines.ConfigMask.ConfigIntervalTypeIsUsedMask) != 0)) {\n            /* interval used */\n            assert(marketBaseData.marketInterval == marketIntervalForEventFilter);\n        } else {\n            /* interval unused */\n            assert(marketBaseData.marketInterval == uint8(FactsignerDefines.MarketInterval.NONE));\n        }\n\n        markets[marketHash].marketBaseData = marketBaseData;\n\n\n        emit MarketCreate(\n            marketHash, // marketKey\n            ((marketBaseData.expirationDatetime/DigiOptionsLib.getDivider(marketIntervalForEventFilter)) << 8) + marketIntervalForEventFilter,\n            marketBaseData.expirationDatetime,\n            marketBaseData.marketInterval,\n            marketBaseData.marketCategory,\n            marketBaseData.underlyingString\n        );\n        return marketHash;\n    }\n\n    function settlement (\n        bytes32 marketHash, /* market to settle */\n        FactsignerVerify.Signature memory signature,\n        int256 value,\n        address[] memory users,\n        bytes32[] memory offerHash\n    )\n        public // this should be external (see https://github.com/ethereum/solidity/issues/5479)\n    {\n        Market storage market = markets[marketHash];\n\n        /* anybody with access to the signed value (from signerAddr) can settle the market */\n\n        require(\n            FactsignerVerify.verifyFactsignerMessage(\n                keccak256(\n                    abi.encodePacked(\n                        DigiOptionsLib.calcFactHash(market.marketBaseData),\n                        value,\n                        uint16(FactsignerDefines.SettlementType.FINAL)\n                    )\n                ),\n                signature\n            ) == market.marketBaseData.signerAddr,\n            \"Signature invalid.\"\n        );\n\n        // just return if already settled\n        if (market.marketState.settled)\n            return;\n\n        uint256 winningOptionID;\n        uint256 optionID;\n        if ((market.marketBaseData.config & uint8(FactsignerDefines.ConfigMask.ConfigMarketTypeIsStrikedMask)) != 0) {\n            /* striked market */\n            winningOptionID = market.marketBaseData.strikes.length;\n            for (optionID = 0; optionID < market.marketBaseData.strikes.length; optionID++) {\n                if (value < market.marketBaseData.strikes[optionID]) {\n                    winningOptionID = optionID;\n                    break;\n                }\n            }\n        } else {\n            /* named market */\n            winningOptionID = 0; // default in case nothing matches\n            for (optionID = 0; optionID < market.marketBaseData.strikes.length; optionID++) {\n                if (value == market.marketBaseData.strikes[optionID]) {\n                    winningOptionID = optionID;\n                    break;\n                }\n            }\n        }\n        // TODO one transaction\n        market.marketState.winningOptionID = uint16(winningOptionID);\n        market.marketState.settled = true;\n\n        uint256 feeSum = uint256(market.marketBaseData.transactionFee0).add(uint256(market.marketBaseData.transactionFee1)).add(uint256(market.marketBaseData.transactionFeeSigner));\n        uint256 feePart = uint256(market.marketState.fee) / feeSum;\n        liquidityUser[market.marketBaseData.feeTaker0] = liquidityUser[market.marketBaseData.feeTaker0].add(feePart.mul(market.marketBaseData.transactionFee0));\n        liquidityUser[market.marketBaseData.feeTaker1] = liquidityUser[market.marketBaseData.feeTaker1].add(feePart.mul(market.marketBaseData.transactionFee1));\n        liquidityUser[market.marketBaseData.signerAddr] = liquidityUser[market.marketBaseData.signerAddr].add(feePart.mul(market.marketBaseData.transactionFeeSigner));\n\n        emit MarketSettlement(marketHash);\n\n        freeLiquidity(\n            marketHash,\n            users,\n            offerHash\n        );\n    }\n\n    function freeLiquidity(\n        bytes32 marketHash,\n        address[] memory users,\n        bytes32[] memory offerHash\n    )\n        public\n    {\n        Market storage market = markets[marketHash];\n\n        DigiOptionsLib.MarketState memory marketState = market.marketState;\n\n        // TODO fetch marketState once\n        uint16 winningOptionID = marketState.winningOptionID;\n        require(marketState.settled == true, \"Market not yet settled.\");\n\n        uint256 idx;\n        int256 minPosition;\n        for (idx = 0; idx < users.length; idx++) {\n\n            address user = users[idx];\n            //mapping(uint256 => Position) storage positions = market.positions[user];\n\n            if (getUserState(user, market) != DigiOptionsLib.UserState.PAYED_OUT) {\n\n                minPosition = getMinPosition(\n                    market,\n                    user\n                );\n\n                int256 pos = int256(market.positions[user][winningOptionID].value);\n                int256 size = pos.sub(minPosition);\n\n                market.positions[user][winningOptionID].rangeState = RANGESTATE_PAYED_OUT;\n\n                liquidityUser[user] = liquidityUser[user].add(size.mul(ATOMIC_OPTION_PAYOUT_WEI).castToUint());\n\n                // TODO a cheaper event would do too\n                if (pos >= 0) {\n                    emit PositionChange(\n                        //uint256(buyer) + uint256(market.userData[msg.sender].state),\n                        0, // indicates final payout\n                        uint256(uint160(user)),\n                        marketHash,\n                        block.timestamp,\n                        winningOptionID,\n                        uint256(ATOMIC_OPTION_PAYOUT_WEI),\n                        uint256(pos),\n                        0\n                    );\n                } else {\n                    emit PositionChange(\n                        //uint256(buyer) + uint256(market.userData[msg.sender].state),\n                        uint256(uint160(user)),\n                        0, // indicates final payout\n                        marketHash,\n                        block.timestamp,\n                        winningOptionID,\n                        uint256(ATOMIC_OPTION_PAYOUT_WEI),\n                        uint256(-pos),\n                        0\n                    );\n                }\n            }\n\n        }\n    }\n\n    function orderExecuteTest (\n        OrderOfferSigned memory orderOfferSigned,\n        uint256 sizeAccept // TODO rename to sizeAcceptMax?\n    )\n        public\n        view\n        returns (\n            uint256 sizeAcceptPossible,\n            bytes32 offerHash,\n            int256 liquidityOfferOwner, // only valid if sizeAcceptPossible > 0\n            int256 liquidityOfferTaker, // only valid if sizeAcceptPossible > 0\n            uint256 transactionFeeAmount // only valid if sizeAcceptPossible > 0\n        )\n    {\n\n        OrderOffer memory orderOffer = orderOfferSigned.orderOffer;\n        Market storage market = markets[orderOffer.marketHash];\n\n        offerHash = keccak256(\n            abi.encodePacked(\n                address(this), // this checks that the signature is valid only for this contract\n                orderOffer.marketHash,\n                orderOffer.optionID,\n                orderOffer.buy,\n                orderOffer.pricePerOption,\n                orderOffer.size,\n                orderOffer.offerID,\n                orderOffer.blockExpires,\n                orderOffer.offerOwner\n            )\n        );\n        if (!(\n                (DigiOptionsLib.verifyOffer(\n                    offerHash,\n                    orderOfferSigned.signature\n                ) == orderOffer.offerOwner)\n            )) {\n            sizeAccept = 0;\n            // TODO return immediately?\n        } else if (market.offersAccepted[offerHash].add(sizeAccept) > orderOffer.size) {\n            sizeAccept = orderOffer.size.sub(market.offersAccepted[offerHash]);\n        }\n\n        uint256 value = sizeAccept.mul(orderOffer.pricePerOption);\n\n        // TODO precalcuate sum of transactions fees\n        transactionFeeAmount = value.div(10000).mul(\n            uint256(market.marketBaseData.transactionFee0).add(uint256(market.marketBaseData.transactionFee1)).add(uint256(market.marketBaseData.transactionFeeSigner))\n        );\n\n        liquidityOfferOwner = getLiquidityAfterTrade(\n            market,\n            orderOffer.buy,\n            orderOffer,\n            orderOffer.offerOwner,\n            sizeAccept,\n            value\n        );\n        liquidityOfferTaker = getLiquidityAfterTrade(\n            market,\n            !orderOffer.buy,\n            orderOffer,\n            msg.sender,\n            sizeAccept,\n            value\n        ).sub(transactionFeeAmount.castToInt());\n\n        if (!(\n                (orderOffer.optionID <= market.marketBaseData.strikes.length) && // TODO depends on striked or named market?\n                (block.number <= orderOffer.blockExpires) &&\n                (block.number.add(OFFER_MAX_BLOCKS_INTO_FUTURE) >= orderOffer.blockExpires) &&\n                // offerTaker and offerOwner must not be the same (because liquidity is calculated seperately)\n                (orderOffer.offerOwner != msg.sender) &&\n                (liquidityOfferOwner >= int256(0)) &&\n                (liquidityOfferTaker >= int256(0))\n            )) {\n            sizeAccept = 0;\n        }\n        return (\n            sizeAccept,\n            offerHash,\n            liquidityOfferOwner, // only valid if sizeAcceptPossible > 0\n            liquidityOfferTaker, // only valid if sizeAcceptPossible > 0\n            transactionFeeAmount // only valid if sizeAcceptPossible > 0\n        );\n    }\n\n    function orderExecuteSingle (\n        OrderOfferSigned memory orderOfferSigned,\n        uint256 sizeAcceptMax /* maximum */\n    )\n        private\n        returns (uint256 sizeAcceptRemain)\n    {\n        OrderOffer memory orderOffer;\n\n        orderOffer = orderOfferSigned.orderOffer;\n        bytes32 offerHash;\n        uint256 sizeAcceptPossible;\n\n        Market storage market = markets[orderOffer.marketHash];\n\n        address buyer; // buys options / money giver\n        address seller; // sells options / money getter\n        if (orderOffer.buy) {\n            buyer = orderOffer.offerOwner;\n            seller = msg.sender;\n        } else {\n            buyer = msg.sender;\n            seller = orderOffer.offerOwner;\n        }\n\n        int256 liquidityOfferOwner; // only valid if sizeAcceptPossible > 0\n        int256 liquidityOfferTaker; // only valid if sizeAcceptPossible > 0\n        uint256 transactionFeeAmount; // only valid if sizeAcceptPossible > 0\n        (\n            sizeAcceptPossible,\n            offerHash,\n            liquidityOfferOwner, // only valid if sizeAcceptPossible > 0\n            liquidityOfferTaker, // only valid if sizeAcceptPossible > 0\n            transactionFeeAmount // only valid if sizeAcceptPossible > 0\n        ) = orderExecuteTest (\n            orderOfferSigned,\n            sizeAcceptMax\n        );\n        if (sizeAcceptPossible == 0) {\n            return sizeAcceptMax;\n        }\n\n        liquidityUser[orderOffer.offerOwner] = liquidityOfferOwner.castToUint();\n        liquidityUser[msg.sender] = liquidityOfferTaker.castToUint();\n        market.marketState.fee = uint256(market.marketState.fee).add(transactionFeeAmount).castToUint128();\n\n        {\n        // update positions\n        Position memory pos;\n        {\n            mapping(uint256 => Position) storage positions = market.positions[buyer];\n            pos = positions[orderOffer.optionID];\n            pos.rangeState = RANGESTATE_TRADED;\n            pos.value = int256(pos.value).add(int256(sizeAcceptPossible)).castToInt128();\n            positions[orderOffer.optionID] = pos;\n        }\n\n        {\n            mapping(uint256 => Position) storage positions = market.positions[seller];\n            pos = positions[orderOffer.optionID];\n            pos.value = int256(pos.value).sub(int256(sizeAcceptPossible)).castToInt128();\n            pos.rangeState = RANGESTATE_TRADED;\n            positions[orderOffer.optionID] = pos;\n        }\n        }\n\n        // remember that (some amount of) the offers is taken\n        market.offersAccepted[offerHash] = market.offersAccepted[offerHash].add(sizeAcceptPossible);\n\n        emit PositionChange(\n            //uint256(buyer) + uint256(market.userData[msg.sender].state),\n            uint256(uint160(buyer)),\n            uint256(uint160(seller)),\n            orderOffer.marketHash,\n            block.timestamp,\n            orderOffer.optionID,\n            orderOffer.pricePerOption,\n            sizeAcceptPossible,\n            offerHash\n        );\n\n        return sizeAcceptMax.sub(sizeAcceptPossible);\n    }\n\n    // OrderOfferSigned array should contain only sell orders or only buys orders for the same optionID and marketHash (not mixed)\n    function orderExecute (\n        OrderOfferSigned[] memory orderOfferSignedList,\n        uint256 sizeAcceptMax /* maximum for all supplied orderOfferSigned structs */\n    )\n        public // this should be external (see https://github.com/ethereum/solidity/issues/5479)\n    {\n        OrderOfferSigned memory orderOfferSigned;\n\n        for (uint256 orderOfferIdx=0; orderOfferIdx < orderOfferSignedList.length; orderOfferIdx++) {\n            orderOfferSigned = orderOfferSignedList[orderOfferIdx];\n\n            //Market storage market = markets[orderOfferSigned.orderOffer.marketHash];\n\n            sizeAcceptMax = orderExecuteSingle (\n                orderOfferSigned,\n                sizeAcceptMax\n            );\n        }\n    }\n\n    function getLiquidityAfterTrade(\n        Market storage market,\n        bool isBuyer,\n        OrderOffer memory orderOffer,\n        address userAddr,\n        uint256 sizeAccept,\n        uint256 value\n    )\n        internal\n        view\n        returns (int256 _liquidity)\n    {\n        int256 liquidity = liquidityUser[userAddr].castToInt();\n        int256 sizeAccept_;\n\n        if (! isBuyer) {\n            liquidity = liquidity.add(value.castToInt()); // seller gets money\n            sizeAccept_ = int256(0).sub(sizeAccept.castToInt());\n        } else {\n            liquidity = liquidity.sub(value.castToInt()); // buyer pays money\n            sizeAccept_ = sizeAccept.castToInt();\n        }\n\n        int256 minPositionBeforeTrade;\n        int256 minPositionAfterTrade;\n        (minPositionBeforeTrade, minPositionAfterTrade) = getMinPositionAfterTrade(\n            market,\n            userAddr,\n            orderOffer.optionID,\n            sizeAccept_\n        );\n\n        liquidity = liquidity.add((minPositionAfterTrade.sub(minPositionBeforeTrade)).mul(ATOMIC_OPTION_PAYOUT_WEI));\n\n        return liquidity;\n    }\n\n    function getMinPositionAfterTrade (\n        Market storage market,\n        address userAddr,\n        /* optional to calc the minimal position after a change */\n        uint16 optionID,\n        int256 positionChange\n    ) internal view\n        returns (int256 minPositionBeforeTrade_, int256 minPositionAfterTrade_)\n    {\n        int256 minPositionBeforeTrade = INT256_MAX;\n        int256 minPositionAfterTrade = INT256_MAX;\n\n        uint256 length = market.marketBaseData.strikes.length;\n        mapping(uint256 => Position) storage positions = market.positions[userAddr];\n        int256 position;\n        for (uint256 s = 0; s <= length; s++) {\n\n            position = positions[s].value;\n            if (position < minPositionBeforeTrade)\n                minPositionBeforeTrade = position;\n\n            if (s == optionID)\n                position = position.add(positionChange);\n\n            if (position < minPositionAfterTrade)\n                minPositionAfterTrade = position;\n        }\n        return (minPositionBeforeTrade, minPositionAfterTrade);\n    }\n\n    function getMinPosition (\n        Market storage market,\n        address userAddr\n    ) internal view\n        returns (int256 minPosition_)\n    {\n        int256 minPosition = INT256_MAX;\n\n        uint256 length = market.marketBaseData.strikes.length;\n        mapping(uint256 => Position) storage positions = market.positions[userAddr];\n        int256 position;\n        for (uint256 s = 0; s <= length; s++) {\n\n            position = positions[s].value;\n            if (position < minPosition)\n                minPosition = position;\n\n        }\n        return (minPosition);\n    }\n\n}\n"
		},
		"./DigiOptionsBaseInterface.sol": {
			"id": 0,
			"content": "/*\n freedex-protocol / User Driven Option Markets Contract used by https://www.digioptions.com\n\n Base data structures and the interface functions that\n are implemented by both contracts (DigiOptionsMarkets and\n DigioptionsMarketLister)\n\n Public repository:\n https://github.com/berlincode/digioptions-contracts.js\n\n elastic.code@gmail.com\n mail@digioptions.com\n\n SPDX-License-Identifier: MIT\n\n MIT License\n\n Copyright (c) digioptions.com (https://www.digioptions.com)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n*/\n\npragma solidity >=0.7.0;\npragma experimental ABIEncoderV2;\n\nimport \"factsigner/contracts/FactsignerDefines.sol\";\nimport \"factsigner/contracts/FactsignerVerify.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"./DigiOptionsLib.sol\";\n\nabstract contract DigiOptionsBaseInterface {\n\n    function getContractInfo (\n    )\n        external\n        virtual\n        returns (uint256[] memory contractInfoValues);\n\n    function getMarketDataByMarketHash (\n        address addr, // marketData.userState for this address\n        bytes32 marketHash\n    )\n        public\n        view\n        virtual\n        returns (DigiOptionsLib.MarketData memory marketData);\n\n    function getMarketDataListByMarketKeys (\n        address addr, // marketData.userState for this address\n        bytes32[] calldata marketKeys // marketsContract uses marketHash / marketListerContract uses baseMarketHash\n    )\n        external\n        view\n        virtual\n        returns (DigiOptionsLib.MarketData[] memory marketDataList);\n\n    // TODO implement createMarketTest\n\n    function createMarket (\n        DigiOptionsLib.MarketBaseData memory marketBaseData,\n        bool testMarket,\n        FactsignerVerify.Signature memory signature\n    )\n        public\n        virtual\n        returns (bytes32 marketHash);\n\n    function calcMarketInterval (\n        uint40 expirationDatetime\n    )\n        external\n        view\n        virtual\n        returns (uint8 interval);\n\n}\n"
		},
		"factsigner/contracts/FactsignerDefines.sol": {
			"id": 9,
			"content": "/*\n Contract defines for https://www.factsigner.com\n\n Public repository:\n https://github.com/berlincode/factsigner\n\n Version 7.0.0\n\n SPDX-License-Identifier: MIT\n\n MIT License\n\n Copyright (c) factsigner.com (https://www.factsigner.com)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n*/\n\npragma solidity >=0.7.0;\n\nlibrary FactsignerDefines\n{\n    // TODO we use a enum here as a hack until\n    // https://github.com/ethereum/solidity/issues/1290 is solved\n    enum ConfigMask {\n        ConfigMaskDummy0,\n        ConfigMarketTypeIsStrikedMask, // = 1\n        ConfigMaskDummy2,\n        ConfigMaskDummy3,\n        ConfigIntervalTypeIsUsedMask // = 4\n    }\n\n    enum SettlementType {\n        FINAL, // = 0\n        PRELIMINARY_FIRST // = 1\n        //PRELIMINARY_MAX // = 65535\n    }\n\n    enum MarketInterval {\n        NONE, // = 0\n        // the following constants are just proposed assignments\n        YEARLY, // = 1\n        QUATERLY, // 2\n        MONTHLY, // = 3\n        WEEKLY, // = 4\n        DAILY, // = 5\n        HOURLY, // = 6\n        SHORT_TERM // = 7\n    }\n\n}\n"
		},
		"factsigner/contracts/FactsignerVerify.sol": {
			"id": 10,
			"content": "/*\n Signature validation for https://www.factsigner.com\n\n Public repository:\n https://github.com/berlincode/factsigner\n\n Version 7.0.0\n\n SPDX-License-Identifier: MIT\n\n MIT License\n\n Copyright (c) factsigner.com (https://www.factsigner.com)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n*/\n\npragma solidity >=0.7.0;\n\nlibrary FactsignerVerify {\n\n    struct Signature {\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n    }\n\n    bytes constant factsignerPrefix = \"\\x19Factsigner Signed Message:\\n32\";\n    function verifyFactsignerMessage(\n        bytes32 message,\n        Signature memory signature\n    ) internal pure returns (address)\n    {\n        bytes32 prefixedHash = keccak256(\n            abi.encodePacked(\n                factsignerPrefix,\n                message\n            )\n        );\n        address signer = ecrecover(\n            prefixedHash,\n            signature.v,\n            signature.r,\n            signature.s\n        );\n        return signer;\n    }\n}\n"
		},
		"@openzeppelin/contracts/math/SafeMath.sol": {
			"id": 7,
			"content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
		},
		"./DigiOptionsLib.sol": {
			"id": 1,
			"content": "/*\n\n Public repository:\n https://github.com/berlincode/digioptions-contracts.js\n\n elastic.code@gmail.com\n mail@digioptions.com\n\n SPDX-License-Identifier: MIT\n\n MIT License\n\n Copyright (c) digioptions.com (https://www.digioptions.com)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n*/\n\npragma solidity >=0.7.0;\n\nimport \"factsigner/contracts/FactsignerDefines.sol\";\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n//import \"@openzeppelin/contracts/math/SignedSafeMath.sol\";\n\n\nlibrary DigiOptionsLib {\n    using SafeMath for uint256;\n\n    /*\n        For future updgrade we want getContractInfo() to remain its signature('getContractInfo(uint256[]')\n        so we declared the return values as dynamic list. The meaning of each entry is defined via\n        follwing enum.\n    */\n    enum InfoValues { // rename InfoContract\n        CONTRACT_TYPE_IDX, // 0\n        VERSION_MARKET_LISTER_IDX, // 1\n        VERSION_MARKETS_IDX, // 2\n        DIGIOPTIONS_MARKETS_ADDR_IDX, // 3\n        BLOCK_NUMBER_CREATED_IDX, // 4\n        TIMESTAMP_MARKET_CREATED_IDX, // 5\n        OFFER_MAX_BLOCKS_INTO_FUTURE_IDX, // 6\n        ATOMIC_OPTION_PAYOUT_WEI_EXP_IDX, // 7\n        EXISTING_MARKETS_IDX, // 8\n\n        MAX // meta info\n    }\n\n    enum InfoLister {\n        VERSION_MARKET_LISTER_IDX, // 0\n        OWNER_IDX,\n        TRANSACTION_FEE_TOTAL_MAX_IDX,\n        TRANSACTION_FEE0_MIN_IDX,\n        TRANSACTION_FEE1_MIN_IDX,\n        TRANSACTION_FEE_SIGNER_MIN_IDX,\n        OPEN_DELAY_SECONDS_IDX,\n\n        MAX // meta info\n    }\n\n    enum ContractType {\n        UNKNOWN,\n        DIGIOPTIONSMARKETS, // == 1\n        DIGIOPTIONSMARKETLISTER // == 2\n    }\n\n    enum UserState {\n        NONE,\n        EXISTS,\n        PAYED_OUT\n    }\n\n    struct Signature {\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n    }\n\n    struct MarketBaseData {\n        /* constant core market data, part of marketHash calculation */\n\n        string underlyingString;\n        uint40 expirationDatetime; /* used for sorting contracts */\n        uint24 objectionPeriod; /* e.g. 3600 seconds */\n\n        uint8 config;\n        uint8 marketCategory;\n\n        uint8 baseUnitExp;\n        int8 ndigit;\n\n        address signerAddr; /* address used to check the signed result (e.g. of factsigner) */\n\n        uint8 marketInterval;\n        uint8 transactionFee0; /* fee in 1/100 per cent (payed by orderTaker) */\n        uint8 transactionFee1; /* fee in 1/100 per cent (payed by orderTaker) */\n        uint8 transactionFeeSigner; /* fee in 1/100 per cent (payed by orderTaker) */\n        address feeTaker0;\n        address feeTaker1;\n        int128[] strikes;\n    }\n\n    struct MarketState {\n        /* winningOptionID is only valid if settled == true */\n        uint128 fee; // total payed fee (for all fee takers)\n        uint16 winningOptionID;\n        bool settled;\n    }\n\n    struct MarketData {\n        MarketBaseData marketBaseData;\n        MarketState marketState;\n        bytes32 marketHash;\n        UserState userState;\n        bool testMarket; // only used by MarketLister\n    }\n\n\n// TODO remove long term? (and add 2-year?)\n// TODO remove uint8() conversion\n// TODO time offset between marketsContract and marketListerContract?\n\n    /* until const arrays are supported in solidity we use our custom function */\n    uint256 constant DIVIDER_ENTRY_BYTES = 6;\n    bytes constant DIVIDER_TABLE = \"\\\n\\x00\\x00\\x00\\x00\\x00\\x00\\\n\\x00\\x00\\x00\\xfa\\x7d\\x00\\\n\\x00\\x00\\x00\\x3b\\x53\\x80\\\n\\x00\\x00\\x00\\x0a\\x8c\\x00\\\n\\x00\\x00\\x00\\x01\\xfa\\x40\\\n\\x00\\x00\\x00\\x00\\x1c\\x20\\\n\\x00\\x00\\x00\\x00\\x00\\x00\\\n\";\n\n    function getDivider(\n        uint256 calculatedMarketInterval\n    )\n        internal\n        pure\n        returns (uint48)\n    {\n        bytes memory table = DIVIDER_TABLE;\n        uint offset = (calculatedMarketInterval + 1) * DIVIDER_ENTRY_BYTES;\n        uint48 value;\n        assembly {\n            value := mload(add(table, offset))\n        }\n\n        return value;\n    }\n\n\n    // TODO this is only 'view' and not internal because of block.timestamp - maybe change that\n    function calcMarketInterval (\n        uint40 expirationDatetime\n    )\n        internal\n        view\n        returns (uint8 interval)\n    {\n        uint8 marketInterval;\n        uint256 secondsUntilExpiration = uint256(expirationDatetime).sub(uint256(block.timestamp));\n        // TODO > or >= ?\n        require(secondsUntilExpiration < 730 * 24 * 60 * 60, \"too far in the future\");\n        if (secondsUntilExpiration > 45 * 24 * 60 * 60) // > 45 days\n            marketInterval = uint8(FactsignerDefines.MarketInterval.YEARLY);\n        else if (secondsUntilExpiration > 8 * 24 * 60 * 60) // > 8 days\n            marketInterval = uint8(FactsignerDefines.MarketInterval.MONTHLY);\n        else if (secondsUntilExpiration > 36 * 60 * 60) // > 36 hours\n            marketInterval = uint8(FactsignerDefines.MarketInterval.WEEKLY);\n        else if (secondsUntilExpiration > 2 * 60 * 60) // > 2 hours\n            marketInterval = uint8(FactsignerDefines.MarketInterval.DAILY);\n        else if (secondsUntilExpiration > 15 * 60) // > 15 min\n            marketInterval = uint8(FactsignerDefines.MarketInterval.HOURLY);\n        else\n            marketInterval = uint8(FactsignerDefines.MarketInterval.SHORT_TERM);\n\n        return marketInterval;\n    }\n\n    function calcFactHash (\n        DigiOptionsLib.MarketBaseData memory marketBaseData\n    )\n        internal\n        pure // this should be external (see https://github.com/ethereum/solidity/issues/5479)\n        returns (bytes32 factHash)\n    {\n        bytes memory data;\n        data = abi.encodePacked(\n            keccak256(abi.encodePacked(marketBaseData.underlyingString)), /* 'name' utf8 encoded */\n            marketBaseData.expirationDatetime, /* 'settlement' unix epoch seconds UTC */\n            marketBaseData.objectionPeriod, /* e.g. 3600 seconds */\n            marketBaseData.config,\n            marketBaseData.marketCategory,\n\n            marketBaseData.baseUnitExp, /* e.g. 18 -> baseUnit = 10**18 = 1000000000000000000 */\n            marketBaseData.ndigit /* 'ndigit' number of digits (may be negative) */\n        );\n        // if this is a named market we simply use strikes as factsigner's namedRanges\n        if ((marketBaseData.config & uint8(FactsignerDefines.ConfigMask.ConfigMarketTypeIsStrikedMask) == 0)) {\n            data = abi.encodePacked(\n                data,\n                marketBaseData.strikes\n            );\n        }\n        return keccak256(data);\n    }\n\n    function calcMarketHash (\n        DigiOptionsLib.MarketBaseData memory marketBaseData\n    )\n        internal\n        pure\n        returns (bytes32 marketHash)\n    {\n        bytes memory data;\n        data = abi.encodePacked(\n            // TODO from facthash?\n            keccak256(abi.encodePacked(marketBaseData.underlyingString)), /* 'name' utf8 encoded */\n            marketBaseData.expirationDatetime, /* 'settlement' unix epoch seconds UTC */\n            marketBaseData.objectionPeriod, /* e.g. 3600 seconds */\n            marketBaseData.config,\n            marketBaseData.marketCategory,\n\n            marketBaseData.baseUnitExp, /* e.g. 18 -> baseUnit = 10**18 = 1000000000000000000 */\n            marketBaseData.ndigit, /* 'ndigit' number of digits (may be negative) */\n\n            marketBaseData.marketInterval,\n            marketBaseData.feeTaker0,\n            marketBaseData.feeTaker1,\n            marketBaseData.signerAddr /* address used to check the signed result (e.g. of factsigner) */\n        );\n        data = abi.encodePacked(\n            data,\n            marketBaseData.transactionFee0,\n            marketBaseData.transactionFee1,\n            marketBaseData.transactionFeeSigner,\n            marketBaseData.strikes\n        );\n        return keccak256(data);\n    }\n\n    function calcBaseMarketHash (\n        MarketBaseData memory marketBaseData\n    )\n        internal\n        pure\n        returns (bytes32 baseMarketHash)\n    {\n        /* baseMarketHash is similar to marketHash but does not contain all elements. It's basically a factHash with added marketInterval */\n        bytes memory data;\n        data = abi.encodePacked(\n            keccak256(abi.encodePacked(marketBaseData.underlyingString)), /* 'name' utf8 encoded */\n            marketBaseData.expirationDatetime, /* 'settlement' unix epoch seconds UTC */\n            marketBaseData.objectionPeriod, /* e.g. 3600 seconds */\n            marketBaseData.config,\n            marketBaseData.marketCategory,\n\n            marketBaseData.baseUnitExp, /* e.g. 18 -> baseUnit = 10**18 = 1000000000000000000 */\n            marketBaseData.ndigit, /* 'ndigit' number of digits (may be negative) */\n\n            marketBaseData.marketInterval,\n\n            marketBaseData.signerAddr\n        );\n        // if this is a named market we simply use strikes as factsigner's namedRanges\n        if ((marketBaseData.config & uint8(FactsignerDefines.ConfigMask.ConfigMarketTypeIsStrikedMask) == 0)) {\n            data = abi.encodePacked(\n                data,\n                marketBaseData.strikes\n            );\n        }\n        return keccak256(data);\n\n    }\n\n\n    bytes constant OFFER_PREFIX = \"\\x19Ethereum Signed Message:\\n32\"; // TODO\n    function verifyOffer(\n        bytes32 message,\n        Signature memory signature\n    )\n        internal\n        pure\n        returns (address addr)\n    {\n        bytes32 prefixedHash = keccak256(\n            abi.encodePacked(\n                OFFER_PREFIX,\n                message\n            )\n        );\n        address signer = ecrecover(\n            prefixedHash,\n            signature.v,\n            signature.r,\n            signature.s\n        );\n        return signer;\n    }\n}\n"
		},
		"./SafeCast.sol": {
			"id": 6,
			"content": "pragma solidity >=0.7.0;\n\n/*\n SPDX-License-Identifier: MIT\n*/\n\nlibrary SafeCast {\n    /**\n     * Cast unsigned a to signed a.\n     */\n    function castToInt(uint256 a) internal pure returns(int256) {\n        assert(a < (1 << 255));\n        return int(a);\n    }\n\n    /**\n     * Cast signed a to unsigned a.\n     */\n    function castToUint(int256 a) internal pure returns(uint256) {\n        assert(a >= 0);\n        return uint(a);\n    }\n\n    // TODO\n    function castToInt128(int256 a) internal pure returns(int128) {\n        assert(int128(a) == a);\n        return int128(a);\n    }\n\n    // TODO\n    function castToUint128(uint256 a) internal pure returns(uint128) {\n        assert(uint128(a) == a);\n        return uint128(a);\n    }\n}\n"
		},
		"@openzeppelin/contracts/math/SignedSafeMath.sol": {
			"id": 8,
			"content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\n/**\n * @title SignedSafeMath\n * @dev Signed math operations with safety checks that revert on error.\n */\nlibrary SignedSafeMath {\n    int256 constant private _INT256_MIN = -2**255;\n\n    /**\n     * @dev Returns the multiplication of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(int256 a, int256 b) internal pure returns (int256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        require(!(a == -1 && b == _INT256_MIN), \"SignedSafeMath: multiplication overflow\");\n\n        int256 c = a * b;\n        require(c / a == b, \"SignedSafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two signed integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(int256 a, int256 b) internal pure returns (int256) {\n        require(b != 0, \"SignedSafeMath: division by zero\");\n        require(!(b == -1 && a == _INT256_MIN), \"SignedSafeMath: division overflow\");\n\n        int256 c = a / b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a - b;\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \"SignedSafeMath: subtraction overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the addition of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a + b;\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \"SignedSafeMath: addition overflow\");\n\n        return c;\n    }\n}\n"
		},
		"./DigiOptionsMarketLister.sol": {
			"id": 2,
			"content": "/*\n freedex-protocol / User Driven Option Markets Contract used by https://www.digioptions.com\n\n Designed to work with signatures from [www.factsigner.com](https://www.factsigner.com)\n\n Public repository:\n https://github.com/berlincode/digioptions-contracts.js\n\n elastic.code@gmail.com\n mail@digioptions.com\n\n SPDX-License-Identifier: MIT\n\n MIT License\n\n Copyright (c) digioptions.com (https://www.digioptions.com)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n*/\n\npragma solidity >=0.7.0;\npragma experimental ABIEncoderV2;\n\nimport \"./DigiOptionsBaseInterface.sol\";\nimport \"./DigiOptionsMarkets.sol\";\nimport \"./DigiOptionsLib.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/math/SignedSafeMath.sol\";\n\n\ncontract DigiOptionsMarketLister is DigiOptionsBaseInterface {\n    using SafeMath for uint256;\n    using SignedSafeMath for int256;\n\n    /*\n        we use a simple linked list - since the SignerListEntry is part of a map\n        the value remains directly accessible by the signer's address\n    */\n    struct SignerListEntry {\n        uint256 value;\n        address addrNext;\n        bool exists;\n    }\n\n    struct SignerData {\n        address signerAddr;\n        uint256 value;\n    }\n\n    uint256 constant private VERSION = (\n        (0 << 32) + /* major */\n        (53 << 16) + /* minor */\n        0 /* bugfix */\n    );\n\n    /* constants which are set during construction */\n    uint256 private blockNumber;\n    address private owner;\n    DigiOptionsMarkets private digiOptionsMarkets;\n\n    uint256 private existingMarkets; /* one bit for each marketCategory and marketInterval */\n\n    /* control variables/constants */\n    uint256 constant private transactionFeeTotalMax = 100; // 1.0%\n    uint256 constant private transactionFee0Min = 10; // 0.1%\n    uint256 constant private transactionFee1Min = 10; // 0.1%\n    uint256 constant private transactionFeeSignerMin = 5; // 0.05%\n    uint16 constant private openDelaySeconds = 600;\n\n    address internal signerAddrFirst; /* the first signer (if exists) */\n    mapping(address => SignerListEntry) private signerEntriesMap; // stores which signing addresses are allowed to register\n    uint256 private signerMapNumEntries = 0;\n\n    /* variables */\n    struct MarketBest {\n        bytes32 marketHash;\n        uint8 transactionFee0;\n        uint40 openTime;\n    }\n    mapping(bytes32 => MarketBest) internal marketsBest; // mapping from baseMarketHash\n    mapping(bytes32 => bool) internal isTestMarket; // mapping from marketHash\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Only owner can call this function.\");\n        _;\n    }\n\n    event MarketCreateLister(\n        bytes32 marketKey, /* marketsContract stores marketHash ; marketListerContract stores baseMarketHash */\n        uint48 indexed expirationDatetimeFilter,\n        uint40 expirationDatetime,\n        uint8 indexed marketInterval,\n        uint8 indexed marketCategory,\n        uint40 openTime,\n        string underlyingString\n    );\n\n    constructor (DigiOptionsMarkets addr)\n    {\n        owner = msg.sender;\n        blockNumber = block.number;\n        digiOptionsMarkets = addr;\n    }\n\n    /* TODO re-enabled after 0x-tools support solc-0.6.0\n    // default fallback\n    receive () external payable {\n        revert();\n    }\n    */\n\n    function getContractInfo (\n    )\n        external\n        override\n\tvirtual\n        returns (uint256[] memory contractInfoValues)\n    {\n        uint256[] memory infoValues = digiOptionsMarkets.getContractInfo();\n\n        {\n            infoValues[uint256(DigiOptionsLib.InfoValues.CONTRACT_TYPE_IDX)] = uint256(DigiOptionsLib.ContractType.DIGIOPTIONSMARKETLISTER);\n            infoValues[uint256(DigiOptionsLib.InfoValues.VERSION_MARKET_LISTER_IDX)] = VERSION;\n            //infoValues[uint256(DigiOptionsLib.InfoValues.VERSION_MARKETS_IDX)] // keep versionMarkets\n            infoValues[uint256(DigiOptionsLib.InfoValues.DIGIOPTIONS_MARKETS_ADDR_IDX)] = uint256(uint160(address(digiOptionsMarkets)));\n        }\n        {\n            infoValues[uint256(DigiOptionsLib.InfoValues.BLOCK_NUMBER_CREATED_IDX)] = blockNumber;\n            //infoValues[uint256(DigiOptionsLib.InfoValues.TIMESTAMP_MARKET_CREATED_IDX)] // keep timestampMarketsCreated\n            //infoValues[uint256(DigiOptionsLib.InfoValues.OFFER_MAX_BLOCKS_INTO_FUTURE_IDX)] // keep offerMaxBlocksInto_future\n            //infoValues[uint256(DigiOptionsLib.InfoValues.PAYOUT_PER_NANO_OPTION_EXP_IDX)] // keep payoutPerNanoOption\n            infoValues[uint256(DigiOptionsLib.InfoValues.EXISTING_MARKETS_IDX)] = existingMarkets;\n        }\n\n        return infoValues;\n    }\n\n    function getMarketListerInfo(\n    )\n        external\n        view\n        returns (uint256[] memory listerValues, SignerData[] memory signerDataList)\n    {\n        listerValues = new uint[](uint256(DigiOptionsLib.InfoLister.MAX));\n\n        listerValues[uint256(DigiOptionsLib.InfoLister.VERSION_MARKET_LISTER_IDX)] = VERSION;\n        listerValues[uint256(DigiOptionsLib.InfoLister.OWNER_IDX)] = uint256(uint160(owner));\n        listerValues[uint256(DigiOptionsLib.InfoLister.TRANSACTION_FEE_TOTAL_MAX_IDX)] = transactionFeeTotalMax;\n        listerValues[uint256(DigiOptionsLib.InfoLister.TRANSACTION_FEE0_MIN_IDX)] = transactionFee0Min;\n        listerValues[uint256(DigiOptionsLib.InfoLister.TRANSACTION_FEE1_MIN_IDX)] = transactionFee1Min;\n        listerValues[uint256(DigiOptionsLib.InfoLister.TRANSACTION_FEE_SIGNER_MIN_IDX)] = transactionFeeSignerMin;\n        listerValues[uint256(DigiOptionsLib.InfoLister.OPEN_DELAY_SECONDS_IDX)] = uint256(openDelaySeconds);\n\n        uint256 numEntries = signerMapNumEntries;\n        signerDataList = new SignerData[](numEntries);\n\n        address signerAddr = signerAddrFirst;\n        uint256 idx;\n        for (idx=0 ; idx < numEntries ; idx++){\n\n            signerDataList[idx] = SignerData({\n                signerAddr: signerAddr,\n                value: signerEntriesMap[signerAddr].value\n            });\n            // move on with next entry\n            signerAddr = signerEntriesMap[signerAddr].addrNext;\n        }\n\n        return (listerValues, signerDataList);\n    }\n\n    function getMarketDataByMarketHash (\n        address addr, // marketData.userState for this address\n        bytes32 marketHash\n    )\n        public\n        view\n        override\n        virtual\n        returns (DigiOptionsLib.MarketData memory marketData)\n    {\n        marketData = digiOptionsMarkets.getMarketDataByMarketHash(addr, marketHash);\n        // override testMarket\n        marketData.testMarket = isTestMarket[marketHash];\n    }\n\n    function getMarketDataListByMarketKeys (\n        address addr, // marketData.userState for this address\n        bytes32[] calldata marketKeys // marketsContract uses marketHash / marketListerContract uses baseMarketHash\n    )\n        external\n        view\n        override\n        virtual\n        returns (DigiOptionsLib.MarketData[] memory marketDataList)\n    {\n        marketDataList = new DigiOptionsLib.MarketData[](marketKeys.length);\n        uint256 idx;\n\n        for (idx= 0 ; idx < marketKeys.length ; idx++) {\n            marketDataList[idx] = getMarketDataByMarketHash(addr, marketsBest[marketKeys[idx]].marketHash);\n        }\n        return marketDataList;\n    }\n\n    function calcMarketInterval (\n        uint40 expirationDatetime\n    )\n        external\n        view\n        override\n        virtual\n        returns (uint8 interval)\n    {\n        return digiOptionsMarkets.calcMarketInterval(expirationDatetime);\n    }\n\n    /*\n    check, if a market might be possible to register (it does not need to be created for this\n    and it is not checked if creating is possible at all)\n    */\n    function registerMarketTest (\n        DigiOptionsLib.MarketBaseData memory marketBaseData\n    )\n        public\n        view\n        returns (bool registerPossible)\n    {\n\n        {\n            if (msg.sender == owner){\n                // always allow owner\n                return true;\n            }\n\n            if (\n                (signerEntriesMap[marketBaseData.signerAddr].value == 0) // TODO check bits!\n            ){\n                return false;\n            }\n        }\n\n        /* check fees and feeTaker0 */\n        if (\n            ((uint256(marketBaseData.transactionFee0)).add(uint256(marketBaseData.transactionFee1)).add(uint256(marketBaseData.transactionFeeSigner)) <= transactionFeeTotalMax) &&\n            (marketBaseData.transactionFee0 >= transactionFee0Min) &&\n            (marketBaseData.transactionFee1 >= transactionFee1Min) &&\n            (marketBaseData.transactionFeeSigner >= transactionFeeSignerMin) &&\n            (marketBaseData.feeTaker0 == owner)\n        ){\n            return true;\n        }\n\n        return false;\n    }\n\n    /*\n        This is just a convenient wrapper for both, creating and registering a market.\n        Remember you can always do this in two transactions and just use this contract\n        for registration.\n    */\n    function createMarket (\n        DigiOptionsLib.MarketBaseData memory marketBaseData,\n        bool testMarket,\n        FactsignerVerify.Signature memory signature\n    )\n        public // this should be external (see https://github.com/ethereum/solidity/issues/5479)\n        override\n        returns (bytes32 marketHash)\n    {\n        require (registerMarketTest(marketBaseData), 'register not possible');\n        marketHash = digiOptionsMarkets.createMarket(\n            marketBaseData,\n            testMarket,\n            signature\n        );\n        registerMarketIntern (\n            marketBaseData,\n            marketHash,\n            testMarket\n        );\n        return marketHash;\n    }\n\n    function registerMarket (\n        bytes32 marketHash,\n        bool testMarket\n    )\n        public\n    {\n        DigiOptionsLib.MarketBaseData memory marketBaseData = digiOptionsMarkets.getMarketBaseDataByMarketHash(marketHash);\n\n        /* check that the market exists */\n        assert(marketBaseData.expirationDatetime != 0);\n\n        require (registerMarketTest(marketBaseData), 'register not possible');\n        registerMarketIntern(\n            marketBaseData,\n            marketHash,\n            testMarket\n        );\n    }\n\n    function registerMarketIntern (\n        DigiOptionsLib.MarketBaseData memory marketBaseData,\n        bytes32 marketHash,\n        bool testMarket\n    )\n        internal\n    {\n        bytes32 baseMarketHash = DigiOptionsLib.calcBaseMarketHash(marketBaseData);\n\n        MarketBest storage marketBest = marketsBest[baseMarketHash];\n\n        if (marketBest.marketHash == 0) {\n            // does not yet exist\n\n            uint40 openTime = uint40((msg.sender == owner)? 0 : block.timestamp + openDelaySeconds);\n            marketsBest[baseMarketHash] = MarketBest(\n                {\n                marketHash: marketHash,\n                transactionFee0: marketBaseData.transactionFee0,\n                openTime: openTime\n                }\n            );\n\n            if (msg.sender == owner) {\n                isTestMarket[marketHash] = testMarket;\n            }\n\n            uint256 existingMarketsBit = (1 << uint256(marketBaseData.marketInterval)) << (marketBaseData.marketCategory * 8);\n            if (existingMarkets & existingMarketsBit == 0) {\n                existingMarkets = existingMarkets | existingMarketsBit;\n            }\n\n            uint8 marketIntervalForEventFilter;\n            if ((marketBaseData.config & uint8(FactsignerDefines.ConfigMask.ConfigIntervalTypeIsUsedMask) != 0)) {\n                /* interval used */\n                marketIntervalForEventFilter = marketBaseData.marketInterval;\n            } else {\n                /* interval unused */\n                marketIntervalForEventFilter = DigiOptionsLib.calcMarketInterval(marketBaseData.expirationDatetime);\n            }\n\n            // emit only once for each market (even if it will be replaced later)\n            emit MarketCreateLister(\n                baseMarketHash, // marketKey\n                ((marketBaseData.expirationDatetime/DigiOptionsLib.getDivider(marketIntervalForEventFilter)) << 8) + marketIntervalForEventFilter,\n                marketBaseData.expirationDatetime,\n                marketBaseData.marketInterval,\n                marketBaseData.marketCategory,\n                openTime,\n                marketBaseData.underlyingString\n            );\n            return;\n        }\n        if (\n            (marketBaseData.transactionFee0 > marketBest.transactionFee0) &&\n            (block.timestamp < marketBest.openTime)\n        ){\n            marketBest.marketHash = marketHash;\n            marketBest.transactionFee0 = marketBaseData.transactionFee0;\n        }\n    }\n\n    function setTestMarket (\n        bytes32 marketHash,\n        bool testMarket\n    )\n        public\n        onlyOwner\n    {\n        isTestMarket[marketHash] = testMarket;\n    }\n\n    /*\n    function setOpenDelaySeconds (\n        uint16 openDelaySeconds_\n    )\n        public\n        onlyOwner\n    {\n        if (openDelaySeconds_ > 0) {\n            openDelaySeconds = openDelaySeconds_;\n        }\n    }\n    */\n\n    /*\n    function setTransactionFeeTotalMax (\n        uint64 transactionFeeTotalMax_\n    )\n        public\n        onlyOwner\n    {\n        transactionFeeTotalMax = transactionFeeTotalMax_;\n    }\n    */\n\n    function setSigner (\n        address signerAddr,\n        uint256 value\n    )\n        public\n        onlyOwner\n    {\n        if (signerEntriesMap[signerAddr].exists){\n            // just modify value\n            signerEntriesMap[signerAddr].value = value;\n            return;\n        }\n\n        // add new entry at the head of the list\n        address addrTmp = signerAddrFirst;\n        signerEntriesMap[signerAddr] = SignerListEntry({\n            value: value,\n            addrNext: addrTmp,\n            exists: true\n        });\n        signerAddrFirst = signerAddr;\n        signerMapNumEntries = signerMapNumEntries + 1;\n    }\n}\n"
		}
	},
	"sourceCodes": {
		"./DigiOptionsMeta.sol": "/*\n User Driven Option Markets Contract used by https://www.digioptions.com\n\n This is just a helper contract which allows to create, register ans settle\n multiple markets within one transaction.\n\n Copyright (c) [www.digioptions.com](https://www.digioptions.com)\n\n Designed to work with signatures from [www.factsigner.com](https://www.factsigner.com)\n\n Public repository:\n https://github.com/berlincode/digioptions-contracts.js\n\n elastic.code@gmail.com\n mail@digioptions.com\n\n SPDX-License-Identifier: MIT\n\n MIT License\n\n Copyright (c) digioptions.com (https://www.digioptions.com)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n*/\n\npragma solidity >=0.7.0;\npragma experimental ABIEncoderV2;\n\n//import \"./DigiOptionsBaseInterface.sol\";\nimport \"./DigiOptionsMarkets.sol\";\nimport \"./DigiOptionsMarketLister.sol\";\nimport \"./DigiOptionsLib.sol\";\n\n\ncontract DigiOptionsMeta {\n\n    /* This is the constructor */\n    //constructor () public {\n    //}\n\n    /* TODO re-enabled after 0x-tools support solc-0.6.0\n    // default fallback\n    receive () external payable {\n        revert();\n    }\n    */\n\n    struct CreateAndRegisterData {\n        DigiOptionsMarkets digiOptionsMarkets;\n        DigiOptionsLib.MarketBaseData marketBaseData;\n        bool testMarket;\n        FactsignerVerify.Signature signature;\n    }\n\n    struct SettlementData {\n        DigiOptionsMarkets digiOptionsMarkets;\n        bytes32 marketHash; /* market to settle */\n        FactsignerVerify.Signature signature;\n        int256 value;\n        address[] users;\n        bytes32[] offerHash;\n    }\n\n    function createRegisterAndSettlement (\n        CreateAndRegisterData[] memory createAndRegisterDataList,\n        SettlementData[] memory settlementDataList\n    ) public // this should be external (see https://github.com/ethereum/solidity/issues/5479)\n    {\n\n        for (uint256 createAndRegisterDataIdx=0; createAndRegisterDataIdx < createAndRegisterDataList.length; createAndRegisterDataIdx++) {\n            CreateAndRegisterData memory createAndRegisterData = createAndRegisterDataList[createAndRegisterDataIdx];\n\n            /*\n            uint256[] memory infoValues = createAndRegisterData.digiOptionsMarkets.getContractInfo();\n            DigiOptionsMarkets digiOptionsMarketsX = DigiOptionsMarkets(address(infoValues[uint256(DigiOptionsLib.InfoValues.DIGIOPTIONS_MARKETS_ADDR_IDX)]));\n            if (infoValues[uint256(DigiOptionsLib.InfoValues.CONTRACT_TYPE_IDX)] == uint256(DigiOptionsLib.ContractType.DIGIOPTIONSMARKETLISTER))\n            {\n            }\n            bytes32 marketHash = createAndRegisterData.digiOptionsMarkets.createMarket(\n                createAndRegisterData.marketBaseData,\n                createAndRegisterData.testMarket,\n                createAndRegisterData.signature\n            );\n\n\n                createAndRegisterData.digiOptionsMarketLister[marketListerIdx].registerMarket(\n                    marketHash,\n                    createAndRegisterData.testMarket\n                );\n            */\n\n            createAndRegisterData.digiOptionsMarkets.createMarket(\n                createAndRegisterData.marketBaseData,\n                createAndRegisterData.testMarket,\n                createAndRegisterData.signature\n            );\n        }\n        for (uint256 settlementDataIdx=0; settlementDataIdx < settlementDataList.length; settlementDataIdx++) {\n            SettlementData memory settlementData = settlementDataList[settlementDataIdx];\n            settlementData.digiOptionsMarkets.settlement(\n                settlementData.marketHash, // market to settle\n                settlementData.signature,\n                settlementData.value,\n                settlementData.users,\n                settlementData.offerHash\n            );\n        }\n    }\n\n}\n",
		"./DigiOptionsMarkets.sol": "/*\n freedex-protocol / User Driven Option Markets Contract used by https://www.digioptions.com\n\n Designed to work with signatures from [www.factsigner.com](https://www.factsigner.com)\n\n Public repository:\n https://github.com/berlincode/digioptions-contracts.js\n\n elastic.code@gmail.com\n mail@digioptions.com\n\n SPDX-License-Identifier: MIT\n\n MIT License\n\n Copyright (c) digioptions.com (https://www.digioptions.com)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n*/\n\npragma solidity >=0.7.0;\npragma experimental ABIEncoderV2;\n\nimport \"./DigiOptionsBaseInterface.sol\";\nimport \"./DigiOptionsLib.sol\";\nimport \"./SafeCast.sol\";\nimport \"factsigner/contracts/FactsignerDefines.sol\";\nimport \"factsigner/contracts/FactsignerVerify.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/math/SignedSafeMath.sol\";\n\n\ncontract DigiOptionsMarkets is DigiOptionsBaseInterface {\n    using SafeCast for int256;\n    using SafeCast for uint256;\n    using SafeCast for int128;\n    using SafeCast for uint128;\n    using SafeMath for uint256;\n    using SignedSafeMath for int256;\n\n    uint256 constant private VERSION = (\n        (0 << 32) + /* major */\n        (53 << 16) + /* minor */\n        0 /* bugfix */\n    );\n    uint256 constant private OFFER_MAX_BLOCKS_INTO_FUTURE = 12; // increase for e.g. thundercore\n\n    // each atomic option is worth 10**9 = 1000000000 wei in case of win\n    uint256 constant private ATOMIC_OPTION_PAYOUT_WEI_EXP = 9;\n    int256 constant private ATOMIC_OPTION_PAYOUT_WEI = int256(uint256(10)**ATOMIC_OPTION_PAYOUT_WEI_EXP);\n\n    uint8 constant private RANGESTATE_NOT_USED = 0;\n    uint8 constant private RANGESTATE_TRADED = 1;\n    uint8 constant private RANGESTATE_PAYED_OUT = 2;\n\n    int256 constant private INT256_MAX = int256(~(uint256(1) << 255));\n\n    struct Position {\n        int128 value;\n        uint8 rangeState;\n    }\n\n    struct Market {\n        DigiOptionsLib.MarketState marketState;\n        DigiOptionsLib.MarketBaseData marketBaseData;\n        mapping(address => mapping(uint256 => Position)) positions; // position mapping for each user\n\n        mapping(bytes32 => uint256)  offersAccepted; // remember how many options from an offer are already taken\n    }\n\n    struct OrderOffer {\n        bytes32 marketHash;\n        uint16 optionID;\n        bool buy; // does the offer owner want to buy or sell options\n        uint256 pricePerOption;\n        uint256 size;\n        uint256 offerID;\n        uint256 blockExpires;\n        address offerOwner;\n    }\n\n    struct OrderOfferSigned {\n        OrderOffer orderOffer;\n        DigiOptionsLib.Signature signature;\n    }\n\n    /* variables */\n    uint256 private timestamp;\n    uint256 private blockNumber;\n    uint256 private existingMarkets; /* one bit for each marketCategory and marketInterval */\n\n    mapping(address => uint256) internal liquidityUser;\n    mapping(bytes32 => Market) internal markets;\n\n    mapping(address => uint32) internal userMarketsIdx;\n\n    event MarketCreate(\n        bytes32 marketKey, /* marketsContract stores marketHash ; marketListerContract stores baseMarketHash */\n        uint48 indexed expirationDatetimeFilter,\n        uint40 expirationDatetime,\n        uint8 indexed marketInterval,\n        uint8 indexed marketCategory,\n        string underlyingString\n    );\n    event MarketSettlement(\n        bytes32 marketHash\n    );\n    // this may result in liquidity change\n    event LiquidityAddWithdraw(address indexed addr, uint256 datetime, int256 amount);\n    event PositionChange(\n        // TODO optimize order for gas costs possible?\n        uint256 indexed buyer,\n        uint256 indexed seller,\n        bytes32 indexed marketHash,\n        uint256 datetime, // TODO we might remove this and use info from block\n        uint16 optionID,\n        uint256 pricePerOption,\n        uint256 size,\n        bytes32 offerHash\n    );\n\n    /* This is the constructor */\n    constructor ()\n    {\n        blockNumber = block.number;\n        timestamp = block.timestamp;\n    }\n\n    /* TODO re-enabled after 0x-tools support solc-0.6.0\n    // default fallback\n    receive ()\n        external\n        payable\n    {\n        liquidityAdd();\n    }\n    */\n\n    function getContractInfo (\n    )\n        external\n        override\n        virtual\n        returns (uint256[] memory contractInfoValues)\n    {\n        uint256[] memory infoValues = new uint[](uint256(DigiOptionsLib.InfoValues.MAX));\n\n        infoValues[uint256(DigiOptionsLib.InfoValues.CONTRACT_TYPE_IDX)] = uint256(DigiOptionsLib.ContractType.DIGIOPTIONSMARKETS);\n        infoValues[uint256(DigiOptionsLib.InfoValues.VERSION_MARKET_LISTER_IDX)] = 0; // versionMarketLister\n        infoValues[uint256(DigiOptionsLib.InfoValues.VERSION_MARKETS_IDX)] = VERSION; // versionMarkets\n        infoValues[uint256(DigiOptionsLib.InfoValues.DIGIOPTIONS_MARKETS_ADDR_IDX)] = uint256(uint160(address(this))); // digiOptionsMarketsAddr\n        infoValues[uint256(DigiOptionsLib.InfoValues.BLOCK_NUMBER_CREATED_IDX)] = blockNumber; // blockNumberCreated\n        infoValues[uint256(DigiOptionsLib.InfoValues.TIMESTAMP_MARKET_CREATED_IDX)] = timestamp; // timestampMarketsCreated\n        infoValues[uint256(DigiOptionsLib.InfoValues.OFFER_MAX_BLOCKS_INTO_FUTURE_IDX)] = OFFER_MAX_BLOCKS_INTO_FUTURE;\n        infoValues[uint256(DigiOptionsLib.InfoValues.ATOMIC_OPTION_PAYOUT_WEI_EXP_IDX)] = ATOMIC_OPTION_PAYOUT_WEI_EXP;\n        infoValues[uint256(DigiOptionsLib.InfoValues.EXISTING_MARKETS_IDX)] = existingMarkets;\n\n        return infoValues;\n    }\n\n    function liquidityGet()\n        public\n        view\n        returns (uint256 liquidity)\n    {\n        return liquidityUser[msg.sender];\n    }\n\n    function liquidityWithdraw (uint256 amount) external {\n        require (amount <= liquidityUser[msg.sender], \"Not enough liquidity.\");\n\n        /* Remember to reduce the liquidity BEFORE */\n        /* sending to prevent re-entrancy attacks */\n        liquidityUser[msg.sender] = liquidityUser[msg.sender].sub(amount);\n        payable(msg.sender).transfer(amount);\n        emit LiquidityAddWithdraw(msg.sender, block.timestamp, -int256(amount));\n    }\n\n    /* returns all relevant market data - if marketHash does not exist marketBaseData.expirationDatetime is 0*/\n    function getMarketDataByMarketHash (\n        address addr, // marketData.userState for this address\n        bytes32 marketHash\n    )\n        public\n        view\n        override\n        virtual\n        returns (DigiOptionsLib.MarketData memory marketData)\n    {\n        Market storage market = markets[marketHash];\n        DigiOptionsLib.MarketBaseData memory marketBaseData = market.marketBaseData;\n        DigiOptionsLib.MarketState memory marketState = market.marketState;\n\n        return DigiOptionsLib.MarketData({\n            marketBaseData: marketBaseData,\n            marketState: marketState,\n            marketHash: marketHash,\n            userState: getUserState(addr, market),\n            testMarket: false // only used by MarketLister\n        });\n    }\n\n    function getMarketBaseDataByMarketHash (bytes32 marketHash)\n        public\n        view\n        returns (DigiOptionsLib.MarketBaseData memory marketBaseData)\n    {\n        Market storage market = markets[marketHash];\n        return market.marketBaseData;\n    }\n\n    function getMarketDataListByMarketKeys (\n        address addr, // marketData.userState for this address\n        bytes32[] calldata marketKeys // marketsContract uses marketHash / marketListerContract uses baseMarketHash\n    )\n        external\n        view\n        override\n        virtual\n        returns (DigiOptionsLib.MarketData[] memory marketDataList)\n    {\n        marketDataList = new DigiOptionsLib.MarketData[](marketKeys.length);\n        uint256 idx;\n\n        for (idx= 0 ; idx < marketKeys.length ; idx++) {\n            marketDataList[idx] = getMarketDataByMarketHash(addr, marketKeys[idx]);\n        }\n        return marketDataList;\n    }\n\n    function calcMarketInterval (\n        uint40 expirationDatetime\n    )\n        external\n        view\n        override\n        virtual\n        returns (uint8 interval)\n    {\n        return DigiOptionsLib.calcMarketInterval(expirationDatetime);\n    }\n\n    function getUserState (\n        address addr,\n        Market storage market\n    )\n        internal\n        view\n        returns (DigiOptionsLib.UserState userState)\n    {\n        mapping(uint256 => Position) storage positions = market.positions[addr];\n\n        if (market.marketState.settled){\n            Position memory winningPosition = positions[market.marketState.winningOptionID];\n            if (\n                (winningPosition.rangeState == RANGESTATE_PAYED_OUT) ||\n                ((winningPosition.rangeState == RANGESTATE_TRADED) && (winningPosition.value == 0))  // TODO fixme == 0\n                ){\n                return DigiOptionsLib.UserState.PAYED_OUT;\n            }\n        }\n        // TODO for named markets one excess optionID is checked (which should not be a problem)\n        for (uint256 optionID = 0; optionID <= market.marketBaseData.strikes.length; optionID++) {\n            if (positions[optionID].rangeState > RANGESTATE_NOT_USED) {\n                return DigiOptionsLib.UserState.EXISTS;\n            }\n        }\n        return DigiOptionsLib.UserState.NONE;\n    }\n\n    function getLiquidityAndPositions (bytes32 marketHash)\n        external\n        view\n        returns (uint256 liquidity, Position[] memory positions, DigiOptionsLib.UserState userState)\n    {\n        Market storage market = markets[marketHash];\n        DigiOptionsLib.MarketBaseData memory marketBaseData = market.marketBaseData;\n\n        // return user's total contract liquidity and positions for selected market\n\n        // TODO for named markets one excess optionID is checked (which should not be a problem)\n        positions = new Position[](marketBaseData.strikes.length + 1);\n\n        for (uint256 optionID = 0; optionID <= marketBaseData.strikes.length; optionID++) {\n            positions[optionID] = market.positions[msg.sender][optionID];\n        }\n        return (\n            liquidityUser[msg.sender],\n            positions,\n            getUserState(msg.sender, market)\n        );\n    }\n\n    function liquidityAdd ()\n        public\n        payable\n    {\n        if (msg.value > 0) {\n            liquidityUser[msg.sender] = liquidityUser[msg.sender].add(msg.value);\n            emit LiquidityAddWithdraw(msg.sender, block.timestamp, int256(msg.value));\n        }\n    }\n\n    function liquidityAddFor (address user)\n        public\n        payable\n    {\n        if (msg.value > 0) {\n            liquidityUser[user] = liquidityUser[user].add(msg.value);\n            emit LiquidityAddWithdraw(user, block.timestamp, int256(msg.value));\n        }\n    }\n\n    function createMarket (\n        DigiOptionsLib.MarketBaseData memory marketBaseData,\n        bool testMarket,\n        FactsignerVerify.Signature memory signature\n    )\n        public // this should be external (see https://github.com/ethereum/solidity/issues/5479)\n        override\n        returns (bytes32 marketHash)\n    {\n        assert(marketBaseData.expirationDatetime != 0);\n\n        { // scope here to safe stack space\n        bytes32 factHash = DigiOptionsLib.calcFactHash(marketBaseData);\n        require(\n            FactsignerVerify.verifyFactsignerMessage(\n                factHash,\n                signature\n            ) == marketBaseData.signerAddr,\n            \"Signature invalid.\"\n        );\n\n        marketHash = DigiOptionsLib.calcMarketHash(marketBaseData);\n        }\n\n        /* Check that the market does not already exists */\n        if (markets[marketHash].marketBaseData.expirationDatetime != 0)\n            return marketHash;\n\n        assert(marketBaseData.baseUnitExp == 18); // TODO remove this in the future\n\n        assert(marketBaseData.marketCategory < 64); // limit marketCategory (for now)\n\n        //assert((uint256(marketBaseData.transactionFee0)).add(uint256(marketBaseData.transactionFee1)).add(uint256(marketBaseData.transactionFeeSigner)) <= 500);\n\n        uint256 optionID;\n        if ((marketBaseData.config & uint8(FactsignerDefines.ConfigMask.ConfigMarketTypeIsStrikedMask)) != 0) {\n            /* striked market */\n            /* check that we have at least one strike */\n            assert(marketBaseData.strikes.length > 0);\n            assert(marketBaseData.strikes.length < 32765); // our first optionID is 0\n\n            /* check strikes are ordered */\n            for (optionID = 1; optionID < marketBaseData.strikes.length; optionID++) {\n                assert(marketBaseData.strikes[optionID-1] < marketBaseData.strikes[optionID]);\n            }\n\n            /* check that the final settlement precision high enough for the supplied strikes */\n            assert(int16(uint16(marketBaseData.baseUnitExp)) >= marketBaseData.ndigit);\n            for (optionID = 0; optionID < marketBaseData.strikes.length; optionID++) {\n                assert((marketBaseData.strikes[optionID] % int256(10**uint256((int256(uint256(marketBaseData.baseUnitExp))-marketBaseData.ndigit)))) == 0);\n            }\n        } else {\n            /* named market */\n            /* check that we have at least two named ranges */\n            assert(marketBaseData.strikes.length > 1);\n            assert(marketBaseData.strikes.length <= 32765); // our first optionID is 0\n        }\n        assert(marketBaseData.marketCategory < 32); // limit marketCategory (for now)\n\n        uint256 existingMarketsBit = (1 << uint256(marketBaseData.marketInterval)) << (marketBaseData.marketCategory * 8);\n        if (existingMarkets & existingMarketsBit == 0) {\n            existingMarkets = existingMarkets | existingMarketsBit;\n        }\n\n        uint8 marketIntervalForEventFilter = DigiOptionsLib.calcMarketInterval(marketBaseData.expirationDatetime);\n        if ((marketBaseData.config & uint8(FactsignerDefines.ConfigMask.ConfigIntervalTypeIsUsedMask) != 0)) {\n            /* interval used */\n            assert(marketBaseData.marketInterval == marketIntervalForEventFilter);\n        } else {\n            /* interval unused */\n            assert(marketBaseData.marketInterval == uint8(FactsignerDefines.MarketInterval.NONE));\n        }\n\n        markets[marketHash].marketBaseData = marketBaseData;\n\n\n        emit MarketCreate(\n            marketHash, // marketKey\n            ((marketBaseData.expirationDatetime/DigiOptionsLib.getDivider(marketIntervalForEventFilter)) << 8) + marketIntervalForEventFilter,\n            marketBaseData.expirationDatetime,\n            marketBaseData.marketInterval,\n            marketBaseData.marketCategory,\n            marketBaseData.underlyingString\n        );\n        return marketHash;\n    }\n\n    function settlement (\n        bytes32 marketHash, /* market to settle */\n        FactsignerVerify.Signature memory signature,\n        int256 value,\n        address[] memory users,\n        bytes32[] memory offerHash\n    )\n        public // this should be external (see https://github.com/ethereum/solidity/issues/5479)\n    {\n        Market storage market = markets[marketHash];\n\n        /* anybody with access to the signed value (from signerAddr) can settle the market */\n\n        require(\n            FactsignerVerify.verifyFactsignerMessage(\n                keccak256(\n                    abi.encodePacked(\n                        DigiOptionsLib.calcFactHash(market.marketBaseData),\n                        value,\n                        uint16(FactsignerDefines.SettlementType.FINAL)\n                    )\n                ),\n                signature\n            ) == market.marketBaseData.signerAddr,\n            \"Signature invalid.\"\n        );\n\n        // just return if already settled\n        if (market.marketState.settled)\n            return;\n\n        uint256 winningOptionID;\n        uint256 optionID;\n        if ((market.marketBaseData.config & uint8(FactsignerDefines.ConfigMask.ConfigMarketTypeIsStrikedMask)) != 0) {\n            /* striked market */\n            winningOptionID = market.marketBaseData.strikes.length;\n            for (optionID = 0; optionID < market.marketBaseData.strikes.length; optionID++) {\n                if (value < market.marketBaseData.strikes[optionID]) {\n                    winningOptionID = optionID;\n                    break;\n                }\n            }\n        } else {\n            /* named market */\n            winningOptionID = 0; // default in case nothing matches\n            for (optionID = 0; optionID < market.marketBaseData.strikes.length; optionID++) {\n                if (value == market.marketBaseData.strikes[optionID]) {\n                    winningOptionID = optionID;\n                    break;\n                }\n            }\n        }\n        // TODO one transaction\n        market.marketState.winningOptionID = uint16(winningOptionID);\n        market.marketState.settled = true;\n\n        uint256 feeSum = uint256(market.marketBaseData.transactionFee0).add(uint256(market.marketBaseData.transactionFee1)).add(uint256(market.marketBaseData.transactionFeeSigner));\n        uint256 feePart = uint256(market.marketState.fee) / feeSum;\n        liquidityUser[market.marketBaseData.feeTaker0] = liquidityUser[market.marketBaseData.feeTaker0].add(feePart.mul(market.marketBaseData.transactionFee0));\n        liquidityUser[market.marketBaseData.feeTaker1] = liquidityUser[market.marketBaseData.feeTaker1].add(feePart.mul(market.marketBaseData.transactionFee1));\n        liquidityUser[market.marketBaseData.signerAddr] = liquidityUser[market.marketBaseData.signerAddr].add(feePart.mul(market.marketBaseData.transactionFeeSigner));\n\n        emit MarketSettlement(marketHash);\n\n        freeLiquidity(\n            marketHash,\n            users,\n            offerHash\n        );\n    }\n\n    function freeLiquidity(\n        bytes32 marketHash,\n        address[] memory users,\n        bytes32[] memory offerHash\n    )\n        public\n    {\n        Market storage market = markets[marketHash];\n\n        DigiOptionsLib.MarketState memory marketState = market.marketState;\n\n        // TODO fetch marketState once\n        uint16 winningOptionID = marketState.winningOptionID;\n        require(marketState.settled == true, \"Market not yet settled.\");\n\n        uint256 idx;\n        int256 minPosition;\n        for (idx = 0; idx < users.length; idx++) {\n\n            address user = users[idx];\n            //mapping(uint256 => Position) storage positions = market.positions[user];\n\n            if (getUserState(user, market) != DigiOptionsLib.UserState.PAYED_OUT) {\n\n                minPosition = getMinPosition(\n                    market,\n                    user\n                );\n\n                int256 pos = int256(market.positions[user][winningOptionID].value);\n                int256 size = pos.sub(minPosition);\n\n                market.positions[user][winningOptionID].rangeState = RANGESTATE_PAYED_OUT;\n\n                liquidityUser[user] = liquidityUser[user].add(size.mul(ATOMIC_OPTION_PAYOUT_WEI).castToUint());\n\n                // TODO a cheaper event would do too\n                if (pos >= 0) {\n                    emit PositionChange(\n                        //uint256(buyer) + uint256(market.userData[msg.sender].state),\n                        0, // indicates final payout\n                        uint256(uint160(user)),\n                        marketHash,\n                        block.timestamp,\n                        winningOptionID,\n                        uint256(ATOMIC_OPTION_PAYOUT_WEI),\n                        uint256(pos),\n                        0\n                    );\n                } else {\n                    emit PositionChange(\n                        //uint256(buyer) + uint256(market.userData[msg.sender].state),\n                        uint256(uint160(user)),\n                        0, // indicates final payout\n                        marketHash,\n                        block.timestamp,\n                        winningOptionID,\n                        uint256(ATOMIC_OPTION_PAYOUT_WEI),\n                        uint256(-pos),\n                        0\n                    );\n                }\n            }\n\n        }\n    }\n\n    function orderExecuteTest (\n        OrderOfferSigned memory orderOfferSigned,\n        uint256 sizeAccept // TODO rename to sizeAcceptMax?\n    )\n        public\n        view\n        returns (\n            uint256 sizeAcceptPossible,\n            bytes32 offerHash,\n            int256 liquidityOfferOwner, // only valid if sizeAcceptPossible > 0\n            int256 liquidityOfferTaker, // only valid if sizeAcceptPossible > 0\n            uint256 transactionFeeAmount // only valid if sizeAcceptPossible > 0\n        )\n    {\n\n        OrderOffer memory orderOffer = orderOfferSigned.orderOffer;\n        Market storage market = markets[orderOffer.marketHash];\n\n        offerHash = keccak256(\n            abi.encodePacked(\n                address(this), // this checks that the signature is valid only for this contract\n                orderOffer.marketHash,\n                orderOffer.optionID,\n                orderOffer.buy,\n                orderOffer.pricePerOption,\n                orderOffer.size,\n                orderOffer.offerID,\n                orderOffer.blockExpires,\n                orderOffer.offerOwner\n            )\n        );\n        if (!(\n                (DigiOptionsLib.verifyOffer(\n                    offerHash,\n                    orderOfferSigned.signature\n                ) == orderOffer.offerOwner)\n            )) {\n            sizeAccept = 0;\n            // TODO return immediately?\n        } else if (market.offersAccepted[offerHash].add(sizeAccept) > orderOffer.size) {\n            sizeAccept = orderOffer.size.sub(market.offersAccepted[offerHash]);\n        }\n\n        uint256 value = sizeAccept.mul(orderOffer.pricePerOption);\n\n        // TODO precalcuate sum of transactions fees\n        transactionFeeAmount = value.div(10000).mul(\n            uint256(market.marketBaseData.transactionFee0).add(uint256(market.marketBaseData.transactionFee1)).add(uint256(market.marketBaseData.transactionFeeSigner))\n        );\n\n        liquidityOfferOwner = getLiquidityAfterTrade(\n            market,\n            orderOffer.buy,\n            orderOffer,\n            orderOffer.offerOwner,\n            sizeAccept,\n            value\n        );\n        liquidityOfferTaker = getLiquidityAfterTrade(\n            market,\n            !orderOffer.buy,\n            orderOffer,\n            msg.sender,\n            sizeAccept,\n            value\n        ).sub(transactionFeeAmount.castToInt());\n\n        if (!(\n                (orderOffer.optionID <= market.marketBaseData.strikes.length) && // TODO depends on striked or named market?\n                (block.number <= orderOffer.blockExpires) &&\n                (block.number.add(OFFER_MAX_BLOCKS_INTO_FUTURE) >= orderOffer.blockExpires) &&\n                // offerTaker and offerOwner must not be the same (because liquidity is calculated seperately)\n                (orderOffer.offerOwner != msg.sender) &&\n                (liquidityOfferOwner >= int256(0)) &&\n                (liquidityOfferTaker >= int256(0))\n            )) {\n            sizeAccept = 0;\n        }\n        return (\n            sizeAccept,\n            offerHash,\n            liquidityOfferOwner, // only valid if sizeAcceptPossible > 0\n            liquidityOfferTaker, // only valid if sizeAcceptPossible > 0\n            transactionFeeAmount // only valid if sizeAcceptPossible > 0\n        );\n    }\n\n    function orderExecuteSingle (\n        OrderOfferSigned memory orderOfferSigned,\n        uint256 sizeAcceptMax /* maximum */\n    )\n        private\n        returns (uint256 sizeAcceptRemain)\n    {\n        OrderOffer memory orderOffer;\n\n        orderOffer = orderOfferSigned.orderOffer;\n        bytes32 offerHash;\n        uint256 sizeAcceptPossible;\n\n        Market storage market = markets[orderOffer.marketHash];\n\n        address buyer; // buys options / money giver\n        address seller; // sells options / money getter\n        if (orderOffer.buy) {\n            buyer = orderOffer.offerOwner;\n            seller = msg.sender;\n        } else {\n            buyer = msg.sender;\n            seller = orderOffer.offerOwner;\n        }\n\n        int256 liquidityOfferOwner; // only valid if sizeAcceptPossible > 0\n        int256 liquidityOfferTaker; // only valid if sizeAcceptPossible > 0\n        uint256 transactionFeeAmount; // only valid if sizeAcceptPossible > 0\n        (\n            sizeAcceptPossible,\n            offerHash,\n            liquidityOfferOwner, // only valid if sizeAcceptPossible > 0\n            liquidityOfferTaker, // only valid if sizeAcceptPossible > 0\n            transactionFeeAmount // only valid if sizeAcceptPossible > 0\n        ) = orderExecuteTest (\n            orderOfferSigned,\n            sizeAcceptMax\n        );\n        if (sizeAcceptPossible == 0) {\n            return sizeAcceptMax;\n        }\n\n        liquidityUser[orderOffer.offerOwner] = liquidityOfferOwner.castToUint();\n        liquidityUser[msg.sender] = liquidityOfferTaker.castToUint();\n        market.marketState.fee = uint256(market.marketState.fee).add(transactionFeeAmount).castToUint128();\n\n        {\n        // update positions\n        Position memory pos;\n        {\n            mapping(uint256 => Position) storage positions = market.positions[buyer];\n            pos = positions[orderOffer.optionID];\n            pos.rangeState = RANGESTATE_TRADED;\n            pos.value = int256(pos.value).add(int256(sizeAcceptPossible)).castToInt128();\n            positions[orderOffer.optionID] = pos;\n        }\n\n        {\n            mapping(uint256 => Position) storage positions = market.positions[seller];\n            pos = positions[orderOffer.optionID];\n            pos.value = int256(pos.value).sub(int256(sizeAcceptPossible)).castToInt128();\n            pos.rangeState = RANGESTATE_TRADED;\n            positions[orderOffer.optionID] = pos;\n        }\n        }\n\n        // remember that (some amount of) the offers is taken\n        market.offersAccepted[offerHash] = market.offersAccepted[offerHash].add(sizeAcceptPossible);\n\n        emit PositionChange(\n            //uint256(buyer) + uint256(market.userData[msg.sender].state),\n            uint256(uint160(buyer)),\n            uint256(uint160(seller)),\n            orderOffer.marketHash,\n            block.timestamp,\n            orderOffer.optionID,\n            orderOffer.pricePerOption,\n            sizeAcceptPossible,\n            offerHash\n        );\n\n        return sizeAcceptMax.sub(sizeAcceptPossible);\n    }\n\n    // OrderOfferSigned array should contain only sell orders or only buys orders for the same optionID and marketHash (not mixed)\n    function orderExecute (\n        OrderOfferSigned[] memory orderOfferSignedList,\n        uint256 sizeAcceptMax /* maximum for all supplied orderOfferSigned structs */\n    )\n        public // this should be external (see https://github.com/ethereum/solidity/issues/5479)\n    {\n        OrderOfferSigned memory orderOfferSigned;\n\n        for (uint256 orderOfferIdx=0; orderOfferIdx < orderOfferSignedList.length; orderOfferIdx++) {\n            orderOfferSigned = orderOfferSignedList[orderOfferIdx];\n\n            //Market storage market = markets[orderOfferSigned.orderOffer.marketHash];\n\n            sizeAcceptMax = orderExecuteSingle (\n                orderOfferSigned,\n                sizeAcceptMax\n            );\n        }\n    }\n\n    function getLiquidityAfterTrade(\n        Market storage market,\n        bool isBuyer,\n        OrderOffer memory orderOffer,\n        address userAddr,\n        uint256 sizeAccept,\n        uint256 value\n    )\n        internal\n        view\n        returns (int256 _liquidity)\n    {\n        int256 liquidity = liquidityUser[userAddr].castToInt();\n        int256 sizeAccept_;\n\n        if (! isBuyer) {\n            liquidity = liquidity.add(value.castToInt()); // seller gets money\n            sizeAccept_ = int256(0).sub(sizeAccept.castToInt());\n        } else {\n            liquidity = liquidity.sub(value.castToInt()); // buyer pays money\n            sizeAccept_ = sizeAccept.castToInt();\n        }\n\n        int256 minPositionBeforeTrade;\n        int256 minPositionAfterTrade;\n        (minPositionBeforeTrade, minPositionAfterTrade) = getMinPositionAfterTrade(\n            market,\n            userAddr,\n            orderOffer.optionID,\n            sizeAccept_\n        );\n\n        liquidity = liquidity.add((minPositionAfterTrade.sub(minPositionBeforeTrade)).mul(ATOMIC_OPTION_PAYOUT_WEI));\n\n        return liquidity;\n    }\n\n    function getMinPositionAfterTrade (\n        Market storage market,\n        address userAddr,\n        /* optional to calc the minimal position after a change */\n        uint16 optionID,\n        int256 positionChange\n    ) internal view\n        returns (int256 minPositionBeforeTrade_, int256 minPositionAfterTrade_)\n    {\n        int256 minPositionBeforeTrade = INT256_MAX;\n        int256 minPositionAfterTrade = INT256_MAX;\n\n        uint256 length = market.marketBaseData.strikes.length;\n        mapping(uint256 => Position) storage positions = market.positions[userAddr];\n        int256 position;\n        for (uint256 s = 0; s <= length; s++) {\n\n            position = positions[s].value;\n            if (position < minPositionBeforeTrade)\n                minPositionBeforeTrade = position;\n\n            if (s == optionID)\n                position = position.add(positionChange);\n\n            if (position < minPositionAfterTrade)\n                minPositionAfterTrade = position;\n        }\n        return (minPositionBeforeTrade, minPositionAfterTrade);\n    }\n\n    function getMinPosition (\n        Market storage market,\n        address userAddr\n    ) internal view\n        returns (int256 minPosition_)\n    {\n        int256 minPosition = INT256_MAX;\n\n        uint256 length = market.marketBaseData.strikes.length;\n        mapping(uint256 => Position) storage positions = market.positions[userAddr];\n        int256 position;\n        for (uint256 s = 0; s <= length; s++) {\n\n            position = positions[s].value;\n            if (position < minPosition)\n                minPosition = position;\n\n        }\n        return (minPosition);\n    }\n\n}\n",
		"./DigiOptionsBaseInterface.sol": "/*\n freedex-protocol / User Driven Option Markets Contract used by https://www.digioptions.com\n\n Base data structures and the interface functions that\n are implemented by both contracts (DigiOptionsMarkets and\n DigioptionsMarketLister)\n\n Public repository:\n https://github.com/berlincode/digioptions-contracts.js\n\n elastic.code@gmail.com\n mail@digioptions.com\n\n SPDX-License-Identifier: MIT\n\n MIT License\n\n Copyright (c) digioptions.com (https://www.digioptions.com)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n*/\n\npragma solidity >=0.7.0;\npragma experimental ABIEncoderV2;\n\nimport \"factsigner/contracts/FactsignerDefines.sol\";\nimport \"factsigner/contracts/FactsignerVerify.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"./DigiOptionsLib.sol\";\n\nabstract contract DigiOptionsBaseInterface {\n\n    function getContractInfo (\n    )\n        external\n        virtual\n        returns (uint256[] memory contractInfoValues);\n\n    function getMarketDataByMarketHash (\n        address addr, // marketData.userState for this address\n        bytes32 marketHash\n    )\n        public\n        view\n        virtual\n        returns (DigiOptionsLib.MarketData memory marketData);\n\n    function getMarketDataListByMarketKeys (\n        address addr, // marketData.userState for this address\n        bytes32[] calldata marketKeys // marketsContract uses marketHash / marketListerContract uses baseMarketHash\n    )\n        external\n        view\n        virtual\n        returns (DigiOptionsLib.MarketData[] memory marketDataList);\n\n    // TODO implement createMarketTest\n\n    function createMarket (\n        DigiOptionsLib.MarketBaseData memory marketBaseData,\n        bool testMarket,\n        FactsignerVerify.Signature memory signature\n    )\n        public\n        virtual\n        returns (bytes32 marketHash);\n\n    function calcMarketInterval (\n        uint40 expirationDatetime\n    )\n        external\n        view\n        virtual\n        returns (uint8 interval);\n\n}\n",
		"factsigner/contracts/FactsignerDefines.sol": "/*\n Contract defines for https://www.factsigner.com\n\n Public repository:\n https://github.com/berlincode/factsigner\n\n Version 7.0.0\n\n SPDX-License-Identifier: MIT\n\n MIT License\n\n Copyright (c) factsigner.com (https://www.factsigner.com)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n*/\n\npragma solidity >=0.7.0;\n\nlibrary FactsignerDefines\n{\n    // TODO we use a enum here as a hack until\n    // https://github.com/ethereum/solidity/issues/1290 is solved\n    enum ConfigMask {\n        ConfigMaskDummy0,\n        ConfigMarketTypeIsStrikedMask, // = 1\n        ConfigMaskDummy2,\n        ConfigMaskDummy3,\n        ConfigIntervalTypeIsUsedMask // = 4\n    }\n\n    enum SettlementType {\n        FINAL, // = 0\n        PRELIMINARY_FIRST // = 1\n        //PRELIMINARY_MAX // = 65535\n    }\n\n    enum MarketInterval {\n        NONE, // = 0\n        // the following constants are just proposed assignments\n        YEARLY, // = 1\n        QUATERLY, // 2\n        MONTHLY, // = 3\n        WEEKLY, // = 4\n        DAILY, // = 5\n        HOURLY, // = 6\n        SHORT_TERM // = 7\n    }\n\n}\n",
		"factsigner/contracts/FactsignerVerify.sol": "/*\n Signature validation for https://www.factsigner.com\n\n Public repository:\n https://github.com/berlincode/factsigner\n\n Version 7.0.0\n\n SPDX-License-Identifier: MIT\n\n MIT License\n\n Copyright (c) factsigner.com (https://www.factsigner.com)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n*/\n\npragma solidity >=0.7.0;\n\nlibrary FactsignerVerify {\n\n    struct Signature {\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n    }\n\n    bytes constant factsignerPrefix = \"\\x19Factsigner Signed Message:\\n32\";\n    function verifyFactsignerMessage(\n        bytes32 message,\n        Signature memory signature\n    ) internal pure returns (address)\n    {\n        bytes32 prefixedHash = keccak256(\n            abi.encodePacked(\n                factsignerPrefix,\n                message\n            )\n        );\n        address signer = ecrecover(\n            prefixedHash,\n            signature.v,\n            signature.r,\n            signature.s\n        );\n        return signer;\n    }\n}\n",
		"@openzeppelin/contracts/math/SafeMath.sol": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n",
		"./DigiOptionsLib.sol": "/*\n\n Public repository:\n https://github.com/berlincode/digioptions-contracts.js\n\n elastic.code@gmail.com\n mail@digioptions.com\n\n SPDX-License-Identifier: MIT\n\n MIT License\n\n Copyright (c) digioptions.com (https://www.digioptions.com)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n*/\n\npragma solidity >=0.7.0;\n\nimport \"factsigner/contracts/FactsignerDefines.sol\";\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n//import \"@openzeppelin/contracts/math/SignedSafeMath.sol\";\n\n\nlibrary DigiOptionsLib {\n    using SafeMath for uint256;\n\n    /*\n        For future updgrade we want getContractInfo() to remain its signature('getContractInfo(uint256[]')\n        so we declared the return values as dynamic list. The meaning of each entry is defined via\n        follwing enum.\n    */\n    enum InfoValues { // rename InfoContract\n        CONTRACT_TYPE_IDX, // 0\n        VERSION_MARKET_LISTER_IDX, // 1\n        VERSION_MARKETS_IDX, // 2\n        DIGIOPTIONS_MARKETS_ADDR_IDX, // 3\n        BLOCK_NUMBER_CREATED_IDX, // 4\n        TIMESTAMP_MARKET_CREATED_IDX, // 5\n        OFFER_MAX_BLOCKS_INTO_FUTURE_IDX, // 6\n        ATOMIC_OPTION_PAYOUT_WEI_EXP_IDX, // 7\n        EXISTING_MARKETS_IDX, // 8\n\n        MAX // meta info\n    }\n\n    enum InfoLister {\n        VERSION_MARKET_LISTER_IDX, // 0\n        OWNER_IDX,\n        TRANSACTION_FEE_TOTAL_MAX_IDX,\n        TRANSACTION_FEE0_MIN_IDX,\n        TRANSACTION_FEE1_MIN_IDX,\n        TRANSACTION_FEE_SIGNER_MIN_IDX,\n        OPEN_DELAY_SECONDS_IDX,\n\n        MAX // meta info\n    }\n\n    enum ContractType {\n        UNKNOWN,\n        DIGIOPTIONSMARKETS, // == 1\n        DIGIOPTIONSMARKETLISTER // == 2\n    }\n\n    enum UserState {\n        NONE,\n        EXISTS,\n        PAYED_OUT\n    }\n\n    struct Signature {\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n    }\n\n    struct MarketBaseData {\n        /* constant core market data, part of marketHash calculation */\n\n        string underlyingString;\n        uint40 expirationDatetime; /* used for sorting contracts */\n        uint24 objectionPeriod; /* e.g. 3600 seconds */\n\n        uint8 config;\n        uint8 marketCategory;\n\n        uint8 baseUnitExp;\n        int8 ndigit;\n\n        address signerAddr; /* address used to check the signed result (e.g. of factsigner) */\n\n        uint8 marketInterval;\n        uint8 transactionFee0; /* fee in 1/100 per cent (payed by orderTaker) */\n        uint8 transactionFee1; /* fee in 1/100 per cent (payed by orderTaker) */\n        uint8 transactionFeeSigner; /* fee in 1/100 per cent (payed by orderTaker) */\n        address feeTaker0;\n        address feeTaker1;\n        int128[] strikes;\n    }\n\n    struct MarketState {\n        /* winningOptionID is only valid if settled == true */\n        uint128 fee; // total payed fee (for all fee takers)\n        uint16 winningOptionID;\n        bool settled;\n    }\n\n    struct MarketData {\n        MarketBaseData marketBaseData;\n        MarketState marketState;\n        bytes32 marketHash;\n        UserState userState;\n        bool testMarket; // only used by MarketLister\n    }\n\n\n// TODO remove long term? (and add 2-year?)\n// TODO remove uint8() conversion\n// TODO time offset between marketsContract and marketListerContract?\n\n    /* until const arrays are supported in solidity we use our custom function */\n    uint256 constant DIVIDER_ENTRY_BYTES = 6;\n    bytes constant DIVIDER_TABLE = \"\\\n\\x00\\x00\\x00\\x00\\x00\\x00\\\n\\x00\\x00\\x00\\xfa\\x7d\\x00\\\n\\x00\\x00\\x00\\x3b\\x53\\x80\\\n\\x00\\x00\\x00\\x0a\\x8c\\x00\\\n\\x00\\x00\\x00\\x01\\xfa\\x40\\\n\\x00\\x00\\x00\\x00\\x1c\\x20\\\n\\x00\\x00\\x00\\x00\\x00\\x00\\\n\";\n\n    function getDivider(\n        uint256 calculatedMarketInterval\n    )\n        internal\n        pure\n        returns (uint48)\n    {\n        bytes memory table = DIVIDER_TABLE;\n        uint offset = (calculatedMarketInterval + 1) * DIVIDER_ENTRY_BYTES;\n        uint48 value;\n        assembly {\n            value := mload(add(table, offset))\n        }\n\n        return value;\n    }\n\n\n    // TODO this is only 'view' and not internal because of block.timestamp - maybe change that\n    function calcMarketInterval (\n        uint40 expirationDatetime\n    )\n        internal\n        view\n        returns (uint8 interval)\n    {\n        uint8 marketInterval;\n        uint256 secondsUntilExpiration = uint256(expirationDatetime).sub(uint256(block.timestamp));\n        // TODO > or >= ?\n        require(secondsUntilExpiration < 730 * 24 * 60 * 60, \"too far in the future\");\n        if (secondsUntilExpiration > 45 * 24 * 60 * 60) // > 45 days\n            marketInterval = uint8(FactsignerDefines.MarketInterval.YEARLY);\n        else if (secondsUntilExpiration > 8 * 24 * 60 * 60) // > 8 days\n            marketInterval = uint8(FactsignerDefines.MarketInterval.MONTHLY);\n        else if (secondsUntilExpiration > 36 * 60 * 60) // > 36 hours\n            marketInterval = uint8(FactsignerDefines.MarketInterval.WEEKLY);\n        else if (secondsUntilExpiration > 2 * 60 * 60) // > 2 hours\n            marketInterval = uint8(FactsignerDefines.MarketInterval.DAILY);\n        else if (secondsUntilExpiration > 15 * 60) // > 15 min\n            marketInterval = uint8(FactsignerDefines.MarketInterval.HOURLY);\n        else\n            marketInterval = uint8(FactsignerDefines.MarketInterval.SHORT_TERM);\n\n        return marketInterval;\n    }\n\n    function calcFactHash (\n        DigiOptionsLib.MarketBaseData memory marketBaseData\n    )\n        internal\n        pure // this should be external (see https://github.com/ethereum/solidity/issues/5479)\n        returns (bytes32 factHash)\n    {\n        bytes memory data;\n        data = abi.encodePacked(\n            keccak256(abi.encodePacked(marketBaseData.underlyingString)), /* 'name' utf8 encoded */\n            marketBaseData.expirationDatetime, /* 'settlement' unix epoch seconds UTC */\n            marketBaseData.objectionPeriod, /* e.g. 3600 seconds */\n            marketBaseData.config,\n            marketBaseData.marketCategory,\n\n            marketBaseData.baseUnitExp, /* e.g. 18 -> baseUnit = 10**18 = 1000000000000000000 */\n            marketBaseData.ndigit /* 'ndigit' number of digits (may be negative) */\n        );\n        // if this is a named market we simply use strikes as factsigner's namedRanges\n        if ((marketBaseData.config & uint8(FactsignerDefines.ConfigMask.ConfigMarketTypeIsStrikedMask) == 0)) {\n            data = abi.encodePacked(\n                data,\n                marketBaseData.strikes\n            );\n        }\n        return keccak256(data);\n    }\n\n    function calcMarketHash (\n        DigiOptionsLib.MarketBaseData memory marketBaseData\n    )\n        internal\n        pure\n        returns (bytes32 marketHash)\n    {\n        bytes memory data;\n        data = abi.encodePacked(\n            // TODO from facthash?\n            keccak256(abi.encodePacked(marketBaseData.underlyingString)), /* 'name' utf8 encoded */\n            marketBaseData.expirationDatetime, /* 'settlement' unix epoch seconds UTC */\n            marketBaseData.objectionPeriod, /* e.g. 3600 seconds */\n            marketBaseData.config,\n            marketBaseData.marketCategory,\n\n            marketBaseData.baseUnitExp, /* e.g. 18 -> baseUnit = 10**18 = 1000000000000000000 */\n            marketBaseData.ndigit, /* 'ndigit' number of digits (may be negative) */\n\n            marketBaseData.marketInterval,\n            marketBaseData.feeTaker0,\n            marketBaseData.feeTaker1,\n            marketBaseData.signerAddr /* address used to check the signed result (e.g. of factsigner) */\n        );\n        data = abi.encodePacked(\n            data,\n            marketBaseData.transactionFee0,\n            marketBaseData.transactionFee1,\n            marketBaseData.transactionFeeSigner,\n            marketBaseData.strikes\n        );\n        return keccak256(data);\n    }\n\n    function calcBaseMarketHash (\n        MarketBaseData memory marketBaseData\n    )\n        internal\n        pure\n        returns (bytes32 baseMarketHash)\n    {\n        /* baseMarketHash is similar to marketHash but does not contain all elements. It's basically a factHash with added marketInterval */\n        bytes memory data;\n        data = abi.encodePacked(\n            keccak256(abi.encodePacked(marketBaseData.underlyingString)), /* 'name' utf8 encoded */\n            marketBaseData.expirationDatetime, /* 'settlement' unix epoch seconds UTC */\n            marketBaseData.objectionPeriod, /* e.g. 3600 seconds */\n            marketBaseData.config,\n            marketBaseData.marketCategory,\n\n            marketBaseData.baseUnitExp, /* e.g. 18 -> baseUnit = 10**18 = 1000000000000000000 */\n            marketBaseData.ndigit, /* 'ndigit' number of digits (may be negative) */\n\n            marketBaseData.marketInterval,\n\n            marketBaseData.signerAddr\n        );\n        // if this is a named market we simply use strikes as factsigner's namedRanges\n        if ((marketBaseData.config & uint8(FactsignerDefines.ConfigMask.ConfigMarketTypeIsStrikedMask) == 0)) {\n            data = abi.encodePacked(\n                data,\n                marketBaseData.strikes\n            );\n        }\n        return keccak256(data);\n\n    }\n\n\n    bytes constant OFFER_PREFIX = \"\\x19Ethereum Signed Message:\\n32\"; // TODO\n    function verifyOffer(\n        bytes32 message,\n        Signature memory signature\n    )\n        internal\n        pure\n        returns (address addr)\n    {\n        bytes32 prefixedHash = keccak256(\n            abi.encodePacked(\n                OFFER_PREFIX,\n                message\n            )\n        );\n        address signer = ecrecover(\n            prefixedHash,\n            signature.v,\n            signature.r,\n            signature.s\n        );\n        return signer;\n    }\n}\n",
		"./SafeCast.sol": "pragma solidity >=0.7.0;\n\n/*\n SPDX-License-Identifier: MIT\n*/\n\nlibrary SafeCast {\n    /**\n     * Cast unsigned a to signed a.\n     */\n    function castToInt(uint256 a) internal pure returns(int256) {\n        assert(a < (1 << 255));\n        return int(a);\n    }\n\n    /**\n     * Cast signed a to unsigned a.\n     */\n    function castToUint(int256 a) internal pure returns(uint256) {\n        assert(a >= 0);\n        return uint(a);\n    }\n\n    // TODO\n    function castToInt128(int256 a) internal pure returns(int128) {\n        assert(int128(a) == a);\n        return int128(a);\n    }\n\n    // TODO\n    function castToUint128(uint256 a) internal pure returns(uint128) {\n        assert(uint128(a) == a);\n        return uint128(a);\n    }\n}\n",
		"@openzeppelin/contracts/math/SignedSafeMath.sol": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\n/**\n * @title SignedSafeMath\n * @dev Signed math operations with safety checks that revert on error.\n */\nlibrary SignedSafeMath {\n    int256 constant private _INT256_MIN = -2**255;\n\n    /**\n     * @dev Returns the multiplication of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(int256 a, int256 b) internal pure returns (int256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        require(!(a == -1 && b == _INT256_MIN), \"SignedSafeMath: multiplication overflow\");\n\n        int256 c = a * b;\n        require(c / a == b, \"SignedSafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two signed integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(int256 a, int256 b) internal pure returns (int256) {\n        require(b != 0, \"SignedSafeMath: division by zero\");\n        require(!(b == -1 && a == _INT256_MIN), \"SignedSafeMath: division overflow\");\n\n        int256 c = a / b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a - b;\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \"SignedSafeMath: subtraction overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the addition of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a + b;\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \"SignedSafeMath: addition overflow\");\n\n        return c;\n    }\n}\n",
		"./DigiOptionsMarketLister.sol": "/*\n freedex-protocol / User Driven Option Markets Contract used by https://www.digioptions.com\n\n Designed to work with signatures from [www.factsigner.com](https://www.factsigner.com)\n\n Public repository:\n https://github.com/berlincode/digioptions-contracts.js\n\n elastic.code@gmail.com\n mail@digioptions.com\n\n SPDX-License-Identifier: MIT\n\n MIT License\n\n Copyright (c) digioptions.com (https://www.digioptions.com)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n*/\n\npragma solidity >=0.7.0;\npragma experimental ABIEncoderV2;\n\nimport \"./DigiOptionsBaseInterface.sol\";\nimport \"./DigiOptionsMarkets.sol\";\nimport \"./DigiOptionsLib.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/math/SignedSafeMath.sol\";\n\n\ncontract DigiOptionsMarketLister is DigiOptionsBaseInterface {\n    using SafeMath for uint256;\n    using SignedSafeMath for int256;\n\n    /*\n        we use a simple linked list - since the SignerListEntry is part of a map\n        the value remains directly accessible by the signer's address\n    */\n    struct SignerListEntry {\n        uint256 value;\n        address addrNext;\n        bool exists;\n    }\n\n    struct SignerData {\n        address signerAddr;\n        uint256 value;\n    }\n\n    uint256 constant private VERSION = (\n        (0 << 32) + /* major */\n        (53 << 16) + /* minor */\n        0 /* bugfix */\n    );\n\n    /* constants which are set during construction */\n    uint256 private blockNumber;\n    address private owner;\n    DigiOptionsMarkets private digiOptionsMarkets;\n\n    uint256 private existingMarkets; /* one bit for each marketCategory and marketInterval */\n\n    /* control variables/constants */\n    uint256 constant private transactionFeeTotalMax = 100; // 1.0%\n    uint256 constant private transactionFee0Min = 10; // 0.1%\n    uint256 constant private transactionFee1Min = 10; // 0.1%\n    uint256 constant private transactionFeeSignerMin = 5; // 0.05%\n    uint16 constant private openDelaySeconds = 600;\n\n    address internal signerAddrFirst; /* the first signer (if exists) */\n    mapping(address => SignerListEntry) private signerEntriesMap; // stores which signing addresses are allowed to register\n    uint256 private signerMapNumEntries = 0;\n\n    /* variables */\n    struct MarketBest {\n        bytes32 marketHash;\n        uint8 transactionFee0;\n        uint40 openTime;\n    }\n    mapping(bytes32 => MarketBest) internal marketsBest; // mapping from baseMarketHash\n    mapping(bytes32 => bool) internal isTestMarket; // mapping from marketHash\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Only owner can call this function.\");\n        _;\n    }\n\n    event MarketCreateLister(\n        bytes32 marketKey, /* marketsContract stores marketHash ; marketListerContract stores baseMarketHash */\n        uint48 indexed expirationDatetimeFilter,\n        uint40 expirationDatetime,\n        uint8 indexed marketInterval,\n        uint8 indexed marketCategory,\n        uint40 openTime,\n        string underlyingString\n    );\n\n    constructor (DigiOptionsMarkets addr)\n    {\n        owner = msg.sender;\n        blockNumber = block.number;\n        digiOptionsMarkets = addr;\n    }\n\n    /* TODO re-enabled after 0x-tools support solc-0.6.0\n    // default fallback\n    receive () external payable {\n        revert();\n    }\n    */\n\n    function getContractInfo (\n    )\n        external\n        override\n\tvirtual\n        returns (uint256[] memory contractInfoValues)\n    {\n        uint256[] memory infoValues = digiOptionsMarkets.getContractInfo();\n\n        {\n            infoValues[uint256(DigiOptionsLib.InfoValues.CONTRACT_TYPE_IDX)] = uint256(DigiOptionsLib.ContractType.DIGIOPTIONSMARKETLISTER);\n            infoValues[uint256(DigiOptionsLib.InfoValues.VERSION_MARKET_LISTER_IDX)] = VERSION;\n            //infoValues[uint256(DigiOptionsLib.InfoValues.VERSION_MARKETS_IDX)] // keep versionMarkets\n            infoValues[uint256(DigiOptionsLib.InfoValues.DIGIOPTIONS_MARKETS_ADDR_IDX)] = uint256(uint160(address(digiOptionsMarkets)));\n        }\n        {\n            infoValues[uint256(DigiOptionsLib.InfoValues.BLOCK_NUMBER_CREATED_IDX)] = blockNumber;\n            //infoValues[uint256(DigiOptionsLib.InfoValues.TIMESTAMP_MARKET_CREATED_IDX)] // keep timestampMarketsCreated\n            //infoValues[uint256(DigiOptionsLib.InfoValues.OFFER_MAX_BLOCKS_INTO_FUTURE_IDX)] // keep offerMaxBlocksInto_future\n            //infoValues[uint256(DigiOptionsLib.InfoValues.PAYOUT_PER_NANO_OPTION_EXP_IDX)] // keep payoutPerNanoOption\n            infoValues[uint256(DigiOptionsLib.InfoValues.EXISTING_MARKETS_IDX)] = existingMarkets;\n        }\n\n        return infoValues;\n    }\n\n    function getMarketListerInfo(\n    )\n        external\n        view\n        returns (uint256[] memory listerValues, SignerData[] memory signerDataList)\n    {\n        listerValues = new uint[](uint256(DigiOptionsLib.InfoLister.MAX));\n\n        listerValues[uint256(DigiOptionsLib.InfoLister.VERSION_MARKET_LISTER_IDX)] = VERSION;\n        listerValues[uint256(DigiOptionsLib.InfoLister.OWNER_IDX)] = uint256(uint160(owner));\n        listerValues[uint256(DigiOptionsLib.InfoLister.TRANSACTION_FEE_TOTAL_MAX_IDX)] = transactionFeeTotalMax;\n        listerValues[uint256(DigiOptionsLib.InfoLister.TRANSACTION_FEE0_MIN_IDX)] = transactionFee0Min;\n        listerValues[uint256(DigiOptionsLib.InfoLister.TRANSACTION_FEE1_MIN_IDX)] = transactionFee1Min;\n        listerValues[uint256(DigiOptionsLib.InfoLister.TRANSACTION_FEE_SIGNER_MIN_IDX)] = transactionFeeSignerMin;\n        listerValues[uint256(DigiOptionsLib.InfoLister.OPEN_DELAY_SECONDS_IDX)] = uint256(openDelaySeconds);\n\n        uint256 numEntries = signerMapNumEntries;\n        signerDataList = new SignerData[](numEntries);\n\n        address signerAddr = signerAddrFirst;\n        uint256 idx;\n        for (idx=0 ; idx < numEntries ; idx++){\n\n            signerDataList[idx] = SignerData({\n                signerAddr: signerAddr,\n                value: signerEntriesMap[signerAddr].value\n            });\n            // move on with next entry\n            signerAddr = signerEntriesMap[signerAddr].addrNext;\n        }\n\n        return (listerValues, signerDataList);\n    }\n\n    function getMarketDataByMarketHash (\n        address addr, // marketData.userState for this address\n        bytes32 marketHash\n    )\n        public\n        view\n        override\n        virtual\n        returns (DigiOptionsLib.MarketData memory marketData)\n    {\n        marketData = digiOptionsMarkets.getMarketDataByMarketHash(addr, marketHash);\n        // override testMarket\n        marketData.testMarket = isTestMarket[marketHash];\n    }\n\n    function getMarketDataListByMarketKeys (\n        address addr, // marketData.userState for this address\n        bytes32[] calldata marketKeys // marketsContract uses marketHash / marketListerContract uses baseMarketHash\n    )\n        external\n        view\n        override\n        virtual\n        returns (DigiOptionsLib.MarketData[] memory marketDataList)\n    {\n        marketDataList = new DigiOptionsLib.MarketData[](marketKeys.length);\n        uint256 idx;\n\n        for (idx= 0 ; idx < marketKeys.length ; idx++) {\n            marketDataList[idx] = getMarketDataByMarketHash(addr, marketsBest[marketKeys[idx]].marketHash);\n        }\n        return marketDataList;\n    }\n\n    function calcMarketInterval (\n        uint40 expirationDatetime\n    )\n        external\n        view\n        override\n        virtual\n        returns (uint8 interval)\n    {\n        return digiOptionsMarkets.calcMarketInterval(expirationDatetime);\n    }\n\n    /*\n    check, if a market might be possible to register (it does not need to be created for this\n    and it is not checked if creating is possible at all)\n    */\n    function registerMarketTest (\n        DigiOptionsLib.MarketBaseData memory marketBaseData\n    )\n        public\n        view\n        returns (bool registerPossible)\n    {\n\n        {\n            if (msg.sender == owner){\n                // always allow owner\n                return true;\n            }\n\n            if (\n                (signerEntriesMap[marketBaseData.signerAddr].value == 0) // TODO check bits!\n            ){\n                return false;\n            }\n        }\n\n        /* check fees and feeTaker0 */\n        if (\n            ((uint256(marketBaseData.transactionFee0)).add(uint256(marketBaseData.transactionFee1)).add(uint256(marketBaseData.transactionFeeSigner)) <= transactionFeeTotalMax) &&\n            (marketBaseData.transactionFee0 >= transactionFee0Min) &&\n            (marketBaseData.transactionFee1 >= transactionFee1Min) &&\n            (marketBaseData.transactionFeeSigner >= transactionFeeSignerMin) &&\n            (marketBaseData.feeTaker0 == owner)\n        ){\n            return true;\n        }\n\n        return false;\n    }\n\n    /*\n        This is just a convenient wrapper for both, creating and registering a market.\n        Remember you can always do this in two transactions and just use this contract\n        for registration.\n    */\n    function createMarket (\n        DigiOptionsLib.MarketBaseData memory marketBaseData,\n        bool testMarket,\n        FactsignerVerify.Signature memory signature\n    )\n        public // this should be external (see https://github.com/ethereum/solidity/issues/5479)\n        override\n        returns (bytes32 marketHash)\n    {\n        require (registerMarketTest(marketBaseData), 'register not possible');\n        marketHash = digiOptionsMarkets.createMarket(\n            marketBaseData,\n            testMarket,\n            signature\n        );\n        registerMarketIntern (\n            marketBaseData,\n            marketHash,\n            testMarket\n        );\n        return marketHash;\n    }\n\n    function registerMarket (\n        bytes32 marketHash,\n        bool testMarket\n    )\n        public\n    {\n        DigiOptionsLib.MarketBaseData memory marketBaseData = digiOptionsMarkets.getMarketBaseDataByMarketHash(marketHash);\n\n        /* check that the market exists */\n        assert(marketBaseData.expirationDatetime != 0);\n\n        require (registerMarketTest(marketBaseData), 'register not possible');\n        registerMarketIntern(\n            marketBaseData,\n            marketHash,\n            testMarket\n        );\n    }\n\n    function registerMarketIntern (\n        DigiOptionsLib.MarketBaseData memory marketBaseData,\n        bytes32 marketHash,\n        bool testMarket\n    )\n        internal\n    {\n        bytes32 baseMarketHash = DigiOptionsLib.calcBaseMarketHash(marketBaseData);\n\n        MarketBest storage marketBest = marketsBest[baseMarketHash];\n\n        if (marketBest.marketHash == 0) {\n            // does not yet exist\n\n            uint40 openTime = uint40((msg.sender == owner)? 0 : block.timestamp + openDelaySeconds);\n            marketsBest[baseMarketHash] = MarketBest(\n                {\n                marketHash: marketHash,\n                transactionFee0: marketBaseData.transactionFee0,\n                openTime: openTime\n                }\n            );\n\n            if (msg.sender == owner) {\n                isTestMarket[marketHash] = testMarket;\n            }\n\n            uint256 existingMarketsBit = (1 << uint256(marketBaseData.marketInterval)) << (marketBaseData.marketCategory * 8);\n            if (existingMarkets & existingMarketsBit == 0) {\n                existingMarkets = existingMarkets | existingMarketsBit;\n            }\n\n            uint8 marketIntervalForEventFilter;\n            if ((marketBaseData.config & uint8(FactsignerDefines.ConfigMask.ConfigIntervalTypeIsUsedMask) != 0)) {\n                /* interval used */\n                marketIntervalForEventFilter = marketBaseData.marketInterval;\n            } else {\n                /* interval unused */\n                marketIntervalForEventFilter = DigiOptionsLib.calcMarketInterval(marketBaseData.expirationDatetime);\n            }\n\n            // emit only once for each market (even if it will be replaced later)\n            emit MarketCreateLister(\n                baseMarketHash, // marketKey\n                ((marketBaseData.expirationDatetime/DigiOptionsLib.getDivider(marketIntervalForEventFilter)) << 8) + marketIntervalForEventFilter,\n                marketBaseData.expirationDatetime,\n                marketBaseData.marketInterval,\n                marketBaseData.marketCategory,\n                openTime,\n                marketBaseData.underlyingString\n            );\n            return;\n        }\n        if (\n            (marketBaseData.transactionFee0 > marketBest.transactionFee0) &&\n            (block.timestamp < marketBest.openTime)\n        ){\n            marketBest.marketHash = marketHash;\n            marketBest.transactionFee0 = marketBaseData.transactionFee0;\n        }\n    }\n\n    function setTestMarket (\n        bytes32 marketHash,\n        bool testMarket\n    )\n        public\n        onlyOwner\n    {\n        isTestMarket[marketHash] = testMarket;\n    }\n\n    /*\n    function setOpenDelaySeconds (\n        uint16 openDelaySeconds_\n    )\n        public\n        onlyOwner\n    {\n        if (openDelaySeconds_ > 0) {\n            openDelaySeconds = openDelaySeconds_;\n        }\n    }\n    */\n\n    /*\n    function setTransactionFeeTotalMax (\n        uint64 transactionFeeTotalMax_\n    )\n        public\n        onlyOwner\n    {\n        transactionFeeTotalMax = transactionFeeTotalMax_;\n    }\n    */\n\n    function setSigner (\n        address signerAddr,\n        uint256 value\n    )\n        public\n        onlyOwner\n    {\n        if (signerEntriesMap[signerAddr].exists){\n            // just modify value\n            signerEntriesMap[signerAddr].value = value;\n            return;\n        }\n\n        // add new entry at the head of the list\n        address addrTmp = signerAddrFirst;\n        signerEntriesMap[signerAddr] = SignerListEntry({\n            value: value,\n            addrNext: addrTmp,\n            exists: true\n        });\n        signerAddrFirst = signerAddr;\n        signerMapNumEntries = signerMapNumEntries + 1;\n    }\n}\n"
	},
	"compiler": {
		"name": "solc",
		"version": "0.7.4+commit.3f05b770",
		"settings": {
			"remappings": [
				"factsigner=/home/ulf/digioptions/digioptions-contracts.js/node_modules/factsigner",
				"@openzeppelin/contracts=/home/ulf/digioptions/digioptions-contracts.js/node_modules/@openzeppelin/contracts"
			],
			"optimizer": {
				"enabled": true,
				"runs": 20000,
				"details": {
					"yul": true,
					"deduplicate": true,
					"cse": true,
					"constantOptimizer": true
				}
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap"
					]
				}
			}
		}
	},
	"chains": {}
}